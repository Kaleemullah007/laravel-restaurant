/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/libs/chart/apexcharts/apexcharts.min.js":
/*!******************************************************************!*\
  !*** ./resources/assets/libs/chart/apexcharts/apexcharts.min.js ***!
  \******************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/*!\r\n * ApexCharts v3.35.3\r\n * (c) 2018-2022 ApexCharts\r\n * Released under the MIT License.\r\n */\n!function (t, e) {\n  \"object\" == ( false ? 0 : _typeof(exports)) && \"undefined\" != \"object\" ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n}(this, function () {\n  \"use strict\";\n\n  function t(t, e) {\n    var i = Object.keys(t);\n\n    if (Object.getOwnPropertySymbols) {\n      var a = Object.getOwnPropertySymbols(t);\n      e && (a = a.filter(function (e) {\n        return Object.getOwnPropertyDescriptor(t, e).enumerable;\n      })), i.push.apply(i, a);\n    }\n\n    return i;\n  }\n\n  function e(e) {\n    for (var i = 1; i < arguments.length; i++) {\n      var a = null != arguments[i] ? arguments[i] : {};\n      i % 2 ? t(Object(a), !0).forEach(function (t) {\n        o(e, t, a[t]);\n      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(a)) : t(Object(a)).forEach(function (t) {\n        Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(a, t));\n      });\n    }\n\n    return e;\n  }\n\n  function i(t) {\n    return (i = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (t) {\n      return _typeof(t);\n    } : function (t) {\n      return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : _typeof(t);\n    })(t);\n  }\n\n  function a(t, e) {\n    if (!(t instanceof e)) throw new TypeError(\"Cannot call a class as a function\");\n  }\n\n  function s(t, e) {\n    for (var i = 0; i < e.length; i++) {\n      var a = e[i];\n      a.enumerable = a.enumerable || !1, a.configurable = !0, \"value\" in a && (a.writable = !0), Object.defineProperty(t, a.key, a);\n    }\n  }\n\n  function r(t, e, i) {\n    return e && s(t.prototype, e), i && s(t, i), t;\n  }\n\n  function o(t, e, i) {\n    return e in t ? Object.defineProperty(t, e, {\n      value: i,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }) : t[e] = i, t;\n  }\n\n  function n(t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n    t.prototype = Object.create(e && e.prototype, {\n      constructor: {\n        value: t,\n        writable: !0,\n        configurable: !0\n      }\n    }), e && h(t, e);\n  }\n\n  function l(t) {\n    return (l = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) {\n      return t.__proto__ || Object.getPrototypeOf(t);\n    })(t);\n  }\n\n  function h(t, e) {\n    return (h = Object.setPrototypeOf || function (t, e) {\n      return t.__proto__ = e, t;\n    })(t, e);\n  }\n\n  function c(t, e) {\n    if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e;\n    if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n    return function (t) {\n      if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n      return t;\n    }(t);\n  }\n\n  function d(t) {\n    var e = function () {\n      if (\"undefined\" == typeof Reflect || !Reflect.construct) return !1;\n      if (Reflect.construct.sham) return !1;\n      if (\"function\" == typeof Proxy) return !0;\n\n      try {\n        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;\n      } catch (t) {\n        return !1;\n      }\n    }();\n\n    return function () {\n      var i,\n          a = l(t);\n\n      if (e) {\n        var s = l(this).constructor;\n        i = Reflect.construct(a, arguments, s);\n      } else i = a.apply(this, arguments);\n\n      return c(this, i);\n    };\n  }\n\n  function g(t, e) {\n    return function (t) {\n      if (Array.isArray(t)) return t;\n    }(t) || function (t, e) {\n      var i = null == t ? null : \"undefined\" != typeof Symbol && t[Symbol.iterator] || t[\"@@iterator\"];\n      if (null == i) return;\n      var a,\n          s,\n          r = [],\n          o = !0,\n          n = !1;\n\n      try {\n        for (i = i.call(t); !(o = (a = i.next()).done) && (r.push(a.value), !e || r.length !== e); o = !0) {\n          ;\n        }\n      } catch (t) {\n        n = !0, s = t;\n      } finally {\n        try {\n          o || null == i[\"return\"] || i[\"return\"]();\n        } finally {\n          if (n) throw s;\n        }\n      }\n\n      return r;\n    }(t, e) || f(t, e) || function () {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }();\n  }\n\n  function u(t) {\n    return function (t) {\n      if (Array.isArray(t)) return p(t);\n    }(t) || function (t) {\n      if (\"undefined\" != typeof Symbol && null != t[Symbol.iterator] || null != t[\"@@iterator\"]) return Array.from(t);\n    }(t) || f(t) || function () {\n      throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }();\n  }\n\n  function f(t, e) {\n    if (t) {\n      if (\"string\" == typeof t) return p(t, e);\n      var i = Object.prototype.toString.call(t).slice(8, -1);\n      return \"Object\" === i && t.constructor && (i = t.constructor.name), \"Map\" === i || \"Set\" === i ? Array.from(t) : \"Arguments\" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? p(t, e) : void 0;\n    }\n  }\n\n  function p(t, e) {\n    (null == e || e > t.length) && (e = t.length);\n\n    for (var i = 0, a = new Array(e); i < e; i++) {\n      a[i] = t[i];\n    }\n\n    return a;\n  }\n\n  var x = function () {\n    function t() {\n      a(this, t);\n    }\n\n    return r(t, [{\n      key: \"shadeRGBColor\",\n      value: function value(t, e) {\n        var i = e.split(\",\"),\n            a = t < 0 ? 0 : 255,\n            s = t < 0 ? -1 * t : t,\n            r = parseInt(i[0].slice(4), 10),\n            o = parseInt(i[1], 10),\n            n = parseInt(i[2], 10);\n        return \"rgb(\" + (Math.round((a - r) * s) + r) + \",\" + (Math.round((a - o) * s) + o) + \",\" + (Math.round((a - n) * s) + n) + \")\";\n      }\n    }, {\n      key: \"shadeHexColor\",\n      value: function value(t, e) {\n        var i = parseInt(e.slice(1), 16),\n            a = t < 0 ? 0 : 255,\n            s = t < 0 ? -1 * t : t,\n            r = i >> 16,\n            o = i >> 8 & 255,\n            n = 255 & i;\n        return \"#\" + (16777216 + 65536 * (Math.round((a - r) * s) + r) + 256 * (Math.round((a - o) * s) + o) + (Math.round((a - n) * s) + n)).toString(16).slice(1);\n      }\n    }, {\n      key: \"shadeColor\",\n      value: function value(e, i) {\n        return t.isColorHex(i) ? this.shadeHexColor(e, i) : this.shadeRGBColor(e, i);\n      }\n    }], [{\n      key: \"bind\",\n      value: function value(t, e) {\n        return function () {\n          return t.apply(e, arguments);\n        };\n      }\n    }, {\n      key: \"isObject\",\n      value: function value(t) {\n        return t && \"object\" === i(t) && !Array.isArray(t) && null != t;\n      }\n    }, {\n      key: \"is\",\n      value: function value(t, e) {\n        return Object.prototype.toString.call(e) === \"[object \" + t + \"]\";\n      }\n    }, {\n      key: \"listToArray\",\n      value: function value(t) {\n        var e,\n            i = [];\n\n        for (e = 0; e < t.length; e++) {\n          i[e] = t[e];\n        }\n\n        return i;\n      }\n    }, {\n      key: \"extend\",\n      value: function value(t, e) {\n        var i = this;\n        \"function\" != typeof Object.assign && (Object.assign = function (t) {\n          if (null == t) throw new TypeError(\"Cannot convert undefined or null to object\");\n\n          for (var e = Object(t), i = 1; i < arguments.length; i++) {\n            var a = arguments[i];\n            if (null != a) for (var s in a) {\n              a.hasOwnProperty(s) && (e[s] = a[s]);\n            }\n          }\n\n          return e;\n        });\n        var a = Object.assign({}, t);\n        return this.isObject(t) && this.isObject(e) && Object.keys(e).forEach(function (s) {\n          i.isObject(e[s]) && s in t ? a[s] = i.extend(t[s], e[s]) : Object.assign(a, o({}, s, e[s]));\n        }), a;\n      }\n    }, {\n      key: \"extendArray\",\n      value: function value(e, i) {\n        var a = [];\n        return e.map(function (e) {\n          a.push(t.extend(i, e));\n        }), e = a;\n      }\n    }, {\n      key: \"monthMod\",\n      value: function value(t) {\n        return t % 12;\n      }\n    }, {\n      key: \"clone\",\n      value: function value(e) {\n        if (t.is(\"Array\", e)) {\n          for (var a = [], s = 0; s < e.length; s++) {\n            a[s] = this.clone(e[s]);\n          }\n\n          return a;\n        }\n\n        if (t.is(\"Null\", e)) return null;\n        if (t.is(\"Date\", e)) return e;\n\n        if (\"object\" === i(e)) {\n          var r = {};\n\n          for (var o in e) {\n            e.hasOwnProperty(o) && (r[o] = this.clone(e[o]));\n          }\n\n          return r;\n        }\n\n        return e;\n      }\n    }, {\n      key: \"log10\",\n      value: function value(t) {\n        return Math.log(t) / Math.LN10;\n      }\n    }, {\n      key: \"roundToBase10\",\n      value: function value(t) {\n        return Math.pow(10, Math.floor(Math.log10(t)));\n      }\n    }, {\n      key: \"roundToBase\",\n      value: function value(t, e) {\n        return Math.pow(e, Math.floor(Math.log(t) / Math.log(e)));\n      }\n    }, {\n      key: \"parseNumber\",\n      value: function value(t) {\n        return null === t ? t : parseFloat(t);\n      }\n    }, {\n      key: \"randomId\",\n      value: function value() {\n        return (Math.random() + 1).toString(36).substring(4);\n      }\n    }, {\n      key: \"noExponents\",\n      value: function value(t) {\n        var e = String(t).split(/[eE]/);\n        if (1 === e.length) return e[0];\n        var i = \"\",\n            a = t < 0 ? \"-\" : \"\",\n            s = e[0].replace(\".\", \"\"),\n            r = Number(e[1]) + 1;\n\n        if (r < 0) {\n          for (i = a + \"0.\"; r++;) {\n            i += \"0\";\n          }\n\n          return i + s.replace(/^-/, \"\");\n        }\n\n        for (r -= s.length; r--;) {\n          i += \"0\";\n        }\n\n        return s + i;\n      }\n    }, {\n      key: \"getDimensions\",\n      value: function value(t) {\n        var e = getComputedStyle(t, null),\n            i = t.clientHeight,\n            a = t.clientWidth;\n        return i -= parseFloat(e.paddingTop) + parseFloat(e.paddingBottom), [a -= parseFloat(e.paddingLeft) + parseFloat(e.paddingRight), i];\n      }\n    }, {\n      key: \"getBoundingClientRect\",\n      value: function value(t) {\n        var e = t.getBoundingClientRect();\n        return {\n          top: e.top,\n          right: e.right,\n          bottom: e.bottom,\n          left: e.left,\n          width: t.clientWidth,\n          height: t.clientHeight,\n          x: e.left,\n          y: e.top\n        };\n      }\n    }, {\n      key: \"getLargestStringFromArr\",\n      value: function value(t) {\n        return t.reduce(function (t, e) {\n          return Array.isArray(e) && (e = e.reduce(function (t, e) {\n            return t.length > e.length ? t : e;\n          })), t.length > e.length ? t : e;\n        }, 0);\n      }\n    }, {\n      key: \"hexToRgba\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"#999999\",\n            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : .6;\n        \"#\" !== t.substring(0, 1) && (t = \"#999999\");\n        var i = t.replace(\"#\", \"\");\n        i = i.match(new RegExp(\"(.{\" + i.length / 3 + \"})\", \"g\"));\n\n        for (var a = 0; a < i.length; a++) {\n          i[a] = parseInt(1 === i[a].length ? i[a] + i[a] : i[a], 16);\n        }\n\n        return void 0 !== e && i.push(e), \"rgba(\" + i.join(\",\") + \")\";\n      }\n    }, {\n      key: \"getOpacityFromRGBA\",\n      value: function value(t) {\n        return parseFloat(t.replace(/^.*,(.+)\\)/, \"$1\"));\n      }\n    }, {\n      key: \"rgb2hex\",\n      value: function value(t) {\n        return (t = t.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i)) && 4 === t.length ? \"#\" + (\"0\" + parseInt(t[1], 10).toString(16)).slice(-2) + (\"0\" + parseInt(t[2], 10).toString(16)).slice(-2) + (\"0\" + parseInt(t[3], 10).toString(16)).slice(-2) : \"\";\n      }\n    }, {\n      key: \"isColorHex\",\n      value: function value(t) {\n        return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(t);\n      }\n    }, {\n      key: \"getPolygonPos\",\n      value: function value(t, e) {\n        for (var i = [], a = 2 * Math.PI / e, s = 0; s < e; s++) {\n          var r = {};\n          r.x = t * Math.sin(s * a), r.y = -t * Math.cos(s * a), i.push(r);\n        }\n\n        return i;\n      }\n    }, {\n      key: \"polarToCartesian\",\n      value: function value(t, e, i, a) {\n        var s = (a - 90) * Math.PI / 180;\n        return {\n          x: t + i * Math.cos(s),\n          y: e + i * Math.sin(s)\n        };\n      }\n    }, {\n      key: \"escapeString\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"x\",\n            i = t.toString().slice();\n        return i = i.replace(/[` ~!@#$%^&*()_|+\\-=?;:'\",.<>{}[\\]\\\\/]/gi, e);\n      }\n    }, {\n      key: \"negToZero\",\n      value: function value(t) {\n        return t < 0 ? 0 : t;\n      }\n    }, {\n      key: \"moveIndexInArray\",\n      value: function value(t, e, i) {\n        if (i >= t.length) for (var a = i - t.length + 1; a--;) {\n          t.push(void 0);\n        }\n        return t.splice(i, 0, t.splice(e, 1)[0]), t;\n      }\n    }, {\n      key: \"extractNumber\",\n      value: function value(t) {\n        return parseFloat(t.replace(/[^\\d.]*/g, \"\"));\n      }\n    }, {\n      key: \"findAncestor\",\n      value: function value(t, e) {\n        for (; (t = t.parentElement) && !t.classList.contains(e);) {\n          ;\n        }\n\n        return t;\n      }\n    }, {\n      key: \"setELstyles\",\n      value: function value(t, e) {\n        for (var i in e) {\n          e.hasOwnProperty(i) && (t.style.key = e[i]);\n        }\n      }\n    }, {\n      key: \"isNumber\",\n      value: function value(t) {\n        return !isNaN(t) && parseFloat(Number(t)) === t && !isNaN(parseInt(t, 10));\n      }\n    }, {\n      key: \"isFloat\",\n      value: function value(t) {\n        return Number(t) === t && t % 1 != 0;\n      }\n    }, {\n      key: \"isSafari\",\n      value: function value() {\n        return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n      }\n    }, {\n      key: \"isFirefox\",\n      value: function value() {\n        return navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1;\n      }\n    }, {\n      key: \"isIE11\",\n      value: function value() {\n        if (-1 !== window.navigator.userAgent.indexOf(\"MSIE\") || window.navigator.appVersion.indexOf(\"Trident/\") > -1) return !0;\n      }\n    }, {\n      key: \"isIE\",\n      value: function value() {\n        var t = window.navigator.userAgent,\n            e = t.indexOf(\"MSIE \");\n        if (e > 0) return parseInt(t.substring(e + 5, t.indexOf(\".\", e)), 10);\n\n        if (t.indexOf(\"Trident/\") > 0) {\n          var i = t.indexOf(\"rv:\");\n          return parseInt(t.substring(i + 3, t.indexOf(\".\", i)), 10);\n        }\n\n        var a = t.indexOf(\"Edge/\");\n        return a > 0 && parseInt(t.substring(a + 5, t.indexOf(\".\", a)), 10);\n      }\n    }]), t;\n  }(),\n      b = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w, this.setEasingFunctions();\n    }\n\n    return r(t, [{\n      key: \"setEasingFunctions\",\n      value: function value() {\n        var t;\n\n        if (!this.w.globals.easing) {\n          switch (this.w.config.chart.animations.easing) {\n            case \"linear\":\n              t = \"-\";\n              break;\n\n            case \"easein\":\n              t = \"<\";\n              break;\n\n            case \"easeout\":\n              t = \">\";\n              break;\n\n            case \"easeinout\":\n              t = \"<>\";\n              break;\n\n            case \"swing\":\n              t = function t(_t) {\n                var e = 1.70158;\n                return (_t -= 1) * _t * ((e + 1) * _t + e) + 1;\n              };\n\n              break;\n\n            case \"bounce\":\n              t = function t(_t2) {\n                return _t2 < 1 / 2.75 ? 7.5625 * _t2 * _t2 : _t2 < 2 / 2.75 ? 7.5625 * (_t2 -= 1.5 / 2.75) * _t2 + .75 : _t2 < 2.5 / 2.75 ? 7.5625 * (_t2 -= 2.25 / 2.75) * _t2 + .9375 : 7.5625 * (_t2 -= 2.625 / 2.75) * _t2 + .984375;\n              };\n\n              break;\n\n            case \"elastic\":\n              t = function t(_t3) {\n                return _t3 === !!_t3 ? _t3 : Math.pow(2, -10 * _t3) * Math.sin((_t3 - .075) * (2 * Math.PI) / .3) + 1;\n              };\n\n              break;\n\n            default:\n              t = \"<>\";\n          }\n\n          this.w.globals.easing = t;\n        }\n      }\n    }, {\n      key: \"animateLine\",\n      value: function value(t, e, i, a) {\n        t.attr(e).animate(a).attr(i);\n      }\n    }, {\n      key: \"animateMarker\",\n      value: function value(t, e, i, a, s, r) {\n        e || (e = 0), t.attr({\n          r: e,\n          width: e,\n          height: e\n        }).animate(a, s).attr({\n          r: i,\n          width: i.width,\n          height: i.height\n        }).afterAll(function () {\n          r();\n        });\n      }\n    }, {\n      key: \"animateCircle\",\n      value: function value(t, e, i, a, s) {\n        t.attr({\n          r: e.r,\n          cx: e.cx,\n          cy: e.cy\n        }).animate(a, s).attr({\n          r: i.r,\n          cx: i.cx,\n          cy: i.cy\n        });\n      }\n    }, {\n      key: \"animateRect\",\n      value: function value(t, e, i, a, s) {\n        t.attr(e).animate(a).attr(i).afterAll(function () {\n          return s();\n        });\n      }\n    }, {\n      key: \"animatePathsGradually\",\n      value: function value(t) {\n        var e = t.el,\n            i = t.realIndex,\n            a = t.j,\n            s = t.fill,\n            r = t.pathFrom,\n            o = t.pathTo,\n            n = t.speed,\n            l = t.delay,\n            h = this.w,\n            c = 0;\n        h.config.chart.animations.animateGradually.enabled && (c = h.config.chart.animations.animateGradually.delay), h.config.chart.animations.dynamicAnimation.enabled && h.globals.dataChanged && \"bar\" !== h.config.chart.type && (c = 0), this.morphSVG(e, i, a, \"line\" !== h.config.chart.type || h.globals.comboCharts ? s : \"stroke\", r, o, n, l * c);\n      }\n    }, {\n      key: \"showDelayedElements\",\n      value: function value() {\n        this.w.globals.delayedElements.forEach(function (t) {\n          t.el.classList.remove(\"apexcharts-element-hidden\");\n        });\n      }\n    }, {\n      key: \"animationCompleted\",\n      value: function value(t) {\n        var e = this.w;\n        e.globals.animationEnded || (e.globals.animationEnded = !0, this.showDelayedElements(), \"function\" == typeof e.config.chart.events.animationEnd && e.config.chart.events.animationEnd(this.ctx, {\n          el: t,\n          w: e\n        }));\n      }\n    }, {\n      key: \"morphSVG\",\n      value: function value(t, e, i, a, s, r, o, n) {\n        var l = this,\n            h = this.w;\n        s || (s = t.attr(\"pathFrom\")), r || (r = t.attr(\"pathTo\"));\n\n        var c = function c(t) {\n          return \"radar\" === h.config.chart.type && (o = 1), \"M 0 \".concat(h.globals.gridHeight);\n        };\n\n        (!s || s.indexOf(\"undefined\") > -1 || s.indexOf(\"NaN\") > -1) && (s = c()), (!r || r.indexOf(\"undefined\") > -1 || r.indexOf(\"NaN\") > -1) && (r = c()), h.globals.shouldAnimate || (o = 1), t.plot(s).animate(1, h.globals.easing, n).plot(s).animate(o, h.globals.easing, n).plot(r).afterAll(function () {\n          x.isNumber(i) ? i === h.globals.series[h.globals.maxValsInArrayIndex].length - 2 && h.globals.shouldAnimate && l.animationCompleted(t) : \"none\" !== a && h.globals.shouldAnimate && (!h.globals.comboCharts && e === h.globals.series.length - 1 || h.globals.comboCharts) && l.animationCompleted(t), l.showDelayedElements();\n        });\n      }\n    }]), t;\n  }(),\n      v = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"getDefaultFilter\",\n      value: function value(t, e) {\n        var i = this.w;\n        t.unfilter(!0), new window.SVG.Filter().size(\"120%\", \"180%\", \"-5%\", \"-40%\"), \"none\" !== i.config.states.normal.filter ? this.applyFilter(t, e, i.config.states.normal.filter.type, i.config.states.normal.filter.value) : i.config.chart.dropShadow.enabled && this.dropShadow(t, i.config.chart.dropShadow, e);\n      }\n    }, {\n      key: \"addNormalFilter\",\n      value: function value(t, e) {\n        var i = this.w;\n        i.config.chart.dropShadow.enabled && !t.node.classList.contains(\"apexcharts-marker\") && this.dropShadow(t, i.config.chart.dropShadow, e);\n      }\n    }, {\n      key: \"addLightenFilter\",\n      value: function value(t, e, i) {\n        var a = this,\n            s = this.w,\n            r = i.intensity;\n        t.unfilter(!0);\n        new window.SVG.Filter();\n        t.filter(function (t) {\n          var i = s.config.chart.dropShadow;\n          (i.enabled ? a.addShadow(t, e, i) : t).componentTransfer({\n            rgb: {\n              type: \"linear\",\n              slope: 1.5,\n              intercept: r\n            }\n          });\n        }), t.filterer.node.setAttribute(\"filterUnits\", \"userSpaceOnUse\"), this._scaleFilterSize(t.filterer.node);\n      }\n    }, {\n      key: \"addDarkenFilter\",\n      value: function value(t, e, i) {\n        var a = this,\n            s = this.w,\n            r = i.intensity;\n        t.unfilter(!0);\n        new window.SVG.Filter();\n        t.filter(function (t) {\n          var i = s.config.chart.dropShadow;\n          (i.enabled ? a.addShadow(t, e, i) : t).componentTransfer({\n            rgb: {\n              type: \"linear\",\n              slope: r\n            }\n          });\n        }), t.filterer.node.setAttribute(\"filterUnits\", \"userSpaceOnUse\"), this._scaleFilterSize(t.filterer.node);\n      }\n    }, {\n      key: \"applyFilter\",\n      value: function value(t, e, i) {\n        var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : .5;\n\n        switch (i) {\n          case \"none\":\n            this.addNormalFilter(t, e);\n            break;\n\n          case \"lighten\":\n            this.addLightenFilter(t, e, {\n              intensity: a\n            });\n            break;\n\n          case \"darken\":\n            this.addDarkenFilter(t, e, {\n              intensity: a\n            });\n        }\n      }\n    }, {\n      key: \"addShadow\",\n      value: function value(t, e, i) {\n        var a = i.blur,\n            s = i.top,\n            r = i.left,\n            o = i.color,\n            n = i.opacity,\n            l = t.flood(Array.isArray(o) ? o[e] : o, n).composite(t.sourceAlpha, \"in\").offset(r, s).gaussianBlur(a).merge(t.source);\n        return t.blend(t.source, l);\n      }\n    }, {\n      key: \"dropShadow\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            a = e.top,\n            s = e.left,\n            r = e.blur,\n            o = e.color,\n            n = e.opacity,\n            l = e.noUserSpaceOnUse,\n            h = this.w;\n        return t.unfilter(!0), x.isIE() && \"radialBar\" === h.config.chart.type || (o = Array.isArray(o) ? o[i] : o, t.filter(function (t) {\n          var e = null;\n          e = x.isSafari() || x.isFirefox() || x.isIE() ? t.flood(o, n).composite(t.sourceAlpha, \"in\").offset(s, a).gaussianBlur(r) : t.flood(o, n).composite(t.sourceAlpha, \"in\").offset(s, a).gaussianBlur(r).merge(t.source), t.blend(t.source, e);\n        }), l || t.filterer.node.setAttribute(\"filterUnits\", \"userSpaceOnUse\"), this._scaleFilterSize(t.filterer.node)), t;\n      }\n    }, {\n      key: \"setSelectionFilter\",\n      value: function value(t, e, i) {\n        var a = this.w;\n\n        if (void 0 !== a.globals.selectedDataPoints[e] && a.globals.selectedDataPoints[e].indexOf(i) > -1) {\n          t.node.setAttribute(\"selected\", !0);\n          var s = a.config.states.active.filter;\n          \"none\" !== s && this.applyFilter(t, e, s.type, s.value);\n        }\n      }\n    }, {\n      key: \"_scaleFilterSize\",\n      value: function value(t) {\n        !function (e) {\n          for (var i in e) {\n            e.hasOwnProperty(i) && t.setAttribute(i, e[i]);\n          }\n        }({\n          width: \"200%\",\n          height: \"200%\",\n          x: \"-50%\",\n          y: \"-50%\"\n        });\n      }\n    }]), t;\n  }(),\n      m = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"drawLine\",\n      value: function value(t, e, i, a) {\n        var s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : \"#a8a8a8\",\n            r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0,\n            o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,\n            n = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : \"butt\",\n            l = this.w,\n            h = l.globals.dom.Paper.line().attr({\n          x1: t,\n          y1: e,\n          x2: i,\n          y2: a,\n          stroke: s,\n          \"stroke-dasharray\": r,\n          \"stroke-width\": o,\n          \"stroke-linecap\": n\n        });\n        return h;\n      }\n    }, {\n      key: \"drawRect\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,\n            a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,\n            s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,\n            r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : \"#fefefe\",\n            o = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 1,\n            n = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,\n            l = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null,\n            h = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0,\n            c = this.w,\n            d = c.globals.dom.Paper.rect();\n        return d.attr({\n          x: t,\n          y: e,\n          width: i > 0 ? i : 0,\n          height: a > 0 ? a : 0,\n          rx: s,\n          ry: s,\n          opacity: o,\n          \"stroke-width\": null !== n ? n : 0,\n          stroke: null !== l ? l : \"none\",\n          \"stroke-dasharray\": h\n        }), d.node.setAttribute(\"fill\", r), d;\n      }\n    }, {\n      key: \"drawPolygon\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"#e1e1e1\",\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1,\n            a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"none\",\n            s = this.w,\n            r = s.globals.dom.Paper.polygon(t).attr({\n          fill: a,\n          stroke: e,\n          \"stroke-width\": i\n        });\n        return r;\n      }\n    }, {\n      key: \"drawCircle\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,\n            i = this.w;\n        t < 0 && (t = 0);\n        var a = i.globals.dom.Paper.circle(2 * t);\n        return null !== e && a.attr(e), a;\n      }\n    }, {\n      key: \"drawPath\",\n      value: function value(t) {\n        var e = t.d,\n            i = void 0 === e ? \"\" : e,\n            a = t.stroke,\n            s = void 0 === a ? \"#a8a8a8\" : a,\n            r = t.strokeWidth,\n            o = void 0 === r ? 1 : r,\n            n = t.fill,\n            l = t.fillOpacity,\n            h = void 0 === l ? 1 : l,\n            c = t.strokeOpacity,\n            d = void 0 === c ? 1 : c,\n            g = t.classes,\n            u = t.strokeLinecap,\n            f = void 0 === u ? null : u,\n            p = t.strokeDashArray,\n            x = void 0 === p ? 0 : p,\n            b = this.w;\n        return null === f && (f = b.config.stroke.lineCap), (i.indexOf(\"undefined\") > -1 || i.indexOf(\"NaN\") > -1) && (i = \"M 0 \".concat(b.globals.gridHeight)), b.globals.dom.Paper.path(i).attr({\n          fill: n,\n          \"fill-opacity\": h,\n          stroke: s,\n          \"stroke-opacity\": d,\n          \"stroke-linecap\": f,\n          \"stroke-width\": o,\n          \"stroke-dasharray\": x,\n          \"class\": g\n        });\n      }\n    }, {\n      key: \"group\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,\n            e = this.w,\n            i = e.globals.dom.Paper.group();\n        return null !== t && i.attr(t), i;\n      }\n    }, {\n      key: \"move\",\n      value: function value(t, e) {\n        var i = [\"M\", t, e].join(\" \");\n        return i;\n      }\n    }, {\n      key: \"line\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n            a = null;\n        return null === i ? a = [\"L\", t, e].join(\" \") : \"H\" === i ? a = [\"H\", t].join(\" \") : \"V\" === i && (a = [\"V\", e].join(\" \")), a;\n      }\n    }, {\n      key: \"curve\",\n      value: function value(t, e, i, a, s, r) {\n        var o = [\"C\", t, e, i, a, s, r].join(\" \");\n        return o;\n      }\n    }, {\n      key: \"quadraticCurve\",\n      value: function value(t, e, i, a) {\n        return [\"Q\", t, e, i, a].join(\" \");\n      }\n    }, {\n      key: \"arc\",\n      value: function value(t, e, i, a, s, r, o) {\n        var n = arguments.length > 7 && void 0 !== arguments[7] && arguments[7],\n            l = \"A\";\n        n && (l = \"a\");\n        var h = [l, t, e, i, a, s, r, o].join(\" \");\n        return h;\n      }\n    }, {\n      key: \"renderPaths\",\n      value: function value(t) {\n        var i,\n            a = t.j,\n            s = t.realIndex,\n            r = t.pathFrom,\n            o = t.pathTo,\n            n = t.stroke,\n            l = t.strokeWidth,\n            h = t.strokeLinecap,\n            c = t.fill,\n            d = t.animationDelay,\n            g = t.initialSpeed,\n            u = t.dataChangeSpeed,\n            f = t.className,\n            p = t.shouldClipToGrid,\n            x = void 0 === p || p,\n            m = t.bindEventsOnPaths,\n            y = void 0 === m || m,\n            w = t.drawShadow,\n            k = void 0 === w || w,\n            A = this.w,\n            S = new v(this.ctx),\n            C = new b(this.ctx),\n            L = this.w.config.chart.animations.enabled,\n            P = L && this.w.config.chart.animations.dynamicAnimation.enabled,\n            M = !!(L && !A.globals.resized || P && A.globals.dataChanged && A.globals.shouldAnimate);\n        M ? i = r : (i = o, A.globals.animationEnded = !0);\n        var T = A.config.stroke.dashArray,\n            I = 0;\n        I = Array.isArray(T) ? T[s] : A.config.stroke.dashArray;\n        var z = this.drawPath({\n          d: i,\n          stroke: n,\n          strokeWidth: l,\n          fill: c,\n          fillOpacity: 1,\n          classes: f,\n          strokeLinecap: h,\n          strokeDashArray: I\n        });\n        if (z.attr(\"index\", s), x && z.attr({\n          \"clip-path\": \"url(#gridRectMask\".concat(A.globals.cuid, \")\")\n        }), \"none\" !== A.config.states.normal.filter.type) S.getDefaultFilter(z, s);else if (A.config.chart.dropShadow.enabled && k && (!A.config.chart.dropShadow.enabledOnSeries || A.config.chart.dropShadow.enabledOnSeries && -1 !== A.config.chart.dropShadow.enabledOnSeries.indexOf(s))) {\n          var X = A.config.chart.dropShadow;\n          S.dropShadow(z, X, s);\n        }\n        y && (z.node.addEventListener(\"mouseenter\", this.pathMouseEnter.bind(this, z)), z.node.addEventListener(\"mouseleave\", this.pathMouseLeave.bind(this, z)), z.node.addEventListener(\"mousedown\", this.pathMouseDown.bind(this, z))), z.attr({\n          pathTo: o,\n          pathFrom: r\n        });\n        var E = {\n          el: z,\n          j: a,\n          realIndex: s,\n          pathFrom: r,\n          pathTo: o,\n          fill: c,\n          strokeWidth: l,\n          delay: d\n        };\n        return !L || A.globals.resized || A.globals.dataChanged ? !A.globals.resized && A.globals.dataChanged || C.showDelayedElements() : C.animatePathsGradually(e(e({}, E), {}, {\n          speed: g\n        })), A.globals.dataChanged && P && M && C.animatePathsGradually(e(e({}, E), {}, {\n          speed: u\n        })), z;\n      }\n    }, {\n      key: \"drawPattern\",\n      value: function value(t, e, i) {\n        var a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : \"#a8a8a8\",\n            s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,\n            r = this.w,\n            o = r.globals.dom.Paper.pattern(e, i, function (r) {\n          \"horizontalLines\" === t ? r.line(0, 0, i, 0).stroke({\n            color: a,\n            width: s + 1\n          }) : \"verticalLines\" === t ? r.line(0, 0, 0, e).stroke({\n            color: a,\n            width: s + 1\n          }) : \"slantedLines\" === t ? r.line(0, 0, e, i).stroke({\n            color: a,\n            width: s\n          }) : \"squares\" === t ? r.rect(e, i).fill(\"none\").stroke({\n            color: a,\n            width: s\n          }) : \"circles\" === t && r.circle(e).fill(\"none\").stroke({\n            color: a,\n            width: s\n          });\n        });\n        return o;\n      }\n    }, {\n      key: \"drawGradient\",\n      value: function value(t, e, i, a, s) {\n        var r,\n            o = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,\n            n = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,\n            l = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,\n            h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0,\n            c = this.w;\n        e.length < 9 && 0 === e.indexOf(\"#\") && (e = x.hexToRgba(e, a)), i.length < 9 && 0 === i.indexOf(\"#\") && (i = x.hexToRgba(i, s));\n        var d = 0,\n            g = 1,\n            u = 1,\n            f = null;\n        null !== n && (d = void 0 !== n[0] ? n[0] / 100 : 0, g = void 0 !== n[1] ? n[1] / 100 : 1, u = void 0 !== n[2] ? n[2] / 100 : 1, f = void 0 !== n[3] ? n[3] / 100 : null);\n        var p = !(\"donut\" !== c.config.chart.type && \"pie\" !== c.config.chart.type && \"polarArea\" !== c.config.chart.type && \"bubble\" !== c.config.chart.type);\n\n        if (r = null === l || 0 === l.length ? c.globals.dom.Paper.gradient(p ? \"radial\" : \"linear\", function (t) {\n          t.at(d, e, a), t.at(g, i, s), t.at(u, i, s), null !== f && t.at(f, e, a);\n        }) : c.globals.dom.Paper.gradient(p ? \"radial\" : \"linear\", function (t) {\n          (Array.isArray(l[h]) ? l[h] : l).forEach(function (e) {\n            t.at(e.offset / 100, e.color, e.opacity);\n          });\n        }), p) {\n          var b = c.globals.gridWidth / 2,\n              v = c.globals.gridHeight / 2;\n          \"bubble\" !== c.config.chart.type ? r.attr({\n            gradientUnits: \"userSpaceOnUse\",\n            cx: b,\n            cy: v,\n            r: o\n          }) : r.attr({\n            cx: .5,\n            cy: .5,\n            r: .8,\n            fx: .2,\n            fy: .2\n          });\n        } else \"vertical\" === t ? r.from(0, 0).to(0, 1) : \"diagonal\" === t ? r.from(0, 0).to(1, 1) : \"horizontal\" === t ? r.from(0, 1).to(1, 1) : \"diagonal2\" === t && r.from(1, 0).to(0, 1);\n\n        return r;\n      }\n    }, {\n      key: \"getTextBasedOnMaxWidth\",\n      value: function value(t) {\n        var e = t.text,\n            i = t.maxWidth,\n            a = t.fontSize,\n            s = t.fontFamily,\n            r = this.getTextRects(e, a, s),\n            o = r.width / e.length,\n            n = Math.floor(i / o);\n        return i < r.width ? e.slice(0, n - 3) + \"...\" : e;\n      }\n    }, {\n      key: \"drawText\",\n      value: function value(t) {\n        var i = this,\n            a = t.x,\n            s = t.y,\n            r = t.text,\n            o = t.textAnchor,\n            n = t.fontSize,\n            l = t.fontFamily,\n            h = t.fontWeight,\n            c = t.foreColor,\n            d = t.opacity,\n            g = t.maxWidth,\n            u = t.cssClass,\n            f = void 0 === u ? \"\" : u,\n            p = t.isPlainText,\n            x = void 0 === p || p,\n            b = this.w;\n        void 0 === r && (r = \"\");\n        var v = r;\n        o || (o = \"start\"), c && c.length || (c = b.config.chart.foreColor), l = l || b.config.chart.fontFamily, h = h || \"regular\";\n        var m,\n            y = {\n          maxWidth: g,\n          fontSize: n = n || \"11px\",\n          fontFamily: l\n        };\n        return Array.isArray(r) ? m = b.globals.dom.Paper.text(function (t) {\n          for (var a = 0; a < r.length; a++) {\n            v = r[a], g && (v = i.getTextBasedOnMaxWidth(e({\n              text: r[a]\n            }, y))), 0 === a ? t.tspan(v) : t.tspan(v).newLine();\n          }\n        }) : (g && (v = this.getTextBasedOnMaxWidth(e({\n          text: r\n        }, y))), m = x ? b.globals.dom.Paper.plain(r) : b.globals.dom.Paper.text(function (t) {\n          return t.tspan(v);\n        })), m.attr({\n          x: a,\n          y: s,\n          \"text-anchor\": o,\n          \"dominant-baseline\": \"auto\",\n          \"font-size\": n,\n          \"font-family\": l,\n          \"font-weight\": h,\n          fill: c,\n          \"class\": \"apexcharts-text \" + f\n        }), m.node.style.fontFamily = l, m.node.style.opacity = d, m;\n      }\n    }, {\n      key: \"drawMarker\",\n      value: function value(t, e, i) {\n        t = t || 0;\n        var a = i.pSize || 0,\n            s = null;\n\n        if (\"square\" === i.shape || \"rect\" === i.shape) {\n          var r = void 0 === i.pRadius ? a / 2 : i.pRadius;\n          null !== e && a || (a = 0, r = 0);\n          var o = 1.2 * a + r,\n              n = this.drawRect(o, o, o, o, r);\n          n.attr({\n            x: t - o / 2,\n            y: e - o / 2,\n            cx: t,\n            cy: e,\n            \"class\": i[\"class\"] ? i[\"class\"] : \"\",\n            fill: i.pointFillColor,\n            \"fill-opacity\": i.pointFillOpacity ? i.pointFillOpacity : 1,\n            stroke: i.pointStrokeColor,\n            \"stroke-width\": i.pointStrokeWidth ? i.pointStrokeWidth : 0,\n            \"stroke-opacity\": i.pointStrokeOpacity ? i.pointStrokeOpacity : 1\n          }), s = n;\n        } else \"circle\" !== i.shape && i.shape || (x.isNumber(e) || (a = 0, e = 0), s = this.drawCircle(a, {\n          cx: t,\n          cy: e,\n          \"class\": i[\"class\"] ? i[\"class\"] : \"\",\n          stroke: i.pointStrokeColor,\n          fill: i.pointFillColor,\n          \"fill-opacity\": i.pointFillOpacity ? i.pointFillOpacity : 1,\n          \"stroke-width\": i.pointStrokeWidth ? i.pointStrokeWidth : 0,\n          \"stroke-opacity\": i.pointStrokeOpacity ? i.pointStrokeOpacity : 1\n        }));\n\n        return s;\n      }\n    }, {\n      key: \"pathMouseEnter\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = new v(this.ctx),\n            s = parseInt(t.node.getAttribute(\"index\"), 10),\n            r = parseInt(t.node.getAttribute(\"j\"), 10);\n\n        if (\"function\" == typeof i.config.chart.events.dataPointMouseEnter && i.config.chart.events.dataPointMouseEnter(e, this.ctx, {\n          seriesIndex: s,\n          dataPointIndex: r,\n          w: i\n        }), this.ctx.events.fireEvent(\"dataPointMouseEnter\", [e, this.ctx, {\n          seriesIndex: s,\n          dataPointIndex: r,\n          w: i\n        }]), (\"none\" === i.config.states.active.filter.type || \"true\" !== t.node.getAttribute(\"selected\")) && \"none\" !== i.config.states.hover.filter.type && !i.globals.isTouchDevice) {\n          var o = i.config.states.hover.filter;\n          a.applyFilter(t, s, o.type, o.value);\n        }\n      }\n    }, {\n      key: \"pathMouseLeave\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = new v(this.ctx),\n            s = parseInt(t.node.getAttribute(\"index\"), 10),\n            r = parseInt(t.node.getAttribute(\"j\"), 10);\n        \"function\" == typeof i.config.chart.events.dataPointMouseLeave && i.config.chart.events.dataPointMouseLeave(e, this.ctx, {\n          seriesIndex: s,\n          dataPointIndex: r,\n          w: i\n        }), this.ctx.events.fireEvent(\"dataPointMouseLeave\", [e, this.ctx, {\n          seriesIndex: s,\n          dataPointIndex: r,\n          w: i\n        }]), \"none\" !== i.config.states.active.filter.type && \"true\" === t.node.getAttribute(\"selected\") || \"none\" !== i.config.states.hover.filter.type && a.getDefaultFilter(t, s);\n      }\n    }, {\n      key: \"pathMouseDown\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = new v(this.ctx),\n            s = parseInt(t.node.getAttribute(\"index\"), 10),\n            r = parseInt(t.node.getAttribute(\"j\"), 10),\n            o = \"false\";\n\n        if (\"true\" === t.node.getAttribute(\"selected\")) {\n          if (t.node.setAttribute(\"selected\", \"false\"), i.globals.selectedDataPoints[s].indexOf(r) > -1) {\n            var n = i.globals.selectedDataPoints[s].indexOf(r);\n            i.globals.selectedDataPoints[s].splice(n, 1);\n          }\n        } else {\n          if (!i.config.states.active.allowMultipleDataPointsSelection && i.globals.selectedDataPoints.length > 0) {\n            i.globals.selectedDataPoints = [];\n\n            var l = i.globals.dom.Paper.select(\".apexcharts-series path\").members,\n                h = i.globals.dom.Paper.select(\".apexcharts-series circle, .apexcharts-series rect\").members,\n                c = function c(t) {\n              Array.prototype.forEach.call(t, function (t) {\n                t.node.setAttribute(\"selected\", \"false\"), a.getDefaultFilter(t, s);\n              });\n            };\n\n            c(l), c(h);\n          }\n\n          t.node.setAttribute(\"selected\", \"true\"), o = \"true\", void 0 === i.globals.selectedDataPoints[s] && (i.globals.selectedDataPoints[s] = []), i.globals.selectedDataPoints[s].push(r);\n        }\n\n        if (\"true\" === o) {\n          var d = i.config.states.active.filter;\n          if (\"none\" !== d) a.applyFilter(t, s, d.type, d.value);else if (\"none\" !== i.config.states.hover.filter && !i.globals.isTouchDevice) {\n            var g = i.config.states.hover.filter;\n            a.applyFilter(t, s, g.type, g.value);\n          }\n        } else if (\"none\" !== i.config.states.active.filter.type) if (\"none\" === i.config.states.hover.filter.type || i.globals.isTouchDevice) a.getDefaultFilter(t, s);else {\n          g = i.config.states.hover.filter;\n          a.applyFilter(t, s, g.type, g.value);\n        }\n\n        \"function\" == typeof i.config.chart.events.dataPointSelection && i.config.chart.events.dataPointSelection(e, this.ctx, {\n          selectedDataPoints: i.globals.selectedDataPoints,\n          seriesIndex: s,\n          dataPointIndex: r,\n          w: i\n        }), e && this.ctx.events.fireEvent(\"dataPointSelection\", [e, this.ctx, {\n          selectedDataPoints: i.globals.selectedDataPoints,\n          seriesIndex: s,\n          dataPointIndex: r,\n          w: i\n        }]);\n      }\n    }, {\n      key: \"rotateAroundCenter\",\n      value: function value(t) {\n        var e = {};\n        return t && \"function\" == typeof t.getBBox && (e = t.getBBox()), {\n          x: e.x + e.width / 2,\n          y: e.y + e.height / 2\n        };\n      }\n    }, {\n      key: \"getTextRects\",\n      value: function value(t, e, i, a) {\n        var s = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],\n            r = this.w,\n            o = this.drawText({\n          x: -200,\n          y: -200,\n          text: t,\n          textAnchor: \"start\",\n          fontSize: e,\n          fontFamily: i,\n          foreColor: \"#fff\",\n          opacity: 0\n        });\n        a && o.attr(\"transform\", a), r.globals.dom.Paper.add(o);\n        var n = o.bbox();\n        return s || (n = o.node.getBoundingClientRect()), o.remove(), {\n          width: n.width,\n          height: n.height\n        };\n      }\n    }, {\n      key: \"placeTextWithEllipsis\",\n      value: function value(t, e, i) {\n        if (\"function\" == typeof t.getComputedTextLength && (t.textContent = e, e.length > 0 && t.getComputedTextLength() >= i / 1.1)) {\n          for (var a = e.length - 3; a > 0; a -= 3) {\n            if (t.getSubStringLength(0, a) <= i / 1.1) return void (t.textContent = e.substring(0, a) + \"...\");\n          }\n\n          t.textContent = \".\";\n        }\n      }\n    }], [{\n      key: \"setAttrs\",\n      value: function value(t, e) {\n        for (var i in e) {\n          e.hasOwnProperty(i) && t.setAttribute(i, e[i]);\n        }\n      }\n    }]), t;\n  }(),\n      y = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"getStackedSeriesTotals\",\n      value: function value() {\n        var t = this.w,\n            e = [];\n        if (0 === t.globals.series.length) return e;\n\n        for (var i = 0; i < t.globals.series[t.globals.maxValsInArrayIndex].length; i++) {\n          for (var a = 0, s = 0; s < t.globals.series.length; s++) {\n            void 0 !== t.globals.series[s][i] && (a += t.globals.series[s][i]);\n          }\n\n          e.push(a);\n        }\n\n        return t.globals.stackedSeriesTotals = e, e;\n      }\n    }, {\n      key: \"getSeriesTotalByIndex\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;\n        return null === t ? this.w.config.series.reduce(function (t, e) {\n          return t + e;\n        }, 0) : this.w.globals.series[t].reduce(function (t, e) {\n          return t + e;\n        }, 0);\n      }\n    }, {\n      key: \"isSeriesNull\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;\n        return 0 === (null === t ? this.w.config.series.filter(function (t) {\n          return null !== t;\n        }) : this.w.config.series[t].data.filter(function (t) {\n          return null !== t;\n        })).length;\n      }\n    }, {\n      key: \"seriesHaveSameValues\",\n      value: function value(t) {\n        return this.w.globals.series[t].every(function (t, e, i) {\n          return t === i[0];\n        });\n      }\n    }, {\n      key: \"getCategoryLabels\",\n      value: function value(t) {\n        var e = this.w,\n            i = t.slice();\n        return e.config.xaxis.convertedCatToNumeric && (i = t.map(function (t, i) {\n          return e.config.xaxis.labels.formatter(t - e.globals.minX + 1);\n        })), i;\n      }\n    }, {\n      key: \"getLargestSeries\",\n      value: function value() {\n        var t = this.w;\n        t.globals.maxValsInArrayIndex = t.globals.series.map(function (t) {\n          return t.length;\n        }).indexOf(Math.max.apply(Math, t.globals.series.map(function (t) {\n          return t.length;\n        })));\n      }\n    }, {\n      key: \"getLargestMarkerSize\",\n      value: function value() {\n        var t = this.w,\n            e = 0;\n        return t.globals.markers.size.forEach(function (t) {\n          e = Math.max(e, t);\n        }), t.config.markers.discrete && t.config.markers.discrete.length && t.config.markers.discrete.forEach(function (t) {\n          e = Math.max(e, t.size);\n        }), e > 0 && (e += t.config.markers.hover.sizeOffset + 1), t.globals.markers.largestSize = e, e;\n      }\n    }, {\n      key: \"getSeriesTotals\",\n      value: function value() {\n        var t = this.w;\n        t.globals.seriesTotals = t.globals.series.map(function (t, e) {\n          var i = 0;\n          if (Array.isArray(t)) for (var a = 0; a < t.length; a++) {\n            i += t[a];\n          } else i += t;\n          return i;\n        });\n      }\n    }, {\n      key: \"getSeriesTotalsXRange\",\n      value: function value(t, e) {\n        var i = this.w;\n        return i.globals.series.map(function (a, s) {\n          for (var r = 0, o = 0; o < a.length; o++) {\n            i.globals.seriesX[s][o] > t && i.globals.seriesX[s][o] < e && (r += a[o]);\n          }\n\n          return r;\n        });\n      }\n    }, {\n      key: \"getPercentSeries\",\n      value: function value() {\n        var t = this.w;\n        t.globals.seriesPercent = t.globals.series.map(function (e, i) {\n          var a = [];\n          if (Array.isArray(e)) for (var s = 0; s < e.length; s++) {\n            var r = t.globals.stackedSeriesTotals[s],\n                o = 0;\n            r && (o = 100 * e[s] / r), a.push(o);\n          } else {\n            var n = 100 * e / t.globals.seriesTotals.reduce(function (t, e) {\n              return t + e;\n            }, 0);\n            a.push(n);\n          }\n          return a;\n        });\n      }\n    }, {\n      key: \"getCalculatedRatios\",\n      value: function value() {\n        var t,\n            e,\n            i,\n            a,\n            s = this.w.globals,\n            r = [],\n            o = 0,\n            n = [],\n            l = .1,\n            h = 0;\n        if (s.yRange = [], s.isMultipleYAxis) for (var c = 0; c < s.minYArr.length; c++) {\n          s.yRange.push(Math.abs(s.minYArr[c] - s.maxYArr[c])), n.push(0);\n        } else s.yRange.push(Math.abs(s.minY - s.maxY));\n        s.xRange = Math.abs(s.maxX - s.minX), s.zRange = Math.abs(s.maxZ - s.minZ);\n\n        for (var d = 0; d < s.yRange.length; d++) {\n          r.push(s.yRange[d] / s.gridHeight);\n        }\n\n        if (e = s.xRange / s.gridWidth, i = Math.abs(s.initialMaxX - s.initialMinX) / s.gridWidth, t = s.yRange / s.gridWidth, a = s.xRange / s.gridHeight, (o = s.zRange / s.gridHeight * 16) || (o = 1), s.minY !== Number.MIN_VALUE && 0 !== Math.abs(s.minY) && (s.hasNegs = !0), s.isMultipleYAxis) {\n          n = [];\n\n          for (var g = 0; g < r.length; g++) {\n            n.push(-s.minYArr[g] / r[g]);\n          }\n        } else n.push(-s.minY / r[0]), s.minY !== Number.MIN_VALUE && 0 !== Math.abs(s.minY) && (l = -s.minY / t, h = s.minX / e);\n\n        return {\n          yRatio: r,\n          invertedYRatio: t,\n          zRatio: o,\n          xRatio: e,\n          initialXRatio: i,\n          invertedXRatio: a,\n          baseLineInvertedY: l,\n          baseLineY: n,\n          baseLineX: h\n        };\n      }\n    }, {\n      key: \"getLogSeries\",\n      value: function value(t) {\n        var e = this,\n            i = this.w;\n        return i.globals.seriesLog = t.map(function (t, a) {\n          return i.config.yaxis[a] && i.config.yaxis[a].logarithmic ? t.map(function (t) {\n            return null === t ? null : e.getLogVal(i.config.yaxis[a].logBase, t, a);\n          }) : t;\n        }), i.globals.invalidLogScale ? t : i.globals.seriesLog;\n      }\n    }, {\n      key: \"getBaseLog\",\n      value: function value(t, e) {\n        return Math.log(e) / Math.log(t);\n      }\n    }, {\n      key: \"getLogVal\",\n      value: function value(t, e, i) {\n        if (0 === e) return 0;\n        var a = this.w,\n            s = 0 === a.globals.minYArr[i] ? -1 : this.getBaseLog(t, a.globals.minYArr[i]),\n            r = (0 === a.globals.maxYArr[i] ? 0 : this.getBaseLog(t, a.globals.maxYArr[i])) - s;\n        return e < 1 ? e / r : (this.getBaseLog(t, e) - s) / r;\n      }\n    }, {\n      key: \"getLogYRatios\",\n      value: function value(t) {\n        var e = this,\n            i = this.w,\n            a = this.w.globals;\n        return a.yLogRatio = t.slice(), a.logYRange = a.yRange.map(function (t, s) {\n          if (i.config.yaxis[s] && e.w.config.yaxis[s].logarithmic) {\n            var r,\n                o = -Number.MAX_VALUE,\n                n = Number.MIN_VALUE;\n            return a.seriesLog.forEach(function (t, e) {\n              t.forEach(function (t) {\n                i.config.yaxis[e] && i.config.yaxis[e].logarithmic && (o = Math.max(t, o), n = Math.min(t, n));\n              });\n            }), r = Math.pow(a.yRange[s], Math.abs(n - o) / a.yRange[s]), a.yLogRatio[s] = r / a.gridHeight, r;\n          }\n        }), a.invalidLogScale ? t.slice() : a.yLogRatio;\n      }\n    }], [{\n      key: \"checkComboSeries\",\n      value: function value(t) {\n        var e = !1,\n            i = 0,\n            a = 0;\n        return t.length && void 0 !== t[0].type && t.forEach(function (t) {\n          \"bar\" !== t.type && \"column\" !== t.type && \"candlestick\" !== t.type && \"boxPlot\" !== t.type || i++, void 0 !== t.type && a++;\n        }), a > 0 && (e = !0), {\n          comboBarCount: i,\n          comboCharts: e\n        };\n      }\n    }, {\n      key: \"extendArrayProps\",\n      value: function value(t, e, i) {\n        return e.yaxis && (e = t.extendYAxis(e, i)), e.annotations && (e.annotations.yaxis && (e = t.extendYAxisAnnotations(e)), e.annotations.xaxis && (e = t.extendXAxisAnnotations(e)), e.annotations.points && (e = t.extendPointAnnotations(e))), e;\n      }\n    }]), t;\n  }(),\n      w = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.annoCtx = e;\n    }\n\n    return r(t, [{\n      key: \"setOrientations\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,\n            i = this.w;\n\n        if (\"vertical\" === t.label.orientation) {\n          var a = null !== e ? e : 0,\n              s = i.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='\".concat(a, \"']\"));\n\n          if (null !== s) {\n            var r = s.getBoundingClientRect();\n            s.setAttribute(\"x\", parseFloat(s.getAttribute(\"x\")) - r.height + 4), \"top\" === t.label.position ? s.setAttribute(\"y\", parseFloat(s.getAttribute(\"y\")) + r.width) : s.setAttribute(\"y\", parseFloat(s.getAttribute(\"y\")) - r.width);\n            var o = this.annoCtx.graphics.rotateAroundCenter(s),\n                n = o.x,\n                l = o.y;\n            s.setAttribute(\"transform\", \"rotate(-90 \".concat(n, \" \").concat(l, \")\"));\n          }\n        }\n      }\n    }, {\n      key: \"addBackgroundToAnno\",\n      value: function value(t, e) {\n        var i = this.w;\n        if (!t || void 0 === e.label.text || void 0 !== e.label.text && !String(e.label.text).trim()) return null;\n        var a = i.globals.dom.baseEl.querySelector(\".apexcharts-grid\").getBoundingClientRect(),\n            s = t.getBoundingClientRect(),\n            r = e.label.style.padding.left,\n            o = e.label.style.padding.right,\n            n = e.label.style.padding.top,\n            l = e.label.style.padding.bottom;\n        \"vertical\" === e.label.orientation && (n = e.label.style.padding.left, l = e.label.style.padding.right, r = e.label.style.padding.top, o = e.label.style.padding.bottom);\n        var h = s.left - a.left - r,\n            c = s.top - a.top - n,\n            d = this.annoCtx.graphics.drawRect(h - i.globals.barPadForNumericAxis, c, s.width + r + o, s.height + n + l, e.label.borderRadius, e.label.style.background, 1, e.label.borderWidth, e.label.borderColor, 0);\n        return e.id && d.node.classList.add(e.id), d;\n      }\n    }, {\n      key: \"annotationsBackground\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = function i(_i, a, s) {\n          var r = e.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(s, \"-annotations .apexcharts-\").concat(s, \"-annotation-label[rel='\").concat(a, \"']\"));\n\n          if (r) {\n            var o = r.parentNode,\n                n = t.addBackgroundToAnno(r, _i);\n            n && (o.insertBefore(n.node, r), _i.label.mouseEnter && n.node.addEventListener(\"mouseenter\", _i.label.mouseEnter.bind(t, _i)), _i.label.mouseLeave && n.node.addEventListener(\"mouseleave\", _i.label.mouseLeave.bind(t, _i)));\n          }\n        };\n\n        e.config.annotations.xaxis.map(function (t, e) {\n          i(t, e, \"xaxis\");\n        }), e.config.annotations.yaxis.map(function (t, e) {\n          i(t, e, \"yaxis\");\n        }), e.config.annotations.points.map(function (t, e) {\n          i(t, e, \"point\");\n        });\n      }\n    }, {\n      key: \"getY1Y2\",\n      value: function value(t, e) {\n        var i,\n            a = \"y1\" === t ? e.y : e.y2,\n            s = this.w;\n\n        if (this.annoCtx.invertAxis) {\n          var r = s.globals.labels.indexOf(a);\n          s.config.xaxis.convertedCatToNumeric && (r = s.globals.categoryLabels.indexOf(a));\n          var o = s.globals.dom.baseEl.querySelector(\".apexcharts-yaxis-texts-g text:nth-child(\" + (r + 1) + \")\");\n          o && (i = parseFloat(o.getAttribute(\"y\")));\n        } else {\n          var n;\n          if (s.config.yaxis[e.yAxisIndex].logarithmic) n = (a = new y(this.annoCtx.ctx).getLogVal(a, e.yAxisIndex)) / s.globals.yLogRatio[e.yAxisIndex];else n = (a - s.globals.minYArr[e.yAxisIndex]) / (s.globals.yRange[e.yAxisIndex] / s.globals.gridHeight);\n          i = s.globals.gridHeight - n, s.config.yaxis[e.yAxisIndex] && s.config.yaxis[e.yAxisIndex].reversed && (i = n);\n        }\n\n        return i;\n      }\n    }, {\n      key: \"getX1X2\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = this.annoCtx.invertAxis ? i.globals.minY : i.globals.minX,\n            s = this.annoCtx.invertAxis ? i.globals.maxY : i.globals.maxX,\n            r = this.annoCtx.invertAxis ? i.globals.yRange[0] : i.globals.xRange,\n            o = (e.x - a) / (r / i.globals.gridWidth);\n        this.annoCtx.inversedReversedAxis && (o = (s - e.x) / (r / i.globals.gridWidth)), \"category\" !== i.config.xaxis.type && !i.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i.globals.dataFormatXNumeric || (o = this.getStringX(e.x));\n        var n = (e.x2 - a) / (r / i.globals.gridWidth);\n        return this.annoCtx.inversedReversedAxis && (n = (s - e.x2) / (r / i.globals.gridWidth)), \"category\" !== i.config.xaxis.type && !i.config.xaxis.convertedCatToNumeric || this.annoCtx.invertAxis || i.globals.dataFormatXNumeric || (n = this.getStringX(e.x2)), \"x1\" === t ? o : n;\n      }\n    }, {\n      key: \"getStringX\",\n      value: function value(t) {\n        var e = this.w,\n            i = t;\n        e.config.xaxis.convertedCatToNumeric && e.globals.categoryLabels.length && (t = e.globals.categoryLabels.indexOf(t) + 1);\n        var a = e.globals.labels.indexOf(t),\n            s = e.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-texts-g text:nth-child(\" + (a + 1) + \")\");\n        return s && (i = parseFloat(s.getAttribute(\"x\"))), i;\n      }\n    }]), t;\n  }(),\n      k = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.annoCtx = e, this.invertAxis = this.annoCtx.invertAxis, this.helpers = new w(this.annoCtx);\n    }\n\n    return r(t, [{\n      key: \"addXaxisAnnotation\",\n      value: function value(t, e, i) {\n        var a,\n            s = this.w,\n            r = this.helpers.getX1X2(\"x1\", t),\n            o = t.label.text,\n            n = t.strokeDashArray;\n\n        if (x.isNumber(r)) {\n          if (null === t.x2 || void 0 === t.x2) {\n            var l = this.annoCtx.graphics.drawLine(r + t.offsetX, 0 + t.offsetY, r + t.offsetX, s.globals.gridHeight + t.offsetY, t.borderColor, n, t.borderWidth);\n            e.appendChild(l.node), t.id && l.node.classList.add(t.id);\n          } else {\n            if ((a = this.helpers.getX1X2(\"x2\", t)) < r) {\n              var h = r;\n              r = a, a = h;\n            }\n\n            var c = this.annoCtx.graphics.drawRect(r + t.offsetX, 0 + t.offsetY, a - r, s.globals.gridHeight + t.offsetY, 0, t.fillColor, t.opacity, 1, t.borderColor, n);\n            c.node.classList.add(\"apexcharts-annotation-rect\"), c.attr(\"clip-path\", \"url(#gridRectMask\".concat(s.globals.cuid, \")\")), e.appendChild(c.node), t.id && c.node.classList.add(t.id);\n          }\n\n          var d = \"top\" === t.label.position ? 4 : s.globals.gridHeight,\n              g = this.annoCtx.graphics.getTextRects(o, parseFloat(t.label.style.fontSize)),\n              u = this.annoCtx.graphics.drawText({\n            x: r + t.label.offsetX,\n            y: d + t.label.offsetY - (\"vertical\" === t.label.orientation ? \"top\" === t.label.position ? g.width / 2 - 12 : -g.width / 2 : 0),\n            text: o,\n            textAnchor: t.label.textAnchor,\n            fontSize: t.label.style.fontSize,\n            fontFamily: t.label.style.fontFamily,\n            fontWeight: t.label.style.fontWeight,\n            foreColor: t.label.style.color,\n            cssClass: \"apexcharts-xaxis-annotation-label \".concat(t.label.style.cssClass, \" \").concat(t.id ? t.id : \"\")\n          });\n          u.attr({\n            rel: i\n          }), e.appendChild(u.node), this.annoCtx.helpers.setOrientations(t, i);\n        }\n      }\n    }, {\n      key: \"drawXAxisAnnotations\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = this.annoCtx.graphics.group({\n          \"class\": \"apexcharts-xaxis-annotations\"\n        });\n        return e.config.annotations.xaxis.map(function (e, a) {\n          t.addXaxisAnnotation(e, i.node, a);\n        }), i;\n      }\n    }]), t;\n  }(),\n      A = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.annoCtx = e, this.helpers = new w(this.annoCtx);\n    }\n\n    return r(t, [{\n      key: \"addYaxisAnnotation\",\n      value: function value(t, e, i) {\n        var a,\n            s = this.w,\n            r = t.strokeDashArray,\n            o = this.helpers.getY1Y2(\"y1\", t),\n            n = t.label.text;\n\n        if (null === t.y2 || void 0 === t.y2) {\n          var l = this.annoCtx.graphics.drawLine(0 + t.offsetX, o + t.offsetY, this._getYAxisAnnotationWidth(t), o + t.offsetY, t.borderColor, r, t.borderWidth);\n          e.appendChild(l.node), t.id && l.node.classList.add(t.id);\n        } else {\n          if ((a = this.helpers.getY1Y2(\"y2\", t)) > o) {\n            var h = o;\n            o = a, a = h;\n          }\n\n          var c = this.annoCtx.graphics.drawRect(0 + t.offsetX, a + t.offsetY, this._getYAxisAnnotationWidth(t), o - a, 0, t.fillColor, t.opacity, 1, t.borderColor, r);\n          c.node.classList.add(\"apexcharts-annotation-rect\"), c.attr(\"clip-path\", \"url(#gridRectMask\".concat(s.globals.cuid, \")\")), e.appendChild(c.node), t.id && c.node.classList.add(t.id);\n        }\n\n        var d = \"right\" === t.label.position ? s.globals.gridWidth : 0,\n            g = this.annoCtx.graphics.drawText({\n          x: d + t.label.offsetX,\n          y: (null != a ? a : o) + t.label.offsetY - 3,\n          text: n,\n          textAnchor: t.label.textAnchor,\n          fontSize: t.label.style.fontSize,\n          fontFamily: t.label.style.fontFamily,\n          fontWeight: t.label.style.fontWeight,\n          foreColor: t.label.style.color,\n          cssClass: \"apexcharts-yaxis-annotation-label \".concat(t.label.style.cssClass, \" \").concat(t.id ? t.id : \"\")\n        });\n        g.attr({\n          rel: i\n        }), e.appendChild(g.node);\n      }\n    }, {\n      key: \"_getYAxisAnnotationWidth\",\n      value: function value(t) {\n        var e = this.w;\n        e.globals.gridWidth;\n        return (t.width.indexOf(\"%\") > -1 ? e.globals.gridWidth * parseInt(t.width, 10) / 100 : parseInt(t.width, 10)) + t.offsetX;\n      }\n    }, {\n      key: \"drawYAxisAnnotations\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = this.annoCtx.graphics.group({\n          \"class\": \"apexcharts-yaxis-annotations\"\n        });\n        return e.config.annotations.yaxis.map(function (e, a) {\n          t.addYaxisAnnotation(e, i.node, a);\n        }), i;\n      }\n    }]), t;\n  }(),\n      S = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.annoCtx = e, this.helpers = new w(this.annoCtx);\n    }\n\n    return r(t, [{\n      key: \"addPointAnnotation\",\n      value: function value(t, e, i) {\n        this.w;\n        var a = this.helpers.getX1X2(\"x1\", t),\n            s = this.helpers.getY1Y2(\"y1\", t);\n\n        if (x.isNumber(a)) {\n          var r = {\n            pSize: t.marker.size,\n            pointStrokeWidth: t.marker.strokeWidth,\n            pointFillColor: t.marker.fillColor,\n            pointStrokeColor: t.marker.strokeColor,\n            shape: t.marker.shape,\n            pRadius: t.marker.radius,\n            \"class\": \"apexcharts-point-annotation-marker \".concat(t.marker.cssClass, \" \").concat(t.id ? t.id : \"\")\n          },\n              o = this.annoCtx.graphics.drawMarker(a + t.marker.offsetX, s + t.marker.offsetY, r);\n          e.appendChild(o.node);\n          var n = t.label.text ? t.label.text : \"\",\n              l = this.annoCtx.graphics.drawText({\n            x: a + t.label.offsetX,\n            y: s + t.label.offsetY - t.marker.size - parseFloat(t.label.style.fontSize) / 1.6,\n            text: n,\n            textAnchor: t.label.textAnchor,\n            fontSize: t.label.style.fontSize,\n            fontFamily: t.label.style.fontFamily,\n            fontWeight: t.label.style.fontWeight,\n            foreColor: t.label.style.color,\n            cssClass: \"apexcharts-point-annotation-label \".concat(t.label.style.cssClass, \" \").concat(t.id ? t.id : \"\")\n          });\n\n          if (l.attr({\n            rel: i\n          }), e.appendChild(l.node), t.customSVG.SVG) {\n            var h = this.annoCtx.graphics.group({\n              \"class\": \"apexcharts-point-annotations-custom-svg \" + t.customSVG.cssClass\n            });\n            h.attr({\n              transform: \"translate(\".concat(a + t.customSVG.offsetX, \", \").concat(s + t.customSVG.offsetY, \")\")\n            }), h.node.innerHTML = t.customSVG.SVG, e.appendChild(h.node);\n          }\n\n          if (t.image.path) {\n            var c = t.image.width ? t.image.width : 20,\n                d = t.image.height ? t.image.height : 20;\n            o = this.annoCtx.addImage({\n              x: a + t.image.offsetX - c / 2,\n              y: s + t.image.offsetY - d / 2,\n              width: c,\n              height: d,\n              path: t.image.path,\n              appendTo: \".apexcharts-point-annotations\"\n            });\n          }\n\n          t.mouseEnter && o.node.addEventListener(\"mouseenter\", t.mouseEnter.bind(this, t)), t.mouseLeave && o.node.addEventListener(\"mouseleave\", t.mouseLeave.bind(this, t));\n        }\n      }\n    }, {\n      key: \"drawPointAnnotations\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = this.annoCtx.graphics.group({\n          \"class\": \"apexcharts-point-annotations\"\n        });\n        return e.config.annotations.points.map(function (e, a) {\n          t.addPointAnnotation(e, i.node, a);\n        }), i;\n      }\n    }]), t;\n  }();\n\n  var C = {\n    name: \"en\",\n    options: {\n      months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n      shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n      shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n      toolbar: {\n        exportToSVG: \"Download SVG\",\n        exportToPNG: \"Download PNG\",\n        exportToCSV: \"Download CSV\",\n        menu: \"Menu\",\n        selection: \"Selection\",\n        selectionZoom: \"Selection Zoom\",\n        zoomIn: \"Zoom In\",\n        zoomOut: \"Zoom Out\",\n        pan: \"Panning\",\n        reset: \"Reset Zoom\"\n      }\n    }\n  },\n      L = function () {\n    function t() {\n      a(this, t), this.yAxis = {\n        show: !0,\n        showAlways: !1,\n        showForNullSeries: !0,\n        seriesName: void 0,\n        opposite: !1,\n        reversed: !1,\n        logarithmic: !1,\n        logBase: 10,\n        tickAmount: void 0,\n        forceNiceScale: !1,\n        max: void 0,\n        min: void 0,\n        floating: !1,\n        decimalsInFloat: void 0,\n        labels: {\n          show: !0,\n          minWidth: 0,\n          maxWidth: 160,\n          offsetX: 0,\n          offsetY: 0,\n          align: void 0,\n          rotate: 0,\n          padding: 20,\n          style: {\n            colors: [],\n            fontSize: \"11px\",\n            fontWeight: 400,\n            fontFamily: void 0,\n            cssClass: \"\"\n          },\n          formatter: void 0\n        },\n        axisBorder: {\n          show: !1,\n          color: \"#e0e0e0\",\n          width: 1,\n          offsetX: 0,\n          offsetY: 0\n        },\n        axisTicks: {\n          show: !1,\n          color: \"#e0e0e0\",\n          width: 6,\n          offsetX: 0,\n          offsetY: 0\n        },\n        title: {\n          text: void 0,\n          rotate: -90,\n          offsetY: 0,\n          offsetX: 0,\n          style: {\n            color: void 0,\n            fontSize: \"11px\",\n            fontWeight: 900,\n            fontFamily: void 0,\n            cssClass: \"\"\n          }\n        },\n        tooltip: {\n          enabled: !1,\n          offsetX: 0\n        },\n        crosshairs: {\n          show: !0,\n          position: \"front\",\n          stroke: {\n            color: \"#b6b6b6\",\n            width: 1,\n            dashArray: 0\n          }\n        }\n      }, this.pointAnnotation = {\n        id: void 0,\n        x: 0,\n        y: null,\n        yAxisIndex: 0,\n        seriesIndex: 0,\n        mouseEnter: void 0,\n        mouseLeave: void 0,\n        marker: {\n          size: 4,\n          fillColor: \"#fff\",\n          strokeWidth: 2,\n          strokeColor: \"#333\",\n          shape: \"circle\",\n          offsetX: 0,\n          offsetY: 0,\n          radius: 2,\n          cssClass: \"\"\n        },\n        label: {\n          borderColor: \"#c2c2c2\",\n          borderWidth: 1,\n          borderRadius: 2,\n          text: void 0,\n          textAnchor: \"middle\",\n          offsetX: 0,\n          offsetY: 0,\n          mouseEnter: void 0,\n          mouseLeave: void 0,\n          style: {\n            background: \"#fff\",\n            color: void 0,\n            fontSize: \"11px\",\n            fontFamily: void 0,\n            fontWeight: 400,\n            cssClass: \"\",\n            padding: {\n              left: 5,\n              right: 5,\n              top: 2,\n              bottom: 2\n            }\n          }\n        },\n        customSVG: {\n          SVG: void 0,\n          cssClass: void 0,\n          offsetX: 0,\n          offsetY: 0\n        },\n        image: {\n          path: void 0,\n          width: 20,\n          height: 20,\n          offsetX: 0,\n          offsetY: 0\n        }\n      }, this.yAxisAnnotation = {\n        id: void 0,\n        y: 0,\n        y2: null,\n        strokeDashArray: 1,\n        fillColor: \"#c2c2c2\",\n        borderColor: \"#c2c2c2\",\n        borderWidth: 1,\n        opacity: .3,\n        offsetX: 0,\n        offsetY: 0,\n        width: \"100%\",\n        yAxisIndex: 0,\n        label: {\n          borderColor: \"#c2c2c2\",\n          borderWidth: 1,\n          borderRadius: 2,\n          text: void 0,\n          textAnchor: \"end\",\n          position: \"right\",\n          offsetX: 0,\n          offsetY: -3,\n          mouseEnter: void 0,\n          mouseLeave: void 0,\n          style: {\n            background: \"#fff\",\n            color: void 0,\n            fontSize: \"11px\",\n            fontFamily: void 0,\n            fontWeight: 400,\n            cssClass: \"\",\n            padding: {\n              left: 5,\n              right: 5,\n              top: 2,\n              bottom: 2\n            }\n          }\n        }\n      }, this.xAxisAnnotation = {\n        id: void 0,\n        x: 0,\n        x2: null,\n        strokeDashArray: 1,\n        fillColor: \"#c2c2c2\",\n        borderColor: \"#c2c2c2\",\n        borderWidth: 1,\n        opacity: .3,\n        offsetX: 0,\n        offsetY: 0,\n        label: {\n          borderColor: \"#c2c2c2\",\n          borderWidth: 1,\n          borderRadius: 2,\n          text: void 0,\n          textAnchor: \"middle\",\n          orientation: \"vertical\",\n          position: \"top\",\n          offsetX: 0,\n          offsetY: 0,\n          mouseEnter: void 0,\n          mouseLeave: void 0,\n          style: {\n            background: \"#fff\",\n            color: void 0,\n            fontSize: \"11px\",\n            fontFamily: void 0,\n            fontWeight: 400,\n            cssClass: \"\",\n            padding: {\n              left: 5,\n              right: 5,\n              top: 2,\n              bottom: 2\n            }\n          }\n        }\n      }, this.text = {\n        x: 0,\n        y: 0,\n        text: \"\",\n        textAnchor: \"start\",\n        foreColor: void 0,\n        fontSize: \"13px\",\n        fontFamily: void 0,\n        fontWeight: 400,\n        appendTo: \".apexcharts-annotations\",\n        backgroundColor: \"transparent\",\n        borderColor: \"#c2c2c2\",\n        borderRadius: 0,\n        borderWidth: 0,\n        paddingLeft: 4,\n        paddingRight: 4,\n        paddingTop: 2,\n        paddingBottom: 2\n      };\n    }\n\n    return r(t, [{\n      key: \"init\",\n      value: function value() {\n        return {\n          annotations: {\n            position: \"front\",\n            yaxis: [this.yAxisAnnotation],\n            xaxis: [this.xAxisAnnotation],\n            points: [this.pointAnnotation],\n            texts: [],\n            images: [],\n            shapes: []\n          },\n          chart: {\n            animations: {\n              enabled: !0,\n              easing: \"easeinout\",\n              speed: 800,\n              animateGradually: {\n                delay: 150,\n                enabled: !0\n              },\n              dynamicAnimation: {\n                enabled: !0,\n                speed: 350\n              }\n            },\n            background: \"transparent\",\n            locales: [C],\n            defaultLocale: \"en\",\n            dropShadow: {\n              enabled: !1,\n              enabledOnSeries: void 0,\n              top: 2,\n              left: 2,\n              blur: 4,\n              color: \"#000\",\n              opacity: .35\n            },\n            events: {\n              animationEnd: void 0,\n              beforeMount: void 0,\n              mounted: void 0,\n              updated: void 0,\n              click: void 0,\n              mouseMove: void 0,\n              mouseLeave: void 0,\n              legendClick: void 0,\n              markerClick: void 0,\n              selection: void 0,\n              dataPointSelection: void 0,\n              dataPointMouseEnter: void 0,\n              dataPointMouseLeave: void 0,\n              beforeZoom: void 0,\n              beforeResetZoom: void 0,\n              zoomed: void 0,\n              scrolled: void 0,\n              brushScrolled: void 0\n            },\n            foreColor: \"#373d3f\",\n            fontFamily: \"Helvetica, Arial, sans-serif\",\n            height: \"auto\",\n            parentHeightOffset: 15,\n            redrawOnParentResize: !0,\n            redrawOnWindowResize: !0,\n            id: void 0,\n            group: void 0,\n            offsetX: 0,\n            offsetY: 0,\n            selection: {\n              enabled: !1,\n              type: \"x\",\n              fill: {\n                color: \"#24292e\",\n                opacity: .1\n              },\n              stroke: {\n                width: 1,\n                color: \"#24292e\",\n                opacity: .4,\n                dashArray: 3\n              },\n              xaxis: {\n                min: void 0,\n                max: void 0\n              },\n              yaxis: {\n                min: void 0,\n                max: void 0\n              }\n            },\n            sparkline: {\n              enabled: !1\n            },\n            brush: {\n              enabled: !1,\n              autoScaleYaxis: !0,\n              target: void 0\n            },\n            stacked: !1,\n            stackType: \"normal\",\n            toolbar: {\n              show: !0,\n              offsetX: 0,\n              offsetY: 0,\n              tools: {\n                download: !0,\n                selection: !0,\n                zoom: !0,\n                zoomin: !0,\n                zoomout: !0,\n                pan: !0,\n                reset: !0,\n                customIcons: []\n              },\n              \"export\": {\n                csv: {\n                  filename: void 0,\n                  columnDelimiter: \",\",\n                  headerCategory: \"category\",\n                  headerValue: \"value\",\n                  dateFormatter: function dateFormatter(t) {\n                    return new Date(t).toDateString();\n                  }\n                },\n                png: {\n                  filename: void 0\n                },\n                svg: {\n                  filename: void 0\n                }\n              },\n              autoSelected: \"zoom\"\n            },\n            type: \"line\",\n            width: \"100%\",\n            zoom: {\n              enabled: !0,\n              type: \"x\",\n              autoScaleYaxis: !1,\n              zoomedArea: {\n                fill: {\n                  color: \"#90CAF9\",\n                  opacity: .4\n                },\n                stroke: {\n                  color: \"#0D47A1\",\n                  opacity: .4,\n                  width: 1\n                }\n              }\n            }\n          },\n          plotOptions: {\n            area: {\n              fillTo: \"origin\"\n            },\n            bar: {\n              horizontal: !1,\n              columnWidth: \"70%\",\n              barHeight: \"70%\",\n              distributed: !1,\n              borderRadius: 0,\n              rangeBarOverlap: !0,\n              rangeBarGroupRows: !1,\n              colors: {\n                ranges: [],\n                backgroundBarColors: [],\n                backgroundBarOpacity: 1,\n                backgroundBarRadius: 0\n              },\n              dataLabels: {\n                position: \"top\",\n                maxItems: 100,\n                hideOverflowingLabels: !0,\n                orientation: \"horizontal\"\n              }\n            },\n            bubble: {\n              minBubbleRadius: void 0,\n              maxBubbleRadius: void 0\n            },\n            candlestick: {\n              colors: {\n                upward: \"#00B746\",\n                downward: \"#EF403C\"\n              },\n              wick: {\n                useFillColor: !0\n              }\n            },\n            boxPlot: {\n              colors: {\n                upper: \"#00E396\",\n                lower: \"#008FFB\"\n              }\n            },\n            heatmap: {\n              radius: 2,\n              enableShades: !0,\n              shadeIntensity: .5,\n              reverseNegativeShade: !1,\n              distributed: !1,\n              useFillColorAsStroke: !1,\n              colorScale: {\n                inverse: !1,\n                ranges: [],\n                min: void 0,\n                max: void 0\n              }\n            },\n            treemap: {\n              enableShades: !0,\n              shadeIntensity: .5,\n              distributed: !1,\n              reverseNegativeShade: !1,\n              useFillColorAsStroke: !1,\n              colorScale: {\n                inverse: !1,\n                ranges: [],\n                min: void 0,\n                max: void 0\n              }\n            },\n            radialBar: {\n              inverseOrder: !1,\n              startAngle: 0,\n              endAngle: 360,\n              offsetX: 0,\n              offsetY: 0,\n              hollow: {\n                margin: 5,\n                size: \"50%\",\n                background: \"transparent\",\n                image: void 0,\n                imageWidth: 150,\n                imageHeight: 150,\n                imageOffsetX: 0,\n                imageOffsetY: 0,\n                imageClipped: !0,\n                position: \"front\",\n                dropShadow: {\n                  enabled: !1,\n                  top: 0,\n                  left: 0,\n                  blur: 3,\n                  color: \"#000\",\n                  opacity: .5\n                }\n              },\n              track: {\n                show: !0,\n                startAngle: void 0,\n                endAngle: void 0,\n                background: \"#f2f2f2\",\n                strokeWidth: \"97%\",\n                opacity: 1,\n                margin: 5,\n                dropShadow: {\n                  enabled: !1,\n                  top: 0,\n                  left: 0,\n                  blur: 3,\n                  color: \"#000\",\n                  opacity: .5\n                }\n              },\n              dataLabels: {\n                show: !0,\n                name: {\n                  show: !0,\n                  fontSize: \"16px\",\n                  fontFamily: void 0,\n                  fontWeight: 600,\n                  color: void 0,\n                  offsetY: 0,\n                  formatter: function formatter(t) {\n                    return t;\n                  }\n                },\n                value: {\n                  show: !0,\n                  fontSize: \"14px\",\n                  fontFamily: void 0,\n                  fontWeight: 400,\n                  color: void 0,\n                  offsetY: 16,\n                  formatter: function formatter(t) {\n                    return t + \"%\";\n                  }\n                },\n                total: {\n                  show: !1,\n                  label: \"Total\",\n                  fontSize: \"16px\",\n                  fontWeight: 600,\n                  fontFamily: void 0,\n                  color: void 0,\n                  formatter: function formatter(t) {\n                    return t.globals.seriesTotals.reduce(function (t, e) {\n                      return t + e;\n                    }, 0) / t.globals.series.length + \"%\";\n                  }\n                }\n              }\n            },\n            pie: {\n              customScale: 1,\n              offsetX: 0,\n              offsetY: 0,\n              startAngle: 0,\n              endAngle: 360,\n              expandOnClick: !0,\n              dataLabels: {\n                offset: 0,\n                minAngleToShowLabel: 10\n              },\n              donut: {\n                size: \"65%\",\n                background: \"transparent\",\n                labels: {\n                  show: !1,\n                  name: {\n                    show: !0,\n                    fontSize: \"16px\",\n                    fontFamily: void 0,\n                    fontWeight: 600,\n                    color: void 0,\n                    offsetY: -10,\n                    formatter: function formatter(t) {\n                      return t;\n                    }\n                  },\n                  value: {\n                    show: !0,\n                    fontSize: \"20px\",\n                    fontFamily: void 0,\n                    fontWeight: 400,\n                    color: void 0,\n                    offsetY: 10,\n                    formatter: function formatter(t) {\n                      return t;\n                    }\n                  },\n                  total: {\n                    show: !1,\n                    showAlways: !1,\n                    label: \"Total\",\n                    fontSize: \"16px\",\n                    fontWeight: 400,\n                    fontFamily: void 0,\n                    color: void 0,\n                    formatter: function formatter(t) {\n                      return t.globals.seriesTotals.reduce(function (t, e) {\n                        return t + e;\n                      }, 0);\n                    }\n                  }\n                }\n              }\n            },\n            polarArea: {\n              rings: {\n                strokeWidth: 1,\n                strokeColor: \"#e8e8e8\"\n              },\n              spokes: {\n                strokeWidth: 1,\n                connectorColors: \"#e8e8e8\"\n              }\n            },\n            radar: {\n              size: void 0,\n              offsetX: 0,\n              offsetY: 0,\n              polygons: {\n                strokeWidth: 1,\n                strokeColors: \"#e8e8e8\",\n                connectorColors: \"#e8e8e8\",\n                fill: {\n                  colors: void 0\n                }\n              }\n            }\n          },\n          colors: void 0,\n          dataLabels: {\n            enabled: !0,\n            enabledOnSeries: void 0,\n            formatter: function formatter(t) {\n              return null !== t ? t : \"\";\n            },\n            textAnchor: \"middle\",\n            distributed: !1,\n            offsetX: 0,\n            offsetY: 0,\n            style: {\n              fontSize: \"12px\",\n              fontFamily: void 0,\n              fontWeight: 600,\n              colors: void 0\n            },\n            background: {\n              enabled: !0,\n              foreColor: \"#fff\",\n              borderRadius: 2,\n              padding: 4,\n              opacity: .9,\n              borderWidth: 1,\n              borderColor: \"#fff\",\n              dropShadow: {\n                enabled: !1,\n                top: 1,\n                left: 1,\n                blur: 1,\n                color: \"#000\",\n                opacity: .45\n              }\n            },\n            dropShadow: {\n              enabled: !1,\n              top: 1,\n              left: 1,\n              blur: 1,\n              color: \"#000\",\n              opacity: .45\n            }\n          },\n          fill: {\n            type: \"solid\",\n            colors: void 0,\n            opacity: .85,\n            gradient: {\n              shade: \"dark\",\n              type: \"horizontal\",\n              shadeIntensity: .5,\n              gradientToColors: void 0,\n              inverseColors: !0,\n              opacityFrom: 1,\n              opacityTo: 1,\n              stops: [0, 50, 100],\n              colorStops: []\n            },\n            image: {\n              src: [],\n              width: void 0,\n              height: void 0\n            },\n            pattern: {\n              style: \"squares\",\n              width: 6,\n              height: 6,\n              strokeWidth: 2\n            }\n          },\n          forecastDataPoints: {\n            count: 0,\n            fillOpacity: .5,\n            strokeWidth: void 0,\n            dashArray: 4\n          },\n          grid: {\n            show: !0,\n            borderColor: \"#e0e0e0\",\n            strokeDashArray: 0,\n            position: \"back\",\n            xaxis: {\n              lines: {\n                show: !1\n              }\n            },\n            yaxis: {\n              lines: {\n                show: !0\n              }\n            },\n            row: {\n              colors: void 0,\n              opacity: .5\n            },\n            column: {\n              colors: void 0,\n              opacity: .5\n            },\n            padding: {\n              top: 0,\n              right: 10,\n              bottom: 0,\n              left: 12\n            }\n          },\n          labels: [],\n          legend: {\n            show: !0,\n            showForSingleSeries: !1,\n            showForNullSeries: !0,\n            showForZeroSeries: !0,\n            floating: !1,\n            position: \"bottom\",\n            horizontalAlign: \"center\",\n            inverseOrder: !1,\n            fontSize: \"12px\",\n            fontFamily: void 0,\n            fontWeight: 400,\n            width: void 0,\n            height: void 0,\n            formatter: void 0,\n            tooltipHoverFormatter: void 0,\n            offsetX: -20,\n            offsetY: 4,\n            customLegendItems: [],\n            labels: {\n              colors: void 0,\n              useSeriesColors: !1\n            },\n            markers: {\n              width: 12,\n              height: 12,\n              strokeWidth: 0,\n              fillColors: void 0,\n              strokeColor: \"#fff\",\n              radius: 12,\n              customHTML: void 0,\n              offsetX: 0,\n              offsetY: 0,\n              onClick: void 0\n            },\n            itemMargin: {\n              horizontal: 5,\n              vertical: 2\n            },\n            onItemClick: {\n              toggleDataSeries: !0\n            },\n            onItemHover: {\n              highlightDataSeries: !0\n            }\n          },\n          markers: {\n            discrete: [],\n            size: 0,\n            colors: void 0,\n            strokeColors: \"#fff\",\n            strokeWidth: 2,\n            strokeOpacity: .9,\n            strokeDashArray: 0,\n            fillOpacity: 1,\n            shape: \"circle\",\n            width: 8,\n            height: 8,\n            radius: 2,\n            offsetX: 0,\n            offsetY: 0,\n            onClick: void 0,\n            onDblClick: void 0,\n            showNullDataPoints: !0,\n            hover: {\n              size: void 0,\n              sizeOffset: 3\n            }\n          },\n          noData: {\n            text: void 0,\n            align: \"center\",\n            verticalAlign: \"middle\",\n            offsetX: 0,\n            offsetY: 0,\n            style: {\n              color: void 0,\n              fontSize: \"14px\",\n              fontFamily: void 0\n            }\n          },\n          responsive: [],\n          series: void 0,\n          states: {\n            normal: {\n              filter: {\n                type: \"none\",\n                value: 0\n              }\n            },\n            hover: {\n              filter: {\n                type: \"lighten\",\n                value: .1\n              }\n            },\n            active: {\n              allowMultipleDataPointsSelection: !1,\n              filter: {\n                type: \"darken\",\n                value: .5\n              }\n            }\n          },\n          title: {\n            text: void 0,\n            align: \"left\",\n            margin: 5,\n            offsetX: 0,\n            offsetY: 0,\n            floating: !1,\n            style: {\n              fontSize: \"14px\",\n              fontWeight: 900,\n              fontFamily: void 0,\n              color: void 0\n            }\n          },\n          subtitle: {\n            text: void 0,\n            align: \"left\",\n            margin: 5,\n            offsetX: 0,\n            offsetY: 30,\n            floating: !1,\n            style: {\n              fontSize: \"12px\",\n              fontWeight: 400,\n              fontFamily: void 0,\n              color: void 0\n            }\n          },\n          stroke: {\n            show: !0,\n            curve: \"smooth\",\n            lineCap: \"butt\",\n            width: 2,\n            colors: void 0,\n            dashArray: 0,\n            fill: {\n              type: \"solid\",\n              colors: void 0,\n              opacity: .85,\n              gradient: {\n                shade: \"dark\",\n                type: \"horizontal\",\n                shadeIntensity: .5,\n                gradientToColors: void 0,\n                inverseColors: !0,\n                opacityFrom: 1,\n                opacityTo: 1,\n                stops: [0, 50, 100],\n                colorStops: []\n              }\n            }\n          },\n          tooltip: {\n            enabled: !0,\n            enabledOnSeries: void 0,\n            shared: !0,\n            followCursor: !1,\n            intersect: !1,\n            inverseOrder: !1,\n            custom: void 0,\n            fillSeriesColor: !1,\n            theme: \"light\",\n            cssClass: \"\",\n            style: {\n              fontSize: \"12px\",\n              fontFamily: void 0\n            },\n            onDatasetHover: {\n              highlightDataSeries: !1\n            },\n            x: {\n              show: !0,\n              format: \"dd MMM\",\n              formatter: void 0\n            },\n            y: {\n              formatter: void 0,\n              title: {\n                formatter: function formatter(t) {\n                  return t ? t + \": \" : \"\";\n                }\n              }\n            },\n            z: {\n              formatter: void 0,\n              title: \"Size: \"\n            },\n            marker: {\n              show: !0,\n              fillColors: void 0\n            },\n            items: {\n              display: \"flex\"\n            },\n            fixed: {\n              enabled: !1,\n              position: \"topRight\",\n              offsetX: 0,\n              offsetY: 0\n            }\n          },\n          xaxis: {\n            type: \"category\",\n            categories: [],\n            convertedCatToNumeric: !1,\n            offsetX: 0,\n            offsetY: 0,\n            overwriteCategories: void 0,\n            labels: {\n              show: !0,\n              rotate: -45,\n              rotateAlways: !1,\n              hideOverlappingLabels: !0,\n              trim: !1,\n              minHeight: void 0,\n              maxHeight: 120,\n              showDuplicates: !0,\n              style: {\n                colors: [],\n                fontSize: \"12px\",\n                fontWeight: 400,\n                fontFamily: void 0,\n                cssClass: \"\"\n              },\n              offsetX: 0,\n              offsetY: 0,\n              format: void 0,\n              formatter: void 0,\n              datetimeUTC: !0,\n              datetimeFormatter: {\n                year: \"yyyy\",\n                month: \"MMM 'yy\",\n                day: \"dd MMM\",\n                hour: \"HH:mm\",\n                minute: \"HH:mm:ss\",\n                second: \"HH:mm:ss\"\n              }\n            },\n            group: {\n              groups: [],\n              style: {\n                colors: [],\n                fontSize: \"12px\",\n                fontWeight: 400,\n                fontFamily: void 0,\n                cssClass: \"\"\n              }\n            },\n            axisBorder: {\n              show: !0,\n              color: \"#e0e0e0\",\n              width: \"100%\",\n              height: 1,\n              offsetX: 0,\n              offsetY: 0\n            },\n            axisTicks: {\n              show: !0,\n              color: \"#e0e0e0\",\n              height: 6,\n              offsetX: 0,\n              offsetY: 0\n            },\n            tickAmount: void 0,\n            tickPlacement: \"on\",\n            min: void 0,\n            max: void 0,\n            range: void 0,\n            floating: !1,\n            decimalsInFloat: void 0,\n            position: \"bottom\",\n            title: {\n              text: void 0,\n              offsetX: 0,\n              offsetY: 0,\n              style: {\n                color: void 0,\n                fontSize: \"12px\",\n                fontWeight: 900,\n                fontFamily: void 0,\n                cssClass: \"\"\n              }\n            },\n            crosshairs: {\n              show: !0,\n              width: 1,\n              position: \"back\",\n              opacity: .9,\n              stroke: {\n                color: \"#b6b6b6\",\n                width: 1,\n                dashArray: 3\n              },\n              fill: {\n                type: \"solid\",\n                color: \"#B1B9C4\",\n                gradient: {\n                  colorFrom: \"#D8E3F0\",\n                  colorTo: \"#BED1E6\",\n                  stops: [0, 100],\n                  opacityFrom: .4,\n                  opacityTo: .5\n                }\n              },\n              dropShadow: {\n                enabled: !1,\n                left: 0,\n                top: 0,\n                blur: 1,\n                opacity: .4\n              }\n            },\n            tooltip: {\n              enabled: !0,\n              offsetY: 0,\n              formatter: void 0,\n              style: {\n                fontSize: \"12px\",\n                fontFamily: void 0\n              }\n            }\n          },\n          yaxis: this.yAxis,\n          theme: {\n            mode: \"light\",\n            palette: \"palette1\",\n            monochrome: {\n              enabled: !1,\n              color: \"#008FFB\",\n              shadeTo: \"light\",\n              shadeIntensity: .65\n            }\n          }\n        };\n      }\n    }]), t;\n  }(),\n      P = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w, this.graphics = new m(this.ctx), this.w.globals.isBarHorizontal && (this.invertAxis = !0), this.helpers = new w(this), this.xAxisAnnotations = new k(this), this.yAxisAnnotations = new A(this), this.pointsAnnotations = new S(this), this.w.globals.isBarHorizontal && this.w.config.yaxis[0].reversed && (this.inversedReversedAxis = !0), this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;\n    }\n\n    return r(t, [{\n      key: \"drawAxesAnnotations\",\n      value: function value() {\n        var t = this.w;\n\n        if (t.globals.axisCharts) {\n          for (var e = this.yAxisAnnotations.drawYAxisAnnotations(), i = this.xAxisAnnotations.drawXAxisAnnotations(), a = this.pointsAnnotations.drawPointAnnotations(), s = t.config.chart.animations.enabled, r = [e, i, a], o = [i.node, e.node, a.node], n = 0; n < 3; n++) {\n            t.globals.dom.elGraphical.add(r[n]), !s || t.globals.resized || t.globals.dataChanged || \"scatter\" !== t.config.chart.type && \"bubble\" !== t.config.chart.type && t.globals.dataPoints > 1 && o[n].classList.add(\"apexcharts-element-hidden\"), t.globals.delayedElements.push({\n              el: o[n],\n              index: 0\n            });\n          }\n\n          this.helpers.annotationsBackground();\n        }\n      }\n    }, {\n      key: \"drawImageAnnos\",\n      value: function value() {\n        var t = this;\n        this.w.config.annotations.images.map(function (e, i) {\n          t.addImage(e, i);\n        });\n      }\n    }, {\n      key: \"drawTextAnnos\",\n      value: function value() {\n        var t = this;\n        this.w.config.annotations.texts.map(function (e, i) {\n          t.addText(e, i);\n        });\n      }\n    }, {\n      key: \"addXaxisAnnotation\",\n      value: function value(t, e, i) {\n        this.xAxisAnnotations.addXaxisAnnotation(t, e, i);\n      }\n    }, {\n      key: \"addYaxisAnnotation\",\n      value: function value(t, e, i) {\n        this.yAxisAnnotations.addYaxisAnnotation(t, e, i);\n      }\n    }, {\n      key: \"addPointAnnotation\",\n      value: function value(t, e, i) {\n        this.pointsAnnotations.addPointAnnotation(t, e, i);\n      }\n    }, {\n      key: \"addText\",\n      value: function value(t, e) {\n        var i = t.x,\n            a = t.y,\n            s = t.text,\n            r = t.textAnchor,\n            o = t.foreColor,\n            n = t.fontSize,\n            l = t.fontFamily,\n            h = t.fontWeight,\n            c = t.cssClass,\n            d = t.backgroundColor,\n            g = t.borderWidth,\n            u = t.strokeDashArray,\n            f = t.borderRadius,\n            p = t.borderColor,\n            x = t.appendTo,\n            b = void 0 === x ? \".apexcharts-annotations\" : x,\n            v = t.paddingLeft,\n            m = void 0 === v ? 4 : v,\n            y = t.paddingRight,\n            w = void 0 === y ? 4 : y,\n            k = t.paddingBottom,\n            A = void 0 === k ? 2 : k,\n            S = t.paddingTop,\n            C = void 0 === S ? 2 : S,\n            L = this.w,\n            P = this.graphics.drawText({\n          x: i,\n          y: a,\n          text: s,\n          textAnchor: r || \"start\",\n          fontSize: n || \"12px\",\n          fontWeight: h || \"regular\",\n          fontFamily: l || L.config.chart.fontFamily,\n          foreColor: o || L.config.chart.foreColor,\n          cssClass: c\n        }),\n            M = L.globals.dom.baseEl.querySelector(b);\n        M && M.appendChild(P.node);\n        var T = P.bbox();\n\n        if (s) {\n          var I = this.graphics.drawRect(T.x - m, T.y - C, T.width + m + w, T.height + A + C, f, d || \"transparent\", 1, g, p, u);\n          M.insertBefore(I.node, P.node);\n        }\n      }\n    }, {\n      key: \"addImage\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = t.path,\n            s = t.x,\n            r = void 0 === s ? 0 : s,\n            o = t.y,\n            n = void 0 === o ? 0 : o,\n            l = t.width,\n            h = void 0 === l ? 20 : l,\n            c = t.height,\n            d = void 0 === c ? 20 : c,\n            g = t.appendTo,\n            u = void 0 === g ? \".apexcharts-annotations\" : g,\n            f = i.globals.dom.Paper.image(a);\n        f.size(h, d).move(r, n);\n        var p = i.globals.dom.baseEl.querySelector(u);\n        return p && p.appendChild(f.node), f;\n      }\n    }, {\n      key: \"addXaxisAnnotationExternal\",\n      value: function value(t, e, i) {\n        return this.addAnnotationExternal({\n          params: t,\n          pushToMemory: e,\n          context: i,\n          type: \"xaxis\",\n          contextMethod: i.addXaxisAnnotation\n        }), i;\n      }\n    }, {\n      key: \"addYaxisAnnotationExternal\",\n      value: function value(t, e, i) {\n        return this.addAnnotationExternal({\n          params: t,\n          pushToMemory: e,\n          context: i,\n          type: \"yaxis\",\n          contextMethod: i.addYaxisAnnotation\n        }), i;\n      }\n    }, {\n      key: \"addPointAnnotationExternal\",\n      value: function value(t, e, i) {\n        return void 0 === this.invertAxis && (this.invertAxis = i.w.globals.isBarHorizontal), this.addAnnotationExternal({\n          params: t,\n          pushToMemory: e,\n          context: i,\n          type: \"point\",\n          contextMethod: i.addPointAnnotation\n        }), i;\n      }\n    }, {\n      key: \"addAnnotationExternal\",\n      value: function value(t) {\n        var e = t.params,\n            i = t.pushToMemory,\n            a = t.context,\n            s = t.type,\n            r = t.contextMethod,\n            o = a,\n            n = o.w,\n            l = n.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(s, \"-annotations\")),\n            h = l.childNodes.length + 1,\n            c = new L(),\n            d = Object.assign({}, \"xaxis\" === s ? c.xAxisAnnotation : \"yaxis\" === s ? c.yAxisAnnotation : c.pointAnnotation),\n            g = x.extend(d, e);\n\n        switch (s) {\n          case \"xaxis\":\n            this.addXaxisAnnotation(g, l, h);\n            break;\n\n          case \"yaxis\":\n            this.addYaxisAnnotation(g, l, h);\n            break;\n\n          case \"point\":\n            this.addPointAnnotation(g, l, h);\n        }\n\n        var u = n.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(s, \"-annotations .apexcharts-\").concat(s, \"-annotation-label[rel='\").concat(h, \"']\")),\n            f = this.helpers.addBackgroundToAnno(u, g);\n        return f && l.insertBefore(f.node, u), i && n.globals.memory.methodsToExec.push({\n          context: o,\n          id: g.id ? g.id : x.randomId(),\n          method: r,\n          label: \"addAnnotation\",\n          params: e\n        }), a;\n      }\n    }, {\n      key: \"clearAnnotations\",\n      value: function value(t) {\n        var e = t.w,\n            i = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations\");\n        e.globals.memory.methodsToExec.map(function (t, i) {\n          \"addText\" !== t.label && \"addAnnotation\" !== t.label || e.globals.memory.methodsToExec.splice(i, 1);\n        }), i = x.listToArray(i), Array.prototype.forEach.call(i, function (t) {\n          for (; t.firstChild;) {\n            t.removeChild(t.firstChild);\n          }\n        });\n      }\n    }, {\n      key: \"removeAnnotation\",\n      value: function value(t, e) {\n        var i = t.w,\n            a = i.globals.dom.baseEl.querySelectorAll(\".\".concat(e));\n        a && (i.globals.memory.methodsToExec.map(function (t, a) {\n          t.id === e && i.globals.memory.methodsToExec.splice(a, 1);\n        }), Array.prototype.forEach.call(a, function (t) {\n          t.parentElement.removeChild(t);\n        }));\n      }\n    }]), t;\n  }(),\n      M = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w, this.opts = null, this.seriesIndex = 0;\n    }\n\n    return r(t, [{\n      key: \"clippedImgArea\",\n      value: function value(t) {\n        var e = this.w,\n            i = e.config,\n            a = parseInt(e.globals.gridWidth, 10),\n            s = parseInt(e.globals.gridHeight, 10),\n            r = a > s ? a : s,\n            o = t.image,\n            n = 0,\n            l = 0;\n        void 0 === t.width && void 0 === t.height ? void 0 !== i.fill.image.width && void 0 !== i.fill.image.height ? (n = i.fill.image.width + 1, l = i.fill.image.height) : (n = r + 1, l = r) : (n = t.width, l = t.height);\n        var h = document.createElementNS(e.globals.SVGNS, \"pattern\");\n        m.setAttrs(h, {\n          id: t.patternID,\n          patternUnits: t.patternUnits ? t.patternUnits : \"userSpaceOnUse\",\n          width: n + \"px\",\n          height: l + \"px\"\n        });\n        var c = document.createElementNS(e.globals.SVGNS, \"image\");\n        h.appendChild(c), c.setAttributeNS(window.SVG.xlink, \"href\", o), m.setAttrs(c, {\n          x: 0,\n          y: 0,\n          preserveAspectRatio: \"none\",\n          width: n + \"px\",\n          height: l + \"px\"\n        }), c.style.opacity = t.opacity, e.globals.dom.elDefs.node.appendChild(h);\n      }\n    }, {\n      key: \"getSeriesIndex\",\n      value: function value(t) {\n        var e = this.w;\n        return (\"bar\" === e.config.chart.type || \"rangeBar\" === e.config.chart.type) && e.config.plotOptions.bar.distributed || \"heatmap\" === e.config.chart.type || \"treemap\" === e.config.chart.type ? this.seriesIndex = t.seriesNumber : this.seriesIndex = t.seriesNumber % e.globals.series.length, this.seriesIndex;\n      }\n    }, {\n      key: \"fillPath\",\n      value: function value(t) {\n        var e = this.w;\n        this.opts = t;\n        var i,\n            a,\n            s,\n            r = this.w.config;\n        this.seriesIndex = this.getSeriesIndex(t);\n        var o = this.getFillColors()[this.seriesIndex];\n        void 0 !== e.globals.seriesColors[this.seriesIndex] && (o = e.globals.seriesColors[this.seriesIndex]), \"function\" == typeof o && (o = o({\n          seriesIndex: this.seriesIndex,\n          dataPointIndex: t.dataPointIndex,\n          value: t.value,\n          w: e\n        }));\n        var n = this.getFillType(this.seriesIndex),\n            l = Array.isArray(r.fill.opacity) ? r.fill.opacity[this.seriesIndex] : r.fill.opacity;\n        t.color && (o = t.color);\n        var h = o;\n\n        if (-1 === o.indexOf(\"rgb\") ? o.length < 9 && (h = x.hexToRgba(o, l)) : o.indexOf(\"rgba\") > -1 && (l = x.getOpacityFromRGBA(o)), t.opacity && (l = t.opacity), \"pattern\" === n && (a = this.handlePatternFill(a, o, l, h)), \"gradient\" === n && (s = this.handleGradientFill(o, l, this.seriesIndex)), \"image\" === n) {\n          var c = r.fill.image.src,\n              d = t.patternID ? t.patternID : \"\";\n          this.clippedImgArea({\n            opacity: l,\n            image: Array.isArray(c) ? t.seriesNumber < c.length ? c[t.seriesNumber] : c[0] : c,\n            width: t.width ? t.width : void 0,\n            height: t.height ? t.height : void 0,\n            patternUnits: t.patternUnits,\n            patternID: \"pattern\".concat(e.globals.cuid).concat(t.seriesNumber + 1).concat(d)\n          }), i = \"url(#pattern\".concat(e.globals.cuid).concat(t.seriesNumber + 1).concat(d, \")\");\n        } else i = \"gradient\" === n ? s : \"pattern\" === n ? a : h;\n\n        return t.solid && (i = h), i;\n      }\n    }, {\n      key: \"getFillType\",\n      value: function value(t) {\n        var e = this.w;\n        return Array.isArray(e.config.fill.type) ? e.config.fill.type[t] : e.config.fill.type;\n      }\n    }, {\n      key: \"getFillColors\",\n      value: function value() {\n        var t = this.w,\n            e = t.config,\n            i = this.opts,\n            a = [];\n        return t.globals.comboCharts ? \"line\" === t.config.series[this.seriesIndex].type ? Array.isArray(t.globals.stroke.colors) ? a = t.globals.stroke.colors : a.push(t.globals.stroke.colors) : Array.isArray(t.globals.fill.colors) ? a = t.globals.fill.colors : a.push(t.globals.fill.colors) : \"line\" === e.chart.type ? Array.isArray(t.globals.stroke.colors) ? a = t.globals.stroke.colors : a.push(t.globals.stroke.colors) : Array.isArray(t.globals.fill.colors) ? a = t.globals.fill.colors : a.push(t.globals.fill.colors), void 0 !== i.fillColors && (a = [], Array.isArray(i.fillColors) ? a = i.fillColors.slice() : a.push(i.fillColors)), a;\n      }\n    }, {\n      key: \"handlePatternFill\",\n      value: function value(t, e, i, a) {\n        var s = this.w.config,\n            r = this.opts,\n            o = new m(this.ctx),\n            n = void 0 === s.fill.pattern.strokeWidth ? Array.isArray(s.stroke.width) ? s.stroke.width[this.seriesIndex] : s.stroke.width : Array.isArray(s.fill.pattern.strokeWidth) ? s.fill.pattern.strokeWidth[this.seriesIndex] : s.fill.pattern.strokeWidth,\n            l = e;\n        Array.isArray(s.fill.pattern.style) ? t = void 0 !== s.fill.pattern.style[r.seriesNumber] ? o.drawPattern(s.fill.pattern.style[r.seriesNumber], s.fill.pattern.width, s.fill.pattern.height, l, n, i) : a : t = o.drawPattern(s.fill.pattern.style, s.fill.pattern.width, s.fill.pattern.height, l, n, i);\n        return t;\n      }\n    }, {\n      key: \"handleGradientFill\",\n      value: function value(t, e, i) {\n        var a,\n            s = this.w.config,\n            r = this.opts,\n            o = new m(this.ctx),\n            n = new x(),\n            l = s.fill.gradient.type,\n            h = t,\n            c = void 0 === s.fill.gradient.opacityFrom ? e : Array.isArray(s.fill.gradient.opacityFrom) ? s.fill.gradient.opacityFrom[i] : s.fill.gradient.opacityFrom;\n        h.indexOf(\"rgba\") > -1 && (c = x.getOpacityFromRGBA(h));\n        var d = void 0 === s.fill.gradient.opacityTo ? e : Array.isArray(s.fill.gradient.opacityTo) ? s.fill.gradient.opacityTo[i] : s.fill.gradient.opacityTo;\n        if (void 0 === s.fill.gradient.gradientToColors || 0 === s.fill.gradient.gradientToColors.length) a = \"dark\" === s.fill.gradient.shade ? n.shadeColor(-1 * parseFloat(s.fill.gradient.shadeIntensity), t.indexOf(\"rgb\") > -1 ? x.rgb2hex(t) : t) : n.shadeColor(parseFloat(s.fill.gradient.shadeIntensity), t.indexOf(\"rgb\") > -1 ? x.rgb2hex(t) : t);else if (s.fill.gradient.gradientToColors[r.seriesNumber]) {\n          var g = s.fill.gradient.gradientToColors[r.seriesNumber];\n          a = g, g.indexOf(\"rgba\") > -1 && (d = x.getOpacityFromRGBA(g));\n        } else a = t;\n\n        if (s.fill.gradient.inverseColors) {\n          var u = h;\n          h = a, a = u;\n        }\n\n        return h.indexOf(\"rgb\") > -1 && (h = x.rgb2hex(h)), a.indexOf(\"rgb\") > -1 && (a = x.rgb2hex(a)), o.drawGradient(l, h, a, c, d, r.size, s.fill.gradient.stops, s.fill.gradient.colorStops, i);\n      }\n    }]), t;\n  }(),\n      T = function () {\n    function t(e, i) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"setGlobalMarkerSize\",\n      value: function value() {\n        var t = this.w;\n\n        if (t.globals.markers.size = Array.isArray(t.config.markers.size) ? t.config.markers.size : [t.config.markers.size], t.globals.markers.size.length > 0) {\n          if (t.globals.markers.size.length < t.globals.series.length + 1) for (var e = 0; e <= t.globals.series.length; e++) {\n            void 0 === t.globals.markers.size[e] && t.globals.markers.size.push(t.globals.markers.size[0]);\n          }\n        } else t.globals.markers.size = t.config.series.map(function (e) {\n          return t.config.markers.size;\n        });\n      }\n    }, {\n      key: \"plotChartMarkers\",\n      value: function value(t, e, i, a) {\n        var s,\n            r = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],\n            o = this.w,\n            n = e,\n            l = t,\n            h = null,\n            c = new m(this.ctx),\n            d = o.config.markers.discrete && o.config.markers.discrete.length;\n        if ((o.globals.markers.size[e] > 0 || r || d) && (h = c.group({\n          \"class\": r || d ? \"\" : \"apexcharts-series-markers\"\n        })).attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(o.globals.cuid, \")\")), Array.isArray(l.x)) for (var g = 0; g < l.x.length; g++) {\n          var u = i;\n          1 === i && 0 === g && (u = 0), 1 === i && 1 === g && (u = 1);\n          var f = \"apexcharts-marker\";\n          \"line\" !== o.config.chart.type && \"area\" !== o.config.chart.type || o.globals.comboCharts || o.config.tooltip.intersect || (f += \" no-pointer-events\");\n          var p = Array.isArray(o.config.markers.size) ? o.globals.markers.size[e] > 0 : o.config.markers.size > 0;\n\n          if (p || r || d) {\n            x.isNumber(l.y[g]) ? f += \" w\".concat(x.randomId()) : f = \"apexcharts-nullpoint\";\n            var b = this.getMarkerConfig({\n              cssClass: f,\n              seriesIndex: e,\n              dataPointIndex: u\n            });\n            o.config.series[n].data[u] && (o.config.series[n].data[u].fillColor && (b.pointFillColor = o.config.series[n].data[u].fillColor), o.config.series[n].data[u].strokeColor && (b.pointStrokeColor = o.config.series[n].data[u].strokeColor)), a && (b.pSize = a), (s = c.drawMarker(l.x[g], l.y[g], b)).attr(\"rel\", u), s.attr(\"j\", u), s.attr(\"index\", e), s.node.setAttribute(\"default-marker-size\", b.pSize);\n            var y = new v(this.ctx);\n            y.setSelectionFilter(s, e, u), this.addEvents(s), h && h.add(s);\n          } else void 0 === o.globals.pointsArray[e] && (o.globals.pointsArray[e] = []), o.globals.pointsArray[e].push([l.x[g], l.y[g]]);\n        }\n        return h;\n      }\n    }, {\n      key: \"getMarkerConfig\",\n      value: function value(t) {\n        var e = t.cssClass,\n            i = t.seriesIndex,\n            a = t.dataPointIndex,\n            s = void 0 === a ? null : a,\n            r = t.finishRadius,\n            o = void 0 === r ? null : r,\n            n = this.w,\n            l = this.getMarkerStyle(i),\n            h = n.globals.markers.size[i],\n            c = n.config.markers;\n        return null !== s && c.discrete.length && c.discrete.map(function (t) {\n          t.seriesIndex === i && t.dataPointIndex === s && (l.pointStrokeColor = t.strokeColor, l.pointFillColor = t.fillColor, h = t.size, l.pointShape = t.shape);\n        }), {\n          pSize: null === o ? h : o,\n          pRadius: c.radius,\n          width: Array.isArray(c.width) ? c.width[i] : c.width,\n          height: Array.isArray(c.height) ? c.height[i] : c.height,\n          pointStrokeWidth: Array.isArray(c.strokeWidth) ? c.strokeWidth[i] : c.strokeWidth,\n          pointStrokeColor: l.pointStrokeColor,\n          pointFillColor: l.pointFillColor,\n          shape: l.pointShape || (Array.isArray(c.shape) ? c.shape[i] : c.shape),\n          \"class\": e,\n          pointStrokeOpacity: Array.isArray(c.strokeOpacity) ? c.strokeOpacity[i] : c.strokeOpacity,\n          pointStrokeDashArray: Array.isArray(c.strokeDashArray) ? c.strokeDashArray[i] : c.strokeDashArray,\n          pointFillOpacity: Array.isArray(c.fillOpacity) ? c.fillOpacity[i] : c.fillOpacity,\n          seriesIndex: i\n        };\n      }\n    }, {\n      key: \"addEvents\",\n      value: function value(t) {\n        var e = this.w,\n            i = new m(this.ctx);\n        t.node.addEventListener(\"mouseenter\", i.pathMouseEnter.bind(this.ctx, t)), t.node.addEventListener(\"mouseleave\", i.pathMouseLeave.bind(this.ctx, t)), t.node.addEventListener(\"mousedown\", i.pathMouseDown.bind(this.ctx, t)), t.node.addEventListener(\"click\", e.config.markers.onClick), t.node.addEventListener(\"dblclick\", e.config.markers.onDblClick), t.node.addEventListener(\"touchstart\", i.pathMouseDown.bind(this.ctx, t), {\n          passive: !0\n        });\n      }\n    }, {\n      key: \"getMarkerStyle\",\n      value: function value(t) {\n        var e = this.w,\n            i = e.globals.markers.colors,\n            a = e.config.markers.strokeColor || e.config.markers.strokeColors;\n        return {\n          pointStrokeColor: Array.isArray(a) ? a[t] : a,\n          pointFillColor: Array.isArray(i) ? i[t] : i\n        };\n      }\n    }]), t;\n  }(),\n      I = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;\n    }\n\n    return r(t, [{\n      key: \"draw\",\n      value: function value(t, e, i) {\n        var a = this.w,\n            s = new m(this.ctx),\n            r = i.realIndex,\n            o = i.pointsPos,\n            n = i.zRatio,\n            l = i.elParent,\n            h = s.group({\n          \"class\": \"apexcharts-series-markers apexcharts-series-\".concat(a.config.chart.type)\n        });\n        if (h.attr(\"clip-path\", \"url(#gridRectMarkerMask\".concat(a.globals.cuid, \")\")), Array.isArray(o.x)) for (var c = 0; c < o.x.length; c++) {\n          var d = e + 1,\n              g = !0;\n          0 === e && 0 === c && (d = 0), 0 === e && 1 === c && (d = 1);\n          var u = 0,\n              f = a.globals.markers.size[r];\n\n          if (n !== 1 / 0) {\n            f = a.globals.seriesZ[r][d] / n;\n            var p = a.config.plotOptions.bubble;\n            p.minBubbleRadius && f < p.minBubbleRadius && (f = p.minBubbleRadius), p.maxBubbleRadius && f > p.maxBubbleRadius && (f = p.maxBubbleRadius);\n          }\n\n          a.config.chart.animations.enabled || (u = f);\n          var x = o.x[c],\n              b = o.y[c];\n\n          if (u = u || 0, null !== b && void 0 !== a.globals.series[r][d] || (g = !1), g) {\n            var v = this.drawPoint(x, b, u, f, r, d, e);\n            h.add(v);\n          }\n\n          l.add(h);\n        }\n      }\n    }, {\n      key: \"drawPoint\",\n      value: function value(t, e, i, a, s, r, o) {\n        var n = this.w,\n            l = s,\n            h = new b(this.ctx),\n            c = new v(this.ctx),\n            d = new M(this.ctx),\n            g = new T(this.ctx),\n            u = new m(this.ctx),\n            f = g.getMarkerConfig({\n          cssClass: \"apexcharts-marker\",\n          seriesIndex: l,\n          dataPointIndex: r,\n          finishRadius: \"bubble\" === n.config.chart.type || n.globals.comboCharts && n.config.series[s] && \"bubble\" === n.config.series[s].type ? a : null\n        });\n        a = f.pSize;\n        var p,\n            x = d.fillPath({\n          seriesNumber: s,\n          dataPointIndex: r,\n          color: f.pointFillColor,\n          patternUnits: \"objectBoundingBox\",\n          value: n.globals.series[s][o]\n        });\n\n        if (\"circle\" === f.shape ? p = u.drawCircle(i) : \"square\" !== f.shape && \"rect\" !== f.shape || (p = u.drawRect(0, 0, f.width - f.pointStrokeWidth / 2, f.height - f.pointStrokeWidth / 2, f.pRadius)), n.config.series[l].data[r] && n.config.series[l].data[r].fillColor && (x = n.config.series[l].data[r].fillColor), p.attr({\n          x: t - f.width / 2 - f.pointStrokeWidth / 2,\n          y: e - f.height / 2 - f.pointStrokeWidth / 2,\n          cx: t,\n          cy: e,\n          fill: x,\n          \"fill-opacity\": f.pointFillOpacity,\n          stroke: f.pointStrokeColor,\n          r: a,\n          \"stroke-width\": f.pointStrokeWidth,\n          \"stroke-dasharray\": f.pointStrokeDashArray,\n          \"stroke-opacity\": f.pointStrokeOpacity\n        }), n.config.chart.dropShadow.enabled) {\n          var y = n.config.chart.dropShadow;\n          c.dropShadow(p, y, s);\n        }\n\n        if (!this.initialAnim || n.globals.dataChanged || n.globals.resized) n.globals.animationEnded = !0;else {\n          var w = n.config.chart.animations.speed;\n          h.animateMarker(p, 0, \"circle\" === f.shape ? a : {\n            width: f.width,\n            height: f.height\n          }, w, n.globals.easing, function () {\n            window.setTimeout(function () {\n              h.animationCompleted(p);\n            }, 100);\n          });\n        }\n        if (n.globals.dataChanged && \"circle\" === f.shape) if (this.dynamicAnim) {\n          var k,\n              A,\n              S,\n              C,\n              L = n.config.chart.animations.dynamicAnimation.speed;\n          null != (C = n.globals.previousPaths[s] && n.globals.previousPaths[s][o]) && (k = C.x, A = C.y, S = void 0 !== C.r ? C.r : a);\n\n          for (var P = 0; P < n.globals.collapsedSeries.length; P++) {\n            n.globals.collapsedSeries[P].index === s && (L = 1, a = 0);\n          }\n\n          0 === t && 0 === e && (a = 0), h.animateCircle(p, {\n            cx: k,\n            cy: A,\n            r: S\n          }, {\n            cx: t,\n            cy: e,\n            r: a\n          }, L, n.globals.easing);\n        } else p.attr({\n          r: a\n        });\n        return p.attr({\n          rel: r,\n          j: r,\n          index: s,\n          \"default-marker-size\": a\n        }), c.setSelectionFilter(p, s, r), g.addEvents(p), p.node.classList.add(\"apexcharts-marker\"), p;\n      }\n    }, {\n      key: \"centerTextInBubble\",\n      value: function value(t) {\n        var e = this.w;\n        return {\n          y: t += parseInt(e.config.dataLabels.style.fontSize, 10) / 4\n        };\n      }\n    }]), t;\n  }(),\n      z = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"dataLabelsCorrection\",\n      value: function value(t, e, i, a, s, r, o) {\n        var n = this.w,\n            l = !1,\n            h = new m(this.ctx).getTextRects(i, o),\n            c = h.width,\n            d = h.height;\n        e < 0 && (e = 0), e > n.globals.gridHeight + d && (e = n.globals.gridHeight + d / 2), void 0 === n.globals.dataLabelsRects[a] && (n.globals.dataLabelsRects[a] = []), n.globals.dataLabelsRects[a].push({\n          x: t,\n          y: e,\n          width: c,\n          height: d\n        });\n        var g = n.globals.dataLabelsRects[a].length - 2,\n            u = void 0 !== n.globals.lastDrawnDataLabelsIndexes[a] ? n.globals.lastDrawnDataLabelsIndexes[a][n.globals.lastDrawnDataLabelsIndexes[a].length - 1] : 0;\n\n        if (void 0 !== n.globals.dataLabelsRects[a][g]) {\n          var f = n.globals.dataLabelsRects[a][u];\n          (t > f.x + f.width + 2 || e > f.y + f.height + 2 || t + c < f.x) && (l = !0);\n        }\n\n        return (0 === s || r) && (l = !0), {\n          x: t,\n          y: e,\n          textRects: h,\n          drawnextLabel: l\n        };\n      }\n    }, {\n      key: \"drawDataLabel\",\n      value: function value(t, e, i) {\n        var a = this,\n            s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 2,\n            r = this.w,\n            o = new m(this.ctx),\n            n = r.config.dataLabels,\n            l = 0,\n            h = 0,\n            c = i,\n            d = null;\n        if (!n.enabled || !Array.isArray(t.x)) return d;\n        d = o.group({\n          \"class\": \"apexcharts-data-labels\"\n        });\n\n        for (var g = 0; g < t.x.length; g++) {\n          if (l = t.x[g] + n.offsetX, h = t.y[g] + n.offsetY + s, !isNaN(l)) {\n            1 === i && 0 === g && (c = 0), 1 === i && 1 === g && (c = 1);\n\n            var u = r.globals.series[e][c],\n                f = \"\",\n                p = function p(t) {\n              return r.config.dataLabels.formatter(t, {\n                ctx: a.ctx,\n                seriesIndex: e,\n                dataPointIndex: c,\n                w: r\n              });\n            };\n\n            if (\"bubble\" === r.config.chart.type) {\n              f = p(u = r.globals.seriesZ[e][c]), h = t.y[g];\n              var x = new I(this.ctx),\n                  b = x.centerTextInBubble(h, e, c);\n              h = b.y;\n            } else void 0 !== u && (f = p(u));\n\n            this.plotDataLabelsText({\n              x: l,\n              y: h,\n              text: f,\n              i: e,\n              j: c,\n              parent: d,\n              offsetCorrection: !0,\n              dataLabelsConfig: r.config.dataLabels\n            });\n          }\n        }\n\n        return d;\n      }\n    }, {\n      key: \"plotDataLabelsText\",\n      value: function value(t) {\n        var e = this.w,\n            i = new m(this.ctx),\n            a = t.x,\n            s = t.y,\n            r = t.i,\n            o = t.j,\n            n = t.text,\n            l = t.textAnchor,\n            h = t.fontSize,\n            c = t.parent,\n            d = t.dataLabelsConfig,\n            g = t.color,\n            u = t.alwaysDrawDataLabel,\n            f = t.offsetCorrection;\n\n        if (!(Array.isArray(e.config.dataLabels.enabledOnSeries) && e.config.dataLabels.enabledOnSeries.indexOf(r) < 0)) {\n          var p = {\n            x: a,\n            y: s,\n            drawnextLabel: !0,\n            textRects: null\n          };\n          f && (p = this.dataLabelsCorrection(a, s, n, r, o, u, parseInt(d.style.fontSize, 10))), e.globals.zoomed || (a = p.x, s = p.y), p.textRects && (a < -10 - p.textRects.width || a > e.globals.gridWidth + p.textRects.width + 10) && (n = \"\");\n          var x = e.globals.dataLabels.style.colors[r];\n          ((\"bar\" === e.config.chart.type || \"rangeBar\" === e.config.chart.type) && e.config.plotOptions.bar.distributed || e.config.dataLabels.distributed) && (x = e.globals.dataLabels.style.colors[o]), \"function\" == typeof x && (x = x({\n            series: e.globals.series,\n            seriesIndex: r,\n            dataPointIndex: o,\n            w: e\n          })), g && (x = g);\n          var b = d.offsetX,\n              y = d.offsetY;\n\n          if (\"bar\" !== e.config.chart.type && \"rangeBar\" !== e.config.chart.type || (b = 0, y = 0), p.drawnextLabel) {\n            var w = i.drawText({\n              width: 100,\n              height: parseInt(d.style.fontSize, 10),\n              x: a + b,\n              y: s + y,\n              foreColor: x,\n              textAnchor: l || d.textAnchor,\n              text: n,\n              fontSize: h || d.style.fontSize,\n              fontFamily: d.style.fontFamily,\n              fontWeight: d.style.fontWeight || \"normal\"\n            });\n\n            if (w.attr({\n              \"class\": \"apexcharts-datalabel\",\n              cx: a,\n              cy: s\n            }), d.dropShadow.enabled) {\n              var k = d.dropShadow;\n              new v(this.ctx).dropShadow(w, k);\n            }\n\n            c.add(w), void 0 === e.globals.lastDrawnDataLabelsIndexes[r] && (e.globals.lastDrawnDataLabelsIndexes[r] = []), e.globals.lastDrawnDataLabelsIndexes[r].push(o);\n          }\n        }\n      }\n    }, {\n      key: \"addBackgroundToDataLabel\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = i.config.dataLabels.background,\n            s = a.padding,\n            r = a.padding / 2,\n            o = e.width,\n            n = e.height,\n            l = new m(this.ctx).drawRect(e.x - s, e.y - r / 2, o + 2 * s, n + r, a.borderRadius, \"transparent\" === i.config.chart.background ? \"#fff\" : i.config.chart.background, a.opacity, a.borderWidth, a.borderColor);\n        a.dropShadow.enabled && new v(this.ctx).dropShadow(l, a.dropShadow);\n        return l;\n      }\n    }, {\n      key: \"dataLabelsBackground\",\n      value: function value() {\n        var t = this.w;\n        if (\"bubble\" !== t.config.chart.type) for (var e = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-datalabels text\"), i = 0; i < e.length; i++) {\n          var a = e[i],\n              s = a.getBBox(),\n              r = null;\n\n          if (s.width && s.height && (r = this.addBackgroundToDataLabel(a, s)), r) {\n            a.parentNode.insertBefore(r.node, a);\n            var o = a.getAttribute(\"fill\");\n            t.config.chart.animations.enabled && !t.globals.resized && !t.globals.dataChanged ? r.animate().attr({\n              fill: o\n            }) : r.attr({\n              fill: o\n            }), a.setAttribute(\"fill\", t.config.dataLabels.background.foreColor);\n          }\n        }\n      }\n    }, {\n      key: \"bringForward\",\n      value: function value() {\n        for (var t = this.w, e = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-datalabels\"), i = t.globals.dom.baseEl.querySelector(\".apexcharts-plot-series:last-child\"), a = 0; a < e.length; a++) {\n          i && i.insertBefore(e[a], i.nextSibling);\n        }\n      }\n    }]), t;\n  }(),\n      X = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.barCtx = e;\n    }\n\n    return r(t, [{\n      key: \"handleBarDataLabels\",\n      value: function value(t) {\n        var e = t.x,\n            i = t.y,\n            a = t.y1,\n            s = t.y2,\n            r = t.i,\n            o = t.j,\n            n = t.realIndex,\n            l = t.series,\n            h = t.barHeight,\n            c = t.barWidth,\n            d = t.barYPosition,\n            g = t.visibleSeries,\n            u = t.renderedPath,\n            f = this.w,\n            p = new m(this.barCtx.ctx),\n            x = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[n] : this.barCtx.strokeWidth,\n            b = e + parseFloat(c * g),\n            v = i + parseFloat(h * g);\n        f.globals.isXNumeric && !f.globals.isBarHorizontal && (b = e + parseFloat(c * (g + 1)), v = i + parseFloat(h * (g + 1)) - x);\n        var y = e,\n            w = i,\n            k = {},\n            A = f.config.dataLabels,\n            S = this.barCtx.barOptions.dataLabels;\n        void 0 !== d && this.barCtx.isRangeBar && (v = d, w = d);\n        var C = A.offsetX,\n            L = A.offsetY,\n            P = {\n          width: 0,\n          height: 0\n        };\n\n        if (f.config.dataLabels.enabled) {\n          var M = this.barCtx.series[r][o];\n          P = p.getTextRects(f.globals.yLabelFormatters[0](M), parseFloat(A.style.fontSize));\n        }\n\n        var T = {\n          x: e,\n          y: i,\n          i: r,\n          j: o,\n          renderedPath: u,\n          bcx: b,\n          bcy: v,\n          barHeight: h,\n          barWidth: c,\n          textRects: P,\n          strokeWidth: x,\n          dataLabelsX: y,\n          dataLabelsY: w,\n          barDataLabelsConfig: S,\n          offX: C,\n          offY: L\n        };\n        return k = this.barCtx.isHorizontal ? this.calculateBarsDataLabelsPosition(T) : this.calculateColumnsDataLabelsPosition(T), u.attr({\n          cy: k.bcy,\n          cx: k.bcx,\n          j: o,\n          val: l[r][o],\n          barHeight: h,\n          barWidth: c\n        }), this.drawCalculatedDataLabels({\n          x: k.dataLabelsX,\n          y: k.dataLabelsY,\n          val: this.barCtx.isRangeBar ? [a, s] : l[r][o],\n          i: n,\n          j: o,\n          barWidth: c,\n          barHeight: h,\n          textRects: P,\n          dataLabelsConfig: A\n        });\n      }\n    }, {\n      key: \"calculateColumnsDataLabelsPosition\",\n      value: function value(t) {\n        var e,\n            i = this.w,\n            a = t.i,\n            s = t.j,\n            r = t.y,\n            o = t.bcx,\n            n = t.barWidth,\n            l = t.barHeight,\n            h = t.textRects,\n            c = t.dataLabelsY,\n            d = t.barDataLabelsConfig,\n            g = t.strokeWidth,\n            u = t.offX,\n            f = t.offY;\n        l = Math.abs(l);\n        var p = \"vertical\" === i.config.plotOptions.bar.dataLabels.orientation;\n        o -= g / 2;\n        var x = i.globals.gridWidth / i.globals.dataPoints;\n\n        if (e = i.globals.isXNumeric ? o - n / 2 + u : o - x + n / 2 + u, p) {\n          e = e + h.height / 2 - g / 2 - 2;\n        }\n\n        var b = this.barCtx.series[a][s] < 0,\n            v = r;\n\n        switch (this.barCtx.isReversed && (v = r - l + (b ? 2 * l : 0), r -= l), d.position) {\n          case \"center\":\n            c = p ? b ? v + l / 2 + f : v + l / 2 - f : b ? v - l / 2 + h.height / 2 + f : v + l / 2 + h.height / 2 - f;\n            break;\n\n          case \"bottom\":\n            c = p ? b ? v + l + f : v + l - f : b ? v - l + h.height + g + f : v + l - h.height / 2 + g - f;\n            break;\n\n          case \"top\":\n            c = p ? b ? v + f : v - f : b ? v - h.height / 2 - f : v + h.height + f;\n        }\n\n        return i.config.chart.stacked || (c < 0 ? c = 0 + g : c + h.height / 3 > i.globals.gridHeight && (c = i.globals.gridHeight - g)), {\n          bcx: o,\n          bcy: r,\n          dataLabelsX: e,\n          dataLabelsY: c\n        };\n      }\n    }, {\n      key: \"calculateBarsDataLabelsPosition\",\n      value: function value(t) {\n        var e = this.w,\n            i = t.x,\n            a = t.i,\n            s = t.j,\n            r = t.bcy,\n            o = t.barHeight,\n            n = t.barWidth,\n            l = t.textRects,\n            h = t.dataLabelsX,\n            c = t.strokeWidth,\n            d = t.barDataLabelsConfig,\n            g = t.offX,\n            u = t.offY,\n            f = e.globals.gridHeight / e.globals.dataPoints;\n        n = Math.abs(n);\n        var p = r - (this.barCtx.isRangeBar ? 0 : f) + o / 2 + l.height / 2 + u - 3,\n            x = this.barCtx.series[a][s] < 0,\n            b = i;\n\n        switch (this.barCtx.isReversed && (b = i + n - (x ? 2 * n : 0), i = e.globals.gridWidth - n), d.position) {\n          case \"center\":\n            h = x ? b + n / 2 - g : Math.max(l.width / 2, b - n / 2) + g;\n            break;\n\n          case \"bottom\":\n            h = x ? b + n - c - Math.round(l.width / 2) - g : b - n + c + Math.round(l.width / 2) + g;\n            break;\n\n          case \"top\":\n            h = x ? b - c + Math.round(l.width / 2) - g : b - c - Math.round(l.width / 2) + g;\n        }\n\n        return e.config.chart.stacked || (h < 0 ? h = h + l.width + c : h + l.width / 2 > e.globals.gridWidth && (h = e.globals.gridWidth - l.width - c)), {\n          bcx: i,\n          bcy: r,\n          dataLabelsX: h,\n          dataLabelsY: p\n        };\n      }\n    }, {\n      key: \"drawCalculatedDataLabels\",\n      value: function value(t) {\n        var i = t.x,\n            a = t.y,\n            s = t.val,\n            r = t.i,\n            o = t.j,\n            n = t.textRects,\n            l = t.barHeight,\n            h = t.barWidth,\n            c = t.dataLabelsConfig,\n            d = this.w,\n            g = \"rotate(0)\";\n        \"vertical\" === d.config.plotOptions.bar.dataLabels.orientation && (g = \"rotate(-90, \".concat(i, \", \").concat(a, \")\"));\n        var u = new z(this.barCtx.ctx),\n            f = new m(this.barCtx.ctx),\n            p = c.formatter,\n            x = null,\n            b = d.globals.collapsedSeriesIndices.indexOf(r) > -1;\n\n        if (c.enabled && !b) {\n          x = f.group({\n            \"class\": \"apexcharts-data-labels\",\n            transform: g\n          });\n          var v = \"\";\n          void 0 !== s && (v = p(s, {\n            seriesIndex: r,\n            dataPointIndex: o,\n            w: d\n          }));\n          var y = d.globals.series[r][o] < 0,\n              w = d.config.plotOptions.bar.dataLabels.position;\n          if (\"vertical\" === d.config.plotOptions.bar.dataLabels.orientation && (\"top\" === w && (c.textAnchor = y ? \"end\" : \"start\"), \"center\" === w && (c.textAnchor = \"middle\"), \"bottom\" === w && (c.textAnchor = y ? \"end\" : \"start\")), this.barCtx.isRangeBar && this.barCtx.barOptions.dataLabels.hideOverflowingLabels) h < f.getTextRects(v, parseFloat(c.style.fontSize)).width && (v = \"\");\n          d.config.chart.stacked && this.barCtx.barOptions.dataLabels.hideOverflowingLabels && (this.barCtx.isHorizontal ? n.width / 1.6 > Math.abs(h) && (v = \"\") : n.height / 1.6 > Math.abs(l) && (v = \"\"));\n          var k = e({}, c);\n          this.barCtx.isHorizontal && s < 0 && (\"start\" === c.textAnchor ? k.textAnchor = \"end\" : \"end\" === c.textAnchor && (k.textAnchor = \"start\")), u.plotDataLabelsText({\n            x: i,\n            y: a,\n            text: v,\n            i: r,\n            j: o,\n            parent: x,\n            dataLabelsConfig: k,\n            alwaysDrawDataLabel: !0,\n            offsetCorrection: !0\n          });\n        }\n\n        return x;\n      }\n    }]), t;\n  }(),\n      E = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w, this.legendInactiveClass = \"legend-mouseover-inactive\";\n    }\n\n    return r(t, [{\n      key: \"getAllSeriesEls\",\n      value: function value() {\n        return this.w.globals.dom.baseEl.getElementsByClassName(\"apexcharts-series\");\n      }\n    }, {\n      key: \"getSeriesByName\",\n      value: function value(t) {\n        return this.w.globals.dom.baseEl.querySelector(\".apexcharts-inner .apexcharts-series[seriesName='\".concat(x.escapeString(t), \"']\"));\n      }\n    }, {\n      key: \"isSeriesHidden\",\n      value: function value(t) {\n        var e = this.getSeriesByName(t),\n            i = parseInt(e.getAttribute(\"data:realIndex\"), 10);\n        return {\n          isHidden: e.classList.contains(\"apexcharts-series-collapsed\"),\n          realIndex: i\n        };\n      }\n    }, {\n      key: \"addCollapsedClassToSeries\",\n      value: function value(t, e) {\n        var i = this.w;\n\n        function a(i) {\n          for (var a = 0; a < i.length; a++) {\n            i[a].index === e && t.node.classList.add(\"apexcharts-series-collapsed\");\n          }\n        }\n\n        a(i.globals.collapsedSeries), a(i.globals.ancillaryCollapsedSeries);\n      }\n    }, {\n      key: \"toggleSeries\",\n      value: function value(t) {\n        var e = this.isSeriesHidden(t);\n        return this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, e.isHidden), e.isHidden;\n      }\n    }, {\n      key: \"showSeries\",\n      value: function value(t) {\n        var e = this.isSeriesHidden(t);\n        e.isHidden && this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !0);\n      }\n    }, {\n      key: \"hideSeries\",\n      value: function value(t) {\n        var e = this.isSeriesHidden(t);\n        e.isHidden || this.ctx.legend.legendHelpers.toggleDataSeries(e.realIndex, !1);\n      }\n    }, {\n      key: \"resetSeries\",\n      value: function value() {\n        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],\n            e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n            a = this.w,\n            s = x.clone(a.globals.initialSeries);\n        a.globals.previousPaths = [], i ? (a.globals.collapsedSeries = [], a.globals.ancillaryCollapsedSeries = [], a.globals.collapsedSeriesIndices = [], a.globals.ancillaryCollapsedSeriesIndices = []) : s = this.emptyCollapsedSeries(s), a.config.series = s, t && (e && (a.globals.zoomed = !1, this.ctx.updateHelpers.revertDefaultAxisMinMax()), this.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled));\n      }\n    }, {\n      key: \"emptyCollapsedSeries\",\n      value: function value(t) {\n        for (var e = this.w, i = 0; i < t.length; i++) {\n          e.globals.collapsedSeriesIndices.indexOf(i) > -1 && (t[i].data = []);\n        }\n\n        return t;\n      }\n    }, {\n      key: \"toggleSeriesOnHover\",\n      value: function value(t, e) {\n        var i = this.w;\n        e || (e = t.target);\n        var a = i.globals.dom.baseEl.querySelectorAll(\".apexcharts-series, .apexcharts-datalabels\");\n\n        if (\"mousemove\" === t.type) {\n          var s = parseInt(e.getAttribute(\"rel\"), 10) - 1,\n              r = null,\n              o = null;\n          i.globals.axisCharts || \"radialBar\" === i.config.chart.type ? i.globals.axisCharts ? (r = i.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(s, \"']\")), o = i.globals.dom.baseEl.querySelector(\".apexcharts-datalabels[data\\\\:realIndex='\".concat(s, \"']\"))) : r = i.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(s + 1, \"']\")) : r = i.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(s + 1, \"'] path\"));\n\n          for (var n = 0; n < a.length; n++) {\n            a[n].classList.add(this.legendInactiveClass);\n          }\n\n          null !== r && (i.globals.axisCharts || r.parentNode.classList.remove(this.legendInactiveClass), r.classList.remove(this.legendInactiveClass), null !== o && o.classList.remove(this.legendInactiveClass));\n        } else if (\"mouseout\" === t.type) for (var l = 0; l < a.length; l++) {\n          a[l].classList.remove(this.legendInactiveClass);\n        }\n      }\n    }, {\n      key: \"highlightRangeInSeries\",\n      value: function value(t, e) {\n        var i = this,\n            a = this.w,\n            s = a.globals.dom.baseEl.getElementsByClassName(\"apexcharts-heatmap-rect\"),\n            r = function r(t) {\n          for (var e = 0; e < s.length; e++) {\n            s[e].classList[t](i.legendInactiveClass);\n          }\n        };\n\n        if (\"mousemove\" === t.type) {\n          var o = parseInt(e.getAttribute(\"rel\"), 10) - 1;\n          r(\"add\"), function (t) {\n            for (var e = 0; e < s.length; e++) {\n              var a = parseInt(s[e].getAttribute(\"val\"), 10);\n              a >= t.from && a <= t.to && s[e].classList.remove(i.legendInactiveClass);\n            }\n          }(a.config.plotOptions.heatmap.colorScale.ranges[o]);\n        } else \"mouseout\" === t.type && r(\"remove\");\n      }\n    }, {\n      key: \"getActiveConfigSeriesIndex\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],\n            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : \"asc\",\n            i = this.w,\n            a = 0;\n        if (i.config.series.length > 1) for (var s = i.config.series.map(function (e, a) {\n          var s = !1;\n          return t && (s = \"bar\" === i.config.series[a].type || \"column\" === i.config.series[a].type), e.data && e.data.length > 0 && !s ? a : -1;\n        }), r = \"asc\" === e ? 0 : s.length - 1; \"asc\" === e ? r < s.length : r >= 0; \"asc\" === e ? r++ : r--) {\n          if (-1 !== s[r]) {\n            a = s[r];\n            break;\n          }\n        }\n        return a;\n      }\n    }, {\n      key: \"getPreviousPaths\",\n      value: function value() {\n        var t = this.w;\n\n        function e(e, i, a) {\n          for (var s = e[i].childNodes, r = {\n            type: a,\n            paths: [],\n            realIndex: e[i].getAttribute(\"data:realIndex\")\n          }, o = 0; o < s.length; o++) {\n            if (s[o].hasAttribute(\"pathTo\")) {\n              var n = s[o].getAttribute(\"pathTo\");\n              r.paths.push({\n                d: n\n              });\n            }\n          }\n\n          t.globals.previousPaths.push(r);\n        }\n\n        t.globals.previousPaths = [];\n        [\"line\", \"area\", \"bar\", \"rangebar\", \"candlestick\", \"radar\"].forEach(function (i) {\n          for (var a, s = (a = i, t.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(a, \"-series .apexcharts-series\"))), r = 0; r < s.length; r++) {\n            e(s, r, i);\n          }\n        }), this.handlePrevBubbleScatterPaths(\"bubble\"), this.handlePrevBubbleScatterPaths(\"scatter\");\n        var i = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t.config.chart.type, \" .apexcharts-series\"));\n        if (i.length > 0) for (var a = function a(e) {\n          for (var i = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t.config.chart.type, \" .apexcharts-series[data\\\\:realIndex='\").concat(e, \"'] rect\")), a = [], s = function s(t) {\n            var e = function e(_e) {\n              return i[t].getAttribute(_e);\n            },\n                s = {\n              x: parseFloat(e(\"x\")),\n              y: parseFloat(e(\"y\")),\n              width: parseFloat(e(\"width\")),\n              height: parseFloat(e(\"height\"))\n            };\n\n            a.push({\n              rect: s,\n              color: i[t].getAttribute(\"color\")\n            });\n          }, r = 0; r < i.length; r++) {\n            s(r);\n          }\n\n          t.globals.previousPaths.push(a);\n        }, s = 0; s < i.length; s++) {\n          a(s);\n        }\n        t.globals.axisCharts || (t.globals.previousPaths = t.globals.series);\n      }\n    }, {\n      key: \"handlePrevBubbleScatterPaths\",\n      value: function value(t) {\n        var e = this.w,\n            i = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t, \"-series .apexcharts-series\"));\n        if (i.length > 0) for (var a = 0; a < i.length; a++) {\n          for (var s = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(t, \"-series .apexcharts-series[data\\\\:realIndex='\").concat(a, \"'] circle\")), r = [], o = 0; o < s.length; o++) {\n            r.push({\n              x: s[o].getAttribute(\"cx\"),\n              y: s[o].getAttribute(\"cy\"),\n              r: s[o].getAttribute(\"r\")\n            });\n          }\n\n          e.globals.previousPaths.push(r);\n        }\n      }\n    }, {\n      key: \"clearPreviousPaths\",\n      value: function value() {\n        var t = this.w;\n        t.globals.previousPaths = [], t.globals.allSeriesCollapsed = !1;\n      }\n    }, {\n      key: \"handleNoData\",\n      value: function value() {\n        var t = this.w,\n            e = t.config.noData,\n            i = new m(this.ctx),\n            a = t.globals.svgWidth / 2,\n            s = t.globals.svgHeight / 2,\n            r = \"middle\";\n\n        if (t.globals.noData = !0, t.globals.animationEnded = !0, \"left\" === e.align ? (a = 10, r = \"start\") : \"right\" === e.align && (a = t.globals.svgWidth - 10, r = \"end\"), \"top\" === e.verticalAlign ? s = 50 : \"bottom\" === e.verticalAlign && (s = t.globals.svgHeight - 50), a += e.offsetX, s = s + parseInt(e.style.fontSize, 10) + 2 + e.offsetY, void 0 !== e.text && \"\" !== e.text) {\n          var o = i.drawText({\n            x: a,\n            y: s,\n            text: e.text,\n            textAnchor: r,\n            fontSize: e.style.fontSize,\n            fontFamily: e.style.fontFamily,\n            foreColor: e.style.color,\n            opacity: 1,\n            \"class\": \"apexcharts-text-nodata\"\n          });\n          t.globals.dom.Paper.add(o);\n        }\n      }\n    }, {\n      key: \"setNullSeriesToZeroValues\",\n      value: function value(t) {\n        for (var e = this.w, i = 0; i < t.length; i++) {\n          if (0 === t[i].length) for (var a = 0; a < t[e.globals.maxValsInArrayIndex].length; a++) {\n            t[i].push(0);\n          }\n        }\n\n        return t;\n      }\n    }, {\n      key: \"hasAllSeriesEqualX\",\n      value: function value() {\n        for (var t = !0, e = this.w, i = this.filteredSeriesX(), a = 0; a < i.length - 1; a++) {\n          if (i[a][0] !== i[a + 1][0]) {\n            t = !1;\n            break;\n          }\n        }\n\n        return e.globals.allSeriesHasEqualX = t, t;\n      }\n    }, {\n      key: \"filteredSeriesX\",\n      value: function value() {\n        var t = this.w.globals.seriesX.map(function (t) {\n          return t.length > 0 ? t : [];\n        });\n        return t;\n      }\n    }]), t;\n  }(),\n      Y = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.barCtx = e;\n    }\n\n    return r(t, [{\n      key: \"initVariables\",\n      value: function value(t) {\n        var e = this.w;\n        this.barCtx.series = t, this.barCtx.totalItems = 0, this.barCtx.seriesLen = 0, this.barCtx.visibleI = -1, this.barCtx.visibleItems = 1;\n\n        for (var i = 0; i < t.length; i++) {\n          if (t[i].length > 0 && (this.barCtx.seriesLen = this.barCtx.seriesLen + 1, this.barCtx.totalItems += t[i].length), e.globals.isXNumeric) for (var a = 0; a < t[i].length; a++) {\n            e.globals.seriesX[i][a] > e.globals.minX && e.globals.seriesX[i][a] < e.globals.maxX && this.barCtx.visibleItems++;\n          } else this.barCtx.visibleItems = e.globals.dataPoints;\n        }\n\n        0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1), this.barCtx.zeroSerieses = [], this.barCtx.radiusOnSeriesNumber = t.length - 1, e.globals.comboCharts || this.checkZeroSeries({\n          series: t\n        });\n      }\n    }, {\n      key: \"initialPositions\",\n      value: function value() {\n        var t,\n            e,\n            i,\n            a,\n            s,\n            r,\n            o,\n            n,\n            l = this.w,\n            h = l.globals.dataPoints;\n        this.barCtx.isRangeBar && (h = l.globals.labels.length);\n        var c = this.barCtx.seriesLen;\n        if (l.config.plotOptions.bar.rangeBarGroupRows && (c = 1), this.barCtx.isHorizontal) s = (i = l.globals.gridHeight / h) / c, l.globals.isXNumeric && (s = (i = l.globals.gridHeight / this.barCtx.totalItems) / this.barCtx.seriesLen), s = s * parseInt(this.barCtx.barOptions.barHeight, 10) / 100, n = this.barCtx.baseLineInvertedY + l.globals.padHorizontal + (this.barCtx.isReversed ? l.globals.gridWidth : 0) - (this.barCtx.isReversed ? 2 * this.barCtx.baseLineInvertedY : 0), e = (i - s * this.barCtx.seriesLen) / 2;else {\n          if (a = l.globals.gridWidth / this.barCtx.visibleItems, l.config.xaxis.convertedCatToNumeric && (a = l.globals.gridWidth / l.globals.dataPoints), r = a / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100, l.globals.isXNumeric) {\n            var d = this.barCtx.xRatio;\n            l.config.xaxis.convertedCatToNumeric && (d = this.barCtx.initialXRatio), l.globals.minXDiff && .5 !== l.globals.minXDiff && l.globals.minXDiff / d > 0 && (a = l.globals.minXDiff / d), (r = a / this.barCtx.seriesLen * parseInt(this.barCtx.barOptions.columnWidth, 10) / 100) < 1 && (r = 1);\n          }\n\n          o = l.globals.gridHeight - this.barCtx.baseLineY[this.barCtx.yaxisIndex] - (this.barCtx.isReversed ? l.globals.gridHeight : 0) + (this.barCtx.isReversed ? 2 * this.barCtx.baseLineY[this.barCtx.yaxisIndex] : 0), t = l.globals.padHorizontal + (a - r * this.barCtx.seriesLen) / 2;\n        }\n        return {\n          x: t,\n          y: e,\n          yDivision: i,\n          xDivision: a,\n          barHeight: s,\n          barWidth: r,\n          zeroH: o,\n          zeroW: n\n        };\n      }\n    }, {\n      key: \"getPathFillColor\",\n      value: function value(t, e, i, a) {\n        var s = this.w,\n            r = new M(this.barCtx.ctx),\n            o = null,\n            n = this.barCtx.barOptions.distributed ? i : e;\n        this.barCtx.barOptions.colors.ranges.length > 0 && this.barCtx.barOptions.colors.ranges.map(function (a) {\n          t[e][i] >= a.from && t[e][i] <= a.to && (o = a.color);\n        });\n        return s.config.series[e].data[i] && s.config.series[e].data[i].fillColor && (o = s.config.series[e].data[i].fillColor), r.fillPath({\n          seriesNumber: this.barCtx.barOptions.distributed ? n : a,\n          dataPointIndex: i,\n          color: o,\n          value: t[e][i]\n        });\n      }\n    }, {\n      key: \"getStrokeWidth\",\n      value: function value(t, e, i) {\n        var a = 0,\n            s = this.w;\n        return void 0 === this.barCtx.series[t][e] || null === this.barCtx.series[t][e] ? this.barCtx.isNullValue = !0 : this.barCtx.isNullValue = !1, s.config.stroke.show && (this.barCtx.isNullValue || (a = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[i] : this.barCtx.strokeWidth)), a;\n      }\n    }, {\n      key: \"barBackground\",\n      value: function value(t) {\n        var e = t.j,\n            i = t.i,\n            a = t.x1,\n            s = t.x2,\n            r = t.y1,\n            o = t.y2,\n            n = t.elSeries,\n            l = this.w,\n            h = new m(this.barCtx.ctx),\n            c = new E(this.barCtx.ctx).getActiveConfigSeriesIndex();\n\n        if (this.barCtx.barOptions.colors.backgroundBarColors.length > 0 && c === i) {\n          e >= this.barCtx.barOptions.colors.backgroundBarColors.length && (e %= this.barCtx.barOptions.colors.backgroundBarColors.length);\n          var d = this.barCtx.barOptions.colors.backgroundBarColors[e],\n              g = h.drawRect(void 0 !== a ? a : 0, void 0 !== r ? r : 0, void 0 !== s ? s : l.globals.gridWidth, void 0 !== o ? o : l.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, d, this.barCtx.barOptions.colors.backgroundBarOpacity);\n          n.add(g), g.node.classList.add(\"apexcharts-backgroundBar\");\n        }\n      }\n    }, {\n      key: \"getColumnPaths\",\n      value: function value(t) {\n        var e = t.barWidth,\n            i = t.barXPosition,\n            a = t.yRatio,\n            s = t.y1,\n            r = t.y2,\n            o = t.strokeWidth,\n            n = t.series,\n            l = t.realIndex,\n            h = t.i,\n            c = t.j,\n            d = t.w,\n            g = new m(this.barCtx.ctx);\n        (o = Array.isArray(o) ? o[l] : o) || (o = 0);\n        var u = {\n          barWidth: e,\n          strokeWidth: o,\n          yRatio: a,\n          barXPosition: i,\n          y1: s,\n          y2: r\n        },\n            f = this.getRoundedBars(d, u, n, h, c),\n            p = i,\n            x = i + e,\n            b = g.move(p, s),\n            v = g.move(p, s),\n            y = g.line(x - o, s);\n        return d.globals.previousPaths.length > 0 && (v = this.barCtx.getPreviousPath(l, c, !1)), b = b + g.line(p, f.y2) + f.pathWithRadius + g.line(x - o, f.y2) + y + y + \"z\", v = v + g.line(p, s) + y + y + y + y + y + g.line(p, s), d.config.chart.stacked && (this.barCtx.yArrj.push(f.y2), this.barCtx.yArrjF.push(Math.abs(s - f.y2)), this.barCtx.yArrjVal.push(this.barCtx.series[h][c])), {\n          pathTo: b,\n          pathFrom: v\n        };\n      }\n    }, {\n      key: \"getBarpaths\",\n      value: function value(t) {\n        var e = t.barYPosition,\n            i = t.barHeight,\n            a = t.x1,\n            s = t.x2,\n            r = t.strokeWidth,\n            o = t.series,\n            n = t.realIndex,\n            l = t.i,\n            h = t.j,\n            c = t.w,\n            d = new m(this.barCtx.ctx);\n        (r = Array.isArray(r) ? r[n] : r) || (r = 0);\n        var g = {\n          barHeight: i,\n          strokeWidth: r,\n          barYPosition: e,\n          x2: s,\n          x1: a\n        },\n            u = this.getRoundedBars(c, g, o, l, h),\n            f = d.move(a, e),\n            p = d.move(a, e);\n        c.globals.previousPaths.length > 0 && (p = this.barCtx.getPreviousPath(n, h, !1));\n        var x = e,\n            b = e + i,\n            v = d.line(a, b - r);\n        return f = f + d.line(u.x2, x) + u.pathWithRadius + d.line(u.x2, b - r) + v + v + \"z\", p = p + d.line(a, x) + v + v + v + v + v + d.line(a, x), c.config.chart.stacked && (this.barCtx.xArrj.push(u.x2), this.barCtx.xArrjF.push(Math.abs(a - u.x2)), this.barCtx.xArrjVal.push(this.barCtx.series[l][h])), {\n          pathTo: f,\n          pathFrom: p\n        };\n      }\n    }, {\n      key: \"getRoundedBars\",\n      value: function value(t, e, i, a, s) {\n        var r = new m(this.barCtx.ctx),\n            o = 0,\n            n = t.config.plotOptions.bar.borderRadius,\n            l = Array.isArray(n);\n        l ? o = n[a > n.length - 1 ? n.length - 1 : a] : o = n;\n\n        if (t.config.chart.stacked && i.length > 1 && a !== this.barCtx.radiusOnSeriesNumber && !l && (o = 0), this.barCtx.isHorizontal) {\n          var h = \"\",\n              c = e.x2;\n\n          if (Math.abs(e.x1 - e.x2) < o && (o = Math.abs(e.x1 - e.x2)), void 0 !== i[a][s] || null !== i[a][s]) {\n            var d = this.barCtx.isReversed ? i[a][s] > 0 : i[a][s] < 0;\n            d && (o *= -1), c -= o, h = r.quadraticCurve(c + o, e.barYPosition, c + o, e.barYPosition + (d ? -1 * o : o)) + r.line(c + o, e.barYPosition + e.barHeight - e.strokeWidth - (d ? -1 * o : o)) + r.quadraticCurve(c + o, e.barYPosition + e.barHeight - e.strokeWidth, c, e.barYPosition + e.barHeight - e.strokeWidth);\n          }\n\n          return {\n            pathWithRadius: h,\n            x2: c\n          };\n        }\n\n        var g = \"\",\n            u = e.y2;\n\n        if (Math.abs(e.y1 - e.y2) < o && (o = Math.abs(e.y1 - e.y2)), void 0 !== i[a][s] || null !== i[a][s]) {\n          var f = i[a][s] < 0;\n          f && (o *= -1), u += o, g = r.quadraticCurve(e.barXPosition, u - o, e.barXPosition + (f ? -1 * o : o), u - o) + r.line(e.barXPosition + e.barWidth - e.strokeWidth - (f ? -1 * o : o), u - o) + r.quadraticCurve(e.barXPosition + e.barWidth - e.strokeWidth, u - o, e.barXPosition + e.barWidth - e.strokeWidth, u);\n        }\n\n        return {\n          pathWithRadius: g,\n          y2: u\n        };\n      }\n    }, {\n      key: \"checkZeroSeries\",\n      value: function value(t) {\n        for (var e = t.series, i = this.w, a = 0; a < e.length; a++) {\n          for (var s = 0, r = 0; r < e[i.globals.maxValsInArrayIndex].length; r++) {\n            s += e[a][r];\n          }\n\n          0 === s && this.barCtx.zeroSerieses.push(a);\n        }\n\n        for (var o = e.length - 1; o >= 0; o--) {\n          this.barCtx.zeroSerieses.indexOf(o) > -1 && o === this.radiusOnSeriesNumber && (this.barCtx.radiusOnSeriesNumber -= 1);\n        }\n\n        for (var n = e.length - 1; n >= 0; n--) {\n          i.globals.collapsedSeriesIndices.indexOf(this.barCtx.radiusOnSeriesNumber) > -1 && (this.barCtx.radiusOnSeriesNumber -= 1);\n        }\n      }\n    }, {\n      key: \"getXForValue\",\n      value: function value(t, e) {\n        var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n            a = i ? e : null;\n        return null != t && (a = e + t / this.barCtx.invertedYRatio - 2 * (this.barCtx.isReversed ? t / this.barCtx.invertedYRatio : 0)), a;\n      }\n    }, {\n      key: \"getYForValue\",\n      value: function value(t, e) {\n        var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n            a = i ? e : null;\n        return null != t && (a = e - t / this.barCtx.yRatio[this.barCtx.yaxisIndex] + 2 * (this.barCtx.isReversed ? t / this.barCtx.yRatio[this.barCtx.yaxisIndex] : 0)), a;\n      }\n    }, {\n      key: \"getGoalValues\",\n      value: function value(t, e, i, a, s) {\n        var r = this,\n            n = this.w,\n            l = [];\n        return n.globals.seriesGoals[a] && n.globals.seriesGoals[a][s] && Array.isArray(n.globals.seriesGoals[a][s]) && n.globals.seriesGoals[a][s].forEach(function (a) {\n          var s;\n          l.push((o(s = {}, t, \"x\" === t ? r.getXForValue(a.value, e, !1) : r.getYForValue(a.value, i, !1)), o(s, \"attrs\", a), s));\n        }), l;\n      }\n    }, {\n      key: \"drawGoalLine\",\n      value: function value(t) {\n        var e = t.barXPosition,\n            i = t.barYPosition,\n            a = t.goalX,\n            s = t.goalY,\n            r = t.barWidth,\n            o = t.barHeight,\n            n = new m(this.barCtx.ctx),\n            l = n.group({\n          className: \"apexcharts-bar-goals-groups\"\n        }),\n            h = null;\n        return this.barCtx.isHorizontal ? Array.isArray(a) && a.forEach(function (t) {\n          var e = void 0 !== t.attrs.strokeHeight ? t.attrs.strokeHeight : o / 2,\n              a = i + e + o / 2;\n          h = n.drawLine(t.x, a - 2 * e, t.x, a, t.attrs.strokeColor ? t.attrs.strokeColor : void 0, t.attrs.strokeDashArray, t.attrs.strokeWidth ? t.attrs.strokeWidth : 2, t.attrs.strokeLineCap), l.add(h);\n        }) : Array.isArray(s) && s.forEach(function (t) {\n          var i = void 0 !== t.attrs.strokeWidth ? t.attrs.strokeWidth : r / 2,\n              a = e + i + r / 2;\n          h = n.drawLine(a - 2 * i, t.y, a, t.y, t.attrs.strokeColor ? t.attrs.strokeColor : void 0, t.attrs.strokeDashArray, t.attrs.strokeHeight ? t.attrs.strokeHeight : 2, t.attrs.strokeLineCap), l.add(h);\n        }), l;\n      }\n    }]), t;\n  }(),\n      F = function () {\n    function t(e, i) {\n      a(this, t), this.ctx = e, this.w = e.w;\n      var s = this.w;\n      this.barOptions = s.config.plotOptions.bar, this.isHorizontal = this.barOptions.horizontal, this.strokeWidth = s.config.stroke.width, this.isNullValue = !1, this.isRangeBar = s.globals.seriesRangeBar.length && this.isHorizontal, this.xyRatios = i, null !== this.xyRatios && (this.xRatio = i.xRatio, this.initialXRatio = i.initialXRatio, this.yRatio = i.yRatio, this.invertedXRatio = i.invertedXRatio, this.invertedYRatio = i.invertedYRatio, this.baseLineY = i.baseLineY, this.baseLineInvertedY = i.baseLineInvertedY), this.yaxisIndex = 0, this.seriesLen = 0, this.barHelpers = new Y(this);\n    }\n\n    return r(t, [{\n      key: \"draw\",\n      value: function value(t, i) {\n        var a = this.w,\n            s = new m(this.ctx),\n            r = new y(this.ctx, a);\n        t = r.getLogSeries(t), this.series = t, this.yRatio = r.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t);\n        var o = s.group({\n          \"class\": \"apexcharts-bar-series apexcharts-plot-series\"\n        });\n        a.config.dataLabels.enabled && this.totalItems > this.barOptions.dataLabels.maxItems && console.warn(\"WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.\");\n\n        for (var n = 0, l = 0; n < t.length; n++, l++) {\n          var h,\n              c,\n              d,\n              g,\n              u = void 0,\n              f = void 0,\n              p = [],\n              b = [],\n              v = a.globals.comboCharts ? i[n] : n,\n              w = s.group({\n            \"class\": \"apexcharts-series\",\n            rel: n + 1,\n            seriesName: x.escapeString(a.globals.seriesNames[v]),\n            \"data:realIndex\": v\n          });\n          this.ctx.series.addCollapsedClassToSeries(w, v), t[n].length > 0 && (this.visibleI = this.visibleI + 1);\n          var k = 0,\n              A = 0;\n          this.yRatio.length > 1 && (this.yaxisIndex = v), this.isReversed = a.config.yaxis[this.yaxisIndex] && a.config.yaxis[this.yaxisIndex].reversed;\n          var S = this.barHelpers.initialPositions();\n          f = S.y, k = S.barHeight, c = S.yDivision, g = S.zeroW, u = S.x, A = S.barWidth, h = S.xDivision, d = S.zeroH, this.horizontal || b.push(u + A / 2);\n\n          for (var C = s.group({\n            \"class\": \"apexcharts-datalabels\",\n            \"data:realIndex\": v\n          }), L = s.group({\n            \"class\": \"apexcharts-bar-goals-markers\",\n            style: \"pointer-events: none\"\n          }), P = 0; P < a.globals.dataPoints; P++) {\n            var M = this.barHelpers.getStrokeWidth(n, P, v),\n                T = null,\n                I = {\n              indexes: {\n                i: n,\n                j: P,\n                realIndex: v,\n                bc: l\n              },\n              x: u,\n              y: f,\n              strokeWidth: M,\n              elSeries: w\n            };\n            this.isHorizontal ? (T = this.drawBarPaths(e(e({}, I), {}, {\n              barHeight: k,\n              zeroW: g,\n              yDivision: c\n            })), A = this.series[n][P] / this.invertedYRatio) : (T = this.drawColumnPaths(e(e({}, I), {}, {\n              xDivision: h,\n              barWidth: A,\n              zeroH: d\n            })), k = this.series[n][P] / this.yRatio[this.yaxisIndex]);\n            var z = this.barHelpers.drawGoalLine({\n              barXPosition: T.barXPosition,\n              barYPosition: T.barYPosition,\n              goalX: T.goalX,\n              goalY: T.goalY,\n              barHeight: k,\n              barWidth: A\n            });\n            z && L.add(z), f = T.y, u = T.x, P > 0 && b.push(u + A / 2), p.push(f);\n            var X = this.barHelpers.getPathFillColor(t, n, P, v);\n            this.renderSeries({\n              realIndex: v,\n              pathFill: X,\n              j: P,\n              i: n,\n              pathFrom: T.pathFrom,\n              pathTo: T.pathTo,\n              strokeWidth: M,\n              elSeries: w,\n              x: u,\n              y: f,\n              series: t,\n              barHeight: k,\n              barWidth: A,\n              elDataLabelsWrap: C,\n              elGoalsMarkers: L,\n              visibleSeries: this.visibleI,\n              type: \"bar\"\n            });\n          }\n\n          a.globals.seriesXvalues[v] = b, a.globals.seriesYvalues[v] = p, o.add(w);\n        }\n\n        return o;\n      }\n    }, {\n      key: \"renderSeries\",\n      value: function value(t) {\n        var e = t.realIndex,\n            i = t.pathFill,\n            a = t.lineFill,\n            s = t.j,\n            r = t.i,\n            o = t.pathFrom,\n            n = t.pathTo,\n            l = t.strokeWidth,\n            h = t.elSeries,\n            c = t.x,\n            d = t.y,\n            g = t.y1,\n            u = t.y2,\n            f = t.series,\n            p = t.barHeight,\n            x = t.barWidth,\n            b = t.barYPosition,\n            y = t.elDataLabelsWrap,\n            w = t.elGoalsMarkers,\n            k = t.visibleSeries,\n            A = t.type,\n            S = this.w,\n            C = new m(this.ctx);\n        a || (a = this.barOptions.distributed ? S.globals.stroke.colors[s] : S.globals.stroke.colors[e]), S.config.series[r].data[s] && S.config.series[r].data[s].strokeColor && (a = S.config.series[r].data[s].strokeColor), this.isNullValue && (i = \"none\");\n        var L = s / S.config.chart.animations.animateGradually.delay * (S.config.chart.animations.speed / S.globals.dataPoints) / 2.4,\n            P = C.renderPaths({\n          i: r,\n          j: s,\n          realIndex: e,\n          pathFrom: o,\n          pathTo: n,\n          stroke: a,\n          strokeWidth: l,\n          strokeLineCap: S.config.stroke.lineCap,\n          fill: i,\n          animationDelay: L,\n          initialSpeed: S.config.chart.animations.speed,\n          dataChangeSpeed: S.config.chart.animations.dynamicAnimation.speed,\n          className: \"apexcharts-\".concat(A, \"-area\")\n        });\n        P.attr(\"clip-path\", \"url(#gridRectMask\".concat(S.globals.cuid, \")\"));\n        var M = S.config.forecastDataPoints;\n        M.count > 0 && s >= S.globals.dataPoints - M.count && (P.node.setAttribute(\"stroke-dasharray\", M.dashArray), P.node.setAttribute(\"stroke-width\", M.strokeWidth), P.node.setAttribute(\"fill-opacity\", M.fillOpacity)), void 0 !== g && void 0 !== u && (P.attr(\"data-range-y1\", g), P.attr(\"data-range-y2\", u)), new v(this.ctx).setSelectionFilter(P, e, s), h.add(P);\n        var T = new X(this).handleBarDataLabels({\n          x: c,\n          y: d,\n          y1: g,\n          y2: u,\n          i: r,\n          j: s,\n          series: f,\n          realIndex: e,\n          barHeight: p,\n          barWidth: x,\n          barYPosition: b,\n          renderedPath: P,\n          visibleSeries: k\n        });\n        return null !== T && y.add(T), h.add(y), w && h.add(w), h;\n      }\n    }, {\n      key: \"drawBarPaths\",\n      value: function value(t) {\n        var e = t.indexes,\n            i = t.barHeight,\n            a = t.strokeWidth,\n            s = t.zeroW,\n            r = t.x,\n            o = t.y,\n            n = t.yDivision,\n            l = t.elSeries,\n            h = this.w,\n            c = e.i,\n            d = e.j;\n        h.globals.isXNumeric && (o = (h.globals.seriesX[c][d] - h.globals.minX) / this.invertedXRatio - i);\n        var g = o + i * this.visibleI;\n        r = this.barHelpers.getXForValue(this.series[c][d], s);\n        var u = this.barHelpers.getBarpaths({\n          barYPosition: g,\n          barHeight: i,\n          x1: s,\n          x2: r,\n          strokeWidth: a,\n          series: this.series,\n          realIndex: e.realIndex,\n          i: c,\n          j: d,\n          w: h\n        });\n        return h.globals.isXNumeric || (o += n), this.barHelpers.barBackground({\n          j: d,\n          i: c,\n          y1: g - i * this.visibleI,\n          y2: i * this.seriesLen,\n          elSeries: l\n        }), {\n          pathTo: u.pathTo,\n          pathFrom: u.pathFrom,\n          x: r,\n          y: o,\n          goalX: this.barHelpers.getGoalValues(\"x\", s, null, c, d),\n          barYPosition: g\n        };\n      }\n    }, {\n      key: \"drawColumnPaths\",\n      value: function value(t) {\n        var e = t.indexes,\n            i = t.x,\n            a = t.y,\n            s = t.xDivision,\n            r = t.barWidth,\n            o = t.zeroH,\n            n = t.strokeWidth,\n            l = t.elSeries,\n            h = this.w,\n            c = e.realIndex,\n            d = e.i,\n            g = e.j,\n            u = e.bc;\n\n        if (h.globals.isXNumeric) {\n          var f = c;\n          h.globals.seriesX[c].length || (f = h.globals.maxValsInArrayIndex), i = (h.globals.seriesX[f][g] - h.globals.minX) / this.xRatio - r * this.seriesLen / 2;\n        }\n\n        var p = i + r * this.visibleI;\n        a = this.barHelpers.getYForValue(this.series[d][g], o);\n        var x = this.barHelpers.getColumnPaths({\n          barXPosition: p,\n          barWidth: r,\n          y1: o,\n          y2: a,\n          strokeWidth: n,\n          series: this.series,\n          realIndex: e.realIndex,\n          i: d,\n          j: g,\n          w: h\n        });\n        return h.globals.isXNumeric || (i += s), this.barHelpers.barBackground({\n          bc: u,\n          j: g,\n          i: d,\n          x1: p - n / 2 - r * this.visibleI,\n          x2: r * this.seriesLen + n / 2,\n          elSeries: l\n        }), {\n          pathTo: x.pathTo,\n          pathFrom: x.pathFrom,\n          x: i,\n          y: a,\n          goalY: this.barHelpers.getGoalValues(\"y\", null, o, d, g),\n          barXPosition: p\n        };\n      }\n    }, {\n      key: \"getPreviousPath\",\n      value: function value(t, e) {\n        for (var i, a = this.w, s = 0; s < a.globals.previousPaths.length; s++) {\n          var r = a.globals.previousPaths[s];\n          r.paths && r.paths.length > 0 && parseInt(r.realIndex, 10) === parseInt(t, 10) && void 0 !== a.globals.previousPaths[s].paths[e] && (i = a.globals.previousPaths[s].paths[e].d);\n        }\n\n        return i;\n      }\n    }]), t;\n  }(),\n      R = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w, this.months31 = [1, 3, 5, 7, 8, 10, 12], this.months30 = [2, 4, 6, 9, 11], this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n    }\n\n    return r(t, [{\n      key: \"isValidDate\",\n      value: function value(t) {\n        return !isNaN(this.parseDate(t));\n      }\n    }, {\n      key: \"getTimeStamp\",\n      value: function value(t) {\n        return Date.parse(t) ? this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toISOString().substr(0, 25)).getTime() : new Date(t).getTime() : t;\n      }\n    }, {\n      key: \"getDate\",\n      value: function value(t) {\n        return this.w.config.xaxis.labels.datetimeUTC ? new Date(new Date(t).toUTCString()) : new Date(t);\n      }\n    }, {\n      key: \"parseDate\",\n      value: function value(t) {\n        var e = Date.parse(t);\n        if (!isNaN(e)) return this.getTimeStamp(t);\n        var i = Date.parse(t.replace(/-/g, \"/\").replace(/[a-z]+/gi, \" \"));\n        return i = this.getTimeStamp(i);\n      }\n    }, {\n      key: \"parseDateWithTimezone\",\n      value: function value(t) {\n        return Date.parse(t.replace(/-/g, \"/\").replace(/[a-z]+/gi, \" \"));\n      }\n    }, {\n      key: \"formatDate\",\n      value: function value(t, e) {\n        var i = this.w.globals.locale,\n            a = this.w.config.xaxis.labels.datetimeUTC,\n            s = [\"\\0\"].concat(u(i.months)),\n            r = [\"\\x01\"].concat(u(i.shortMonths)),\n            o = [\"\\x02\"].concat(u(i.days)),\n            n = [\"\\x03\"].concat(u(i.shortDays));\n\n        function l(t, e) {\n          var i = t + \"\";\n\n          for (e = e || 2; i.length < e;) {\n            i = \"0\" + i;\n          }\n\n          return i;\n        }\n\n        var h = a ? t.getUTCFullYear() : t.getFullYear();\n        e = (e = (e = e.replace(/(^|[^\\\\])yyyy+/g, \"$1\" + h)).replace(/(^|[^\\\\])yy/g, \"$1\" + h.toString().substr(2, 2))).replace(/(^|[^\\\\])y/g, \"$1\" + h);\n        var c = (a ? t.getUTCMonth() : t.getMonth()) + 1;\n        e = (e = (e = (e = e.replace(/(^|[^\\\\])MMMM+/g, \"$1\" + s[0])).replace(/(^|[^\\\\])MMM/g, \"$1\" + r[0])).replace(/(^|[^\\\\])MM/g, \"$1\" + l(c))).replace(/(^|[^\\\\])M/g, \"$1\" + c);\n        var d = a ? t.getUTCDate() : t.getDate();\n        e = (e = (e = (e = e.replace(/(^|[^\\\\])dddd+/g, \"$1\" + o[0])).replace(/(^|[^\\\\])ddd/g, \"$1\" + n[0])).replace(/(^|[^\\\\])dd/g, \"$1\" + l(d))).replace(/(^|[^\\\\])d/g, \"$1\" + d);\n        var g = a ? t.getUTCHours() : t.getHours(),\n            f = g > 12 ? g - 12 : 0 === g ? 12 : g;\n        e = (e = (e = (e = e.replace(/(^|[^\\\\])HH+/g, \"$1\" + l(g))).replace(/(^|[^\\\\])H/g, \"$1\" + g)).replace(/(^|[^\\\\])hh+/g, \"$1\" + l(f))).replace(/(^|[^\\\\])h/g, \"$1\" + f);\n        var p = a ? t.getUTCMinutes() : t.getMinutes();\n        e = (e = e.replace(/(^|[^\\\\])mm+/g, \"$1\" + l(p))).replace(/(^|[^\\\\])m/g, \"$1\" + p);\n        var x = a ? t.getUTCSeconds() : t.getSeconds();\n        e = (e = e.replace(/(^|[^\\\\])ss+/g, \"$1\" + l(x))).replace(/(^|[^\\\\])s/g, \"$1\" + x);\n        var b = a ? t.getUTCMilliseconds() : t.getMilliseconds();\n        e = e.replace(/(^|[^\\\\])fff+/g, \"$1\" + l(b, 3)), b = Math.round(b / 10), e = e.replace(/(^|[^\\\\])ff/g, \"$1\" + l(b)), b = Math.round(b / 10);\n        var v = g < 12 ? \"AM\" : \"PM\";\n        e = (e = (e = e.replace(/(^|[^\\\\])f/g, \"$1\" + b)).replace(/(^|[^\\\\])TT+/g, \"$1\" + v)).replace(/(^|[^\\\\])T/g, \"$1\" + v.charAt(0));\n        var m = v.toLowerCase();\n        e = (e = e.replace(/(^|[^\\\\])tt+/g, \"$1\" + m)).replace(/(^|[^\\\\])t/g, \"$1\" + m.charAt(0));\n        var y = -t.getTimezoneOffset(),\n            w = a || !y ? \"Z\" : y > 0 ? \"+\" : \"-\";\n\n        if (!a) {\n          var k = (y = Math.abs(y)) % 60;\n          w += l(Math.floor(y / 60)) + \":\" + l(k);\n        }\n\n        e = e.replace(/(^|[^\\\\])K/g, \"$1\" + w);\n        var A = (a ? t.getUTCDay() : t.getDay()) + 1;\n        return e = (e = (e = (e = (e = e.replace(new RegExp(o[0], \"g\"), o[A])).replace(new RegExp(n[0], \"g\"), n[A])).replace(new RegExp(s[0], \"g\"), s[c])).replace(new RegExp(r[0], \"g\"), r[c])).replace(/\\\\(.)/g, \"$1\");\n      }\n    }, {\n      key: \"getTimeUnitsfromTimestamp\",\n      value: function value(t, e, i) {\n        var a = this.w;\n        void 0 !== a.config.xaxis.min && (t = a.config.xaxis.min), void 0 !== a.config.xaxis.max && (e = a.config.xaxis.max);\n        var s = this.getDate(t),\n            r = this.getDate(e),\n            o = this.formatDate(s, \"yyyy MM dd HH mm ss fff\").split(\" \"),\n            n = this.formatDate(r, \"yyyy MM dd HH mm ss fff\").split(\" \");\n        return {\n          minMillisecond: parseInt(o[6], 10),\n          maxMillisecond: parseInt(n[6], 10),\n          minSecond: parseInt(o[5], 10),\n          maxSecond: parseInt(n[5], 10),\n          minMinute: parseInt(o[4], 10),\n          maxMinute: parseInt(n[4], 10),\n          minHour: parseInt(o[3], 10),\n          maxHour: parseInt(n[3], 10),\n          minDate: parseInt(o[2], 10),\n          maxDate: parseInt(n[2], 10),\n          minMonth: parseInt(o[1], 10) - 1,\n          maxMonth: parseInt(n[1], 10) - 1,\n          minYear: parseInt(o[0], 10),\n          maxYear: parseInt(n[0], 10)\n        };\n      }\n    }, {\n      key: \"isLeapYear\",\n      value: function value(t) {\n        return t % 4 == 0 && t % 100 != 0 || t % 400 == 0;\n      }\n    }, {\n      key: \"calculcateLastDaysOfMonth\",\n      value: function value(t, e, i) {\n        return this.determineDaysOfMonths(t, e) - i;\n      }\n    }, {\n      key: \"determineDaysOfYear\",\n      value: function value(t) {\n        var e = 365;\n        return this.isLeapYear(t) && (e = 366), e;\n      }\n    }, {\n      key: \"determineRemainingDaysOfYear\",\n      value: function value(t, e, i) {\n        var a = this.daysCntOfYear[e] + i;\n        return e > 1 && this.isLeapYear() && a++, a;\n      }\n    }, {\n      key: \"determineDaysOfMonths\",\n      value: function value(t, e) {\n        var i = 30;\n\n        switch (t = x.monthMod(t), !0) {\n          case this.months30.indexOf(t) > -1:\n            2 === t && (i = this.isLeapYear(e) ? 29 : 28);\n            break;\n\n          case this.months31.indexOf(t) > -1:\n          default:\n            i = 31;\n        }\n\n        return i;\n      }\n    }]), t;\n  }(),\n      H = function (t) {\n    n(s, t);\n    var i = d(s);\n\n    function s() {\n      return a(this, s), i.apply(this, arguments);\n    }\n\n    return r(s, [{\n      key: \"draw\",\n      value: function value(t, i) {\n        var a = this.w,\n            s = new m(this.ctx);\n        this.rangeBarOptions = this.w.config.plotOptions.rangeBar, this.series = t, this.seriesRangeStart = a.globals.seriesRangeStart, this.seriesRangeEnd = a.globals.seriesRangeEnd, this.barHelpers.initVariables(t);\n\n        for (var r = s.group({\n          \"class\": \"apexcharts-rangebar-series apexcharts-plot-series\"\n        }), o = 0; o < t.length; o++) {\n          var n,\n              l,\n              h,\n              c = void 0,\n              d = void 0,\n              g = void 0,\n              u = a.globals.comboCharts ? i[o] : o,\n              f = s.group({\n            \"class\": \"apexcharts-series\",\n            seriesName: x.escapeString(a.globals.seriesNames[u]),\n            rel: o + 1,\n            \"data:realIndex\": u\n          });\n          this.ctx.series.addCollapsedClassToSeries(f, u), t[o].length > 0 && (this.visibleI = this.visibleI + 1);\n          var p = 0,\n              b = 0;\n          this.yRatio.length > 1 && (this.yaxisIndex = u);\n          var v = this.barHelpers.initialPositions();\n          d = v.y, h = v.zeroW, c = v.x, b = v.barWidth, n = v.xDivision, l = v.zeroH;\n\n          for (var y = s.group({\n            \"class\": \"apexcharts-datalabels\",\n            \"data:realIndex\": u\n          }), w = s.group({\n            \"class\": \"apexcharts-rangebar-goals-markers\",\n            style: \"pointer-events: none\"\n          }), k = 0; k < a.globals.dataPoints; k++) {\n            var A = this.barHelpers.getStrokeWidth(o, k, u),\n                S = this.seriesRangeStart[o][k],\n                C = this.seriesRangeEnd[o][k],\n                L = null,\n                P = null,\n                M = {\n              x: c,\n              y: d,\n              strokeWidth: A,\n              elSeries: f\n            };\n\n            if (g = v.yDivision, p = v.barHeight, this.isHorizontal) {\n              P = d + p * this.visibleI;\n              var T = this.seriesLen;\n              a.config.plotOptions.bar.rangeBarGroupRows && (T = 1);\n              var I = (g - p * T) / 2;\n              if (void 0 === a.config.series[o].data[k]) break;\n\n              if (a.config.series[o].data[k].x) {\n                var z = this.detectOverlappingBars({\n                  i: o,\n                  j: k,\n                  barYPosition: P,\n                  srty: I,\n                  barHeight: p,\n                  yDivision: g,\n                  initPositions: v\n                });\n                p = z.barHeight, P = z.barYPosition;\n              }\n\n              b = (L = this.drawRangeBarPaths(e({\n                indexes: {\n                  i: o,\n                  j: k,\n                  realIndex: u\n                },\n                barHeight: p,\n                barYPosition: P,\n                zeroW: h,\n                yDivision: g,\n                y1: S,\n                y2: C\n              }, M))).barWidth;\n            } else p = (L = this.drawRangeColumnPaths(e({\n              indexes: {\n                i: o,\n                j: k,\n                realIndex: u\n              },\n              zeroH: l,\n              barWidth: b,\n              xDivision: n\n            }, M))).barHeight;\n\n            var X = this.barHelpers.drawGoalLine({\n              barXPosition: L.barXPosition,\n              barYPosition: P,\n              goalX: L.goalX,\n              goalY: L.goalY,\n              barHeight: p,\n              barWidth: b\n            });\n            X && w.add(X), d = L.y, c = L.x;\n            var E = this.barHelpers.getPathFillColor(t, o, k, u),\n                Y = a.globals.stroke.colors[u];\n            this.renderSeries({\n              realIndex: u,\n              pathFill: E,\n              lineFill: Y,\n              j: k,\n              i: o,\n              x: c,\n              y: d,\n              y1: S,\n              y2: C,\n              pathFrom: L.pathFrom,\n              pathTo: L.pathTo,\n              strokeWidth: A,\n              elSeries: f,\n              series: t,\n              barHeight: p,\n              barYPosition: P,\n              barWidth: b,\n              elDataLabelsWrap: y,\n              elGoalsMarkers: w,\n              visibleSeries: this.visibleI,\n              type: \"rangebar\"\n            });\n          }\n\n          r.add(f);\n        }\n\n        return r;\n      }\n    }, {\n      key: \"detectOverlappingBars\",\n      value: function value(t) {\n        var e = t.i,\n            i = t.j,\n            a = t.barYPosition,\n            s = t.srty,\n            r = t.barHeight,\n            o = t.yDivision,\n            n = t.initPositions,\n            l = this.w,\n            h = [],\n            c = l.config.series[e].data[i].rangeName,\n            d = l.config.series[e].data[i].x,\n            g = l.globals.labels.indexOf(d),\n            u = l.globals.seriesRangeBar[e].findIndex(function (t) {\n          return t.x === d && t.overlaps.length > 0;\n        });\n        return a = l.config.plotOptions.bar.rangeBarGroupRows ? s + o * g : s + r * this.visibleI + o * g, u > -1 && !l.config.plotOptions.bar.rangeBarOverlap && (h = l.globals.seriesRangeBar[e][u].overlaps).indexOf(c) > -1 && (a = (r = n.barHeight / h.length) * this.visibleI + o * (100 - parseInt(this.barOptions.barHeight, 10)) / 100 / 2 + r * (this.visibleI + h.indexOf(c)) + o * g), {\n          barYPosition: a,\n          barHeight: r\n        };\n      }\n    }, {\n      key: \"drawRangeColumnPaths\",\n      value: function value(t) {\n        var e = t.indexes,\n            i = t.x;\n        t.strokeWidth;\n        var a = t.xDivision,\n            s = t.barWidth,\n            r = t.zeroH,\n            o = this.w,\n            n = e.i,\n            l = e.j,\n            h = this.yRatio[this.yaxisIndex],\n            c = e.realIndex,\n            d = this.getRangeValue(c, l),\n            g = Math.min(d.start, d.end),\n            u = Math.max(d.start, d.end);\n        o.globals.isXNumeric && (i = (o.globals.seriesX[n][l] - o.globals.minX) / this.xRatio - s / 2);\n        var f = i + s * this.visibleI;\n        void 0 === this.series[n][l] || null === this.series[n][l] ? g = r : (g = r - g / h, u = r - u / h);\n        var p = Math.abs(u - g),\n            x = this.barHelpers.getColumnPaths({\n          barXPosition: f,\n          barWidth: s,\n          y1: g,\n          y2: u,\n          strokeWidth: this.strokeWidth,\n          series: this.seriesRangeEnd,\n          realIndex: e.realIndex,\n          i: c,\n          j: l,\n          w: o\n        });\n        return o.globals.isXNumeric || (i += a), {\n          pathTo: x.pathTo,\n          pathFrom: x.pathFrom,\n          barHeight: p,\n          x: i,\n          y: u,\n          goalY: this.barHelpers.getGoalValues(\"y\", null, r, n, l),\n          barXPosition: f\n        };\n      }\n    }, {\n      key: \"drawRangeBarPaths\",\n      value: function value(t) {\n        var e = t.indexes,\n            i = t.y,\n            a = t.y1,\n            s = t.y2,\n            r = t.yDivision,\n            o = t.barHeight,\n            n = t.barYPosition,\n            l = t.zeroW,\n            h = this.w,\n            c = l + a / this.invertedYRatio,\n            d = l + s / this.invertedYRatio,\n            g = Math.abs(d - c),\n            u = this.barHelpers.getBarpaths({\n          barYPosition: n,\n          barHeight: o,\n          x1: c,\n          x2: d,\n          strokeWidth: this.strokeWidth,\n          series: this.seriesRangeEnd,\n          i: e.realIndex,\n          realIndex: e.realIndex,\n          j: e.j,\n          w: h\n        });\n        return h.globals.isXNumeric || (i += r), {\n          pathTo: u.pathTo,\n          pathFrom: u.pathFrom,\n          barWidth: g,\n          x: d,\n          goalX: this.barHelpers.getGoalValues(\"x\", l, null, e.realIndex, e.j),\n          y: i\n        };\n      }\n    }, {\n      key: \"getRangeValue\",\n      value: function value(t, e) {\n        var i = this.w;\n        return {\n          start: i.globals.seriesRangeStart[t][e],\n          end: i.globals.seriesRangeEnd[t][e]\n        };\n      }\n    }, {\n      key: \"getTooltipValues\",\n      value: function value(t) {\n        var e = t.ctx,\n            i = t.seriesIndex,\n            a = t.dataPointIndex,\n            s = t.y1,\n            r = t.y2,\n            o = t.w,\n            n = o.globals.seriesRangeStart[i][a],\n            l = o.globals.seriesRangeEnd[i][a],\n            h = o.globals.labels[a],\n            c = o.config.series[i].name ? o.config.series[i].name : \"\",\n            d = o.config.tooltip.y.formatter,\n            g = o.config.tooltip.y.title.formatter,\n            u = {\n          w: o,\n          seriesIndex: i,\n          dataPointIndex: a,\n          start: n,\n          end: l\n        };\n        \"function\" == typeof g && (c = g(c, u)), Number.isFinite(s) && Number.isFinite(r) && (n = s, l = r, o.config.series[i].data[a].x && (h = o.config.series[i].data[a].x + \":\"), \"function\" == typeof d && (h = d(h, u)));\n        var f = \"\",\n            p = \"\",\n            x = o.globals.colors[i];\n        if (void 0 === o.config.tooltip.x.formatter) {\n          if (\"datetime\" === o.config.xaxis.type) {\n            var b = new R(e);\n            f = b.formatDate(b.getDate(n), o.config.tooltip.x.format), p = b.formatDate(b.getDate(l), o.config.tooltip.x.format);\n          } else f = n, p = l;\n        } else f = o.config.tooltip.x.formatter(n), p = o.config.tooltip.x.formatter(l);\n        return {\n          start: n,\n          end: l,\n          startVal: f,\n          endVal: p,\n          ylabel: h,\n          color: x,\n          seriesName: c\n        };\n      }\n    }, {\n      key: \"buildCustomTooltipHTML\",\n      value: function value(t) {\n        var e = t.color,\n            i = t.seriesName;\n        return '<div class=\"apexcharts-tooltip-rangebar\"><div> <span class=\"series-name\" style=\"color: ' + e + '\">' + (i || \"\") + '</span></div><div> <span class=\"category\">' + t.ylabel + ' </span> <span class=\"value start-value\">' + t.start + '</span> <span class=\"separator\">-</span> <span class=\"value end-value\">' + t.end + \"</span></div></div>\";\n      }\n    }]), s;\n  }(F),\n      D = function () {\n    function t(e) {\n      a(this, t), this.opts = e;\n    }\n\n    return r(t, [{\n      key: \"line\",\n      value: function value() {\n        return {\n          chart: {\n            animations: {\n              easing: \"swing\"\n            }\n          },\n          dataLabels: {\n            enabled: !1\n          },\n          stroke: {\n            width: 5,\n            curve: \"straight\"\n          },\n          markers: {\n            size: 0,\n            hover: {\n              sizeOffset: 6\n            }\n          },\n          xaxis: {\n            crosshairs: {\n              width: 1\n            }\n          }\n        };\n      }\n    }, {\n      key: \"sparkline\",\n      value: function value(t) {\n        this.opts.yaxis[0].show = !1, this.opts.yaxis[0].title.text = \"\", this.opts.yaxis[0].axisBorder.show = !1, this.opts.yaxis[0].axisTicks.show = !1, this.opts.yaxis[0].floating = !0;\n        return x.extend(t, {\n          grid: {\n            show: !1,\n            padding: {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0\n            }\n          },\n          legend: {\n            show: !1\n          },\n          xaxis: {\n            labels: {\n              show: !1\n            },\n            tooltip: {\n              enabled: !1\n            },\n            axisBorder: {\n              show: !1\n            },\n            axisTicks: {\n              show: !1\n            }\n          },\n          chart: {\n            toolbar: {\n              show: !1\n            },\n            zoom: {\n              enabled: !1\n            }\n          },\n          dataLabels: {\n            enabled: !1\n          }\n        });\n      }\n    }, {\n      key: \"bar\",\n      value: function value() {\n        return {\n          chart: {\n            stacked: !1,\n            animations: {\n              easing: \"swing\"\n            }\n          },\n          plotOptions: {\n            bar: {\n              dataLabels: {\n                position: \"center\"\n              }\n            }\n          },\n          dataLabels: {\n            style: {\n              colors: [\"#fff\"]\n            },\n            background: {\n              enabled: !1\n            }\n          },\n          stroke: {\n            width: 0,\n            lineCap: \"round\"\n          },\n          fill: {\n            opacity: .85\n          },\n          legend: {\n            markers: {\n              shape: \"square\",\n              radius: 2,\n              size: 8\n            }\n          },\n          tooltip: {\n            shared: !1,\n            intersect: !0\n          },\n          xaxis: {\n            tooltip: {\n              enabled: !1\n            },\n            tickPlacement: \"between\",\n            crosshairs: {\n              width: \"barWidth\",\n              position: \"back\",\n              fill: {\n                type: \"gradient\"\n              },\n              dropShadow: {\n                enabled: !1\n              },\n              stroke: {\n                width: 0\n              }\n            }\n          }\n        };\n      }\n    }, {\n      key: \"candlestick\",\n      value: function value() {\n        var t = this;\n        return {\n          stroke: {\n            width: 1,\n            colors: [\"#333\"]\n          },\n          fill: {\n            opacity: 1\n          },\n          dataLabels: {\n            enabled: !1\n          },\n          tooltip: {\n            shared: !0,\n            custom: function custom(e) {\n              var i = e.seriesIndex,\n                  a = e.dataPointIndex,\n                  s = e.w;\n              return t._getBoxTooltip(s, i, a, [\"Open\", \"High\", \"\", \"Low\", \"Close\"], \"candlestick\");\n            }\n          },\n          states: {\n            active: {\n              filter: {\n                type: \"none\"\n              }\n            }\n          },\n          xaxis: {\n            crosshairs: {\n              width: 1\n            }\n          }\n        };\n      }\n    }, {\n      key: \"boxPlot\",\n      value: function value() {\n        var t = this;\n        return {\n          chart: {\n            animations: {\n              dynamicAnimation: {\n                enabled: !1\n              }\n            }\n          },\n          stroke: {\n            width: 1,\n            colors: [\"#24292e\"]\n          },\n          dataLabels: {\n            enabled: !1\n          },\n          tooltip: {\n            shared: !0,\n            custom: function custom(e) {\n              var i = e.seriesIndex,\n                  a = e.dataPointIndex,\n                  s = e.w;\n              return t._getBoxTooltip(s, i, a, [\"Minimum\", \"Q1\", \"Median\", \"Q3\", \"Maximum\"], \"boxPlot\");\n            }\n          },\n          markers: {\n            size: 5,\n            strokeWidth: 1,\n            strokeColors: \"#111\"\n          },\n          xaxis: {\n            crosshairs: {\n              width: 1\n            }\n          }\n        };\n      }\n    }, {\n      key: \"rangeBar\",\n      value: function value() {\n        return {\n          stroke: {\n            width: 0,\n            lineCap: \"square\"\n          },\n          plotOptions: {\n            bar: {\n              borderRadius: 0,\n              dataLabels: {\n                position: \"center\"\n              }\n            }\n          },\n          dataLabels: {\n            enabled: !1,\n            formatter: function formatter(t, e) {\n              e.ctx;\n              var i = e.seriesIndex,\n                  a = e.dataPointIndex,\n                  s = e.w,\n                  r = s.globals.seriesRangeStart[i][a];\n              return s.globals.seriesRangeEnd[i][a] - r;\n            },\n            background: {\n              enabled: !1\n            },\n            style: {\n              colors: [\"#fff\"]\n            }\n          },\n          tooltip: {\n            shared: !1,\n            followCursor: !0,\n            custom: function custom(t) {\n              return t.w.config.plotOptions && t.w.config.plotOptions.bar && t.w.config.plotOptions.bar.horizontal ? function (t) {\n                var e = new H(t.ctx, null),\n                    i = e.getTooltipValues(t),\n                    a = i.color,\n                    s = i.seriesName,\n                    r = i.ylabel,\n                    o = i.startVal,\n                    n = i.endVal;\n                return e.buildCustomTooltipHTML({\n                  color: a,\n                  seriesName: s,\n                  ylabel: r,\n                  start: o,\n                  end: n\n                });\n              }(t) : function (t) {\n                var e = new H(t.ctx, null),\n                    i = e.getTooltipValues(t),\n                    a = i.color,\n                    s = i.seriesName,\n                    r = i.ylabel,\n                    o = i.start,\n                    n = i.end;\n                return e.buildCustomTooltipHTML({\n                  color: a,\n                  seriesName: s,\n                  ylabel: r,\n                  start: o,\n                  end: n\n                });\n              }(t);\n            }\n          },\n          xaxis: {\n            tickPlacement: \"between\",\n            tooltip: {\n              enabled: !1\n            },\n            crosshairs: {\n              stroke: {\n                width: 0\n              }\n            }\n          }\n        };\n      }\n    }, {\n      key: \"area\",\n      value: function value() {\n        return {\n          stroke: {\n            width: 4,\n            fill: {\n              type: \"solid\",\n              gradient: {\n                inverseColors: !1,\n                shade: \"light\",\n                type: \"vertical\",\n                opacityFrom: .65,\n                opacityTo: .5,\n                stops: [0, 100, 100]\n              }\n            }\n          },\n          fill: {\n            type: \"gradient\",\n            gradient: {\n              inverseColors: !1,\n              shade: \"light\",\n              type: \"vertical\",\n              opacityFrom: .65,\n              opacityTo: .5,\n              stops: [0, 100, 100]\n            }\n          },\n          markers: {\n            size: 0,\n            hover: {\n              sizeOffset: 6\n            }\n          },\n          tooltip: {\n            followCursor: !1\n          }\n        };\n      }\n    }, {\n      key: \"brush\",\n      value: function value(t) {\n        return x.extend(t, {\n          chart: {\n            toolbar: {\n              autoSelected: \"selection\",\n              show: !1\n            },\n            zoom: {\n              enabled: !1\n            }\n          },\n          dataLabels: {\n            enabled: !1\n          },\n          stroke: {\n            width: 1\n          },\n          tooltip: {\n            enabled: !1\n          },\n          xaxis: {\n            tooltip: {\n              enabled: !1\n            }\n          }\n        });\n      }\n    }, {\n      key: \"stacked100\",\n      value: function value(t) {\n        t.dataLabels = t.dataLabels || {}, t.dataLabels.formatter = t.dataLabels.formatter || void 0;\n        var e = t.dataLabels.formatter;\n        return t.yaxis.forEach(function (e, i) {\n          t.yaxis[i].min = 0, t.yaxis[i].max = 100;\n        }), \"bar\" === t.chart.type && (t.dataLabels.formatter = e || function (t) {\n          return \"number\" == typeof t && t ? t.toFixed(0) + \"%\" : t;\n        }), t;\n      }\n    }, {\n      key: \"convertCatToNumeric\",\n      value: function value(t) {\n        return t.xaxis.convertedCatToNumeric = !0, t;\n      }\n    }, {\n      key: \"convertCatToNumericXaxis\",\n      value: function value(t, e, i) {\n        t.xaxis.type = \"numeric\", t.xaxis.labels = t.xaxis.labels || {}, t.xaxis.labels.formatter = t.xaxis.labels.formatter || function (t) {\n          return x.isNumber(t) ? Math.floor(t) : t;\n        };\n        var a = t.xaxis.labels.formatter,\n            s = t.xaxis.categories && t.xaxis.categories.length ? t.xaxis.categories : t.labels;\n        return i && i.length && (s = i.map(function (t) {\n          return Array.isArray(t) ? t : String(t);\n        })), s && s.length && (t.xaxis.labels.formatter = function (t) {\n          return x.isNumber(t) ? a(s[Math.floor(t) - 1]) : a(t);\n        }), t.xaxis.categories = [], t.labels = [], t.xaxis.tickAmount = t.xaxis.tickAmount || \"dataPoints\", t;\n      }\n    }, {\n      key: \"bubble\",\n      value: function value() {\n        return {\n          dataLabels: {\n            style: {\n              colors: [\"#fff\"]\n            }\n          },\n          tooltip: {\n            shared: !1,\n            intersect: !0\n          },\n          xaxis: {\n            crosshairs: {\n              width: 0\n            }\n          },\n          fill: {\n            type: \"solid\",\n            gradient: {\n              shade: \"light\",\n              inverse: !0,\n              shadeIntensity: .55,\n              opacityFrom: .4,\n              opacityTo: .8\n            }\n          }\n        };\n      }\n    }, {\n      key: \"scatter\",\n      value: function value() {\n        return {\n          dataLabels: {\n            enabled: !1\n          },\n          tooltip: {\n            shared: !1,\n            intersect: !0\n          },\n          markers: {\n            size: 6,\n            strokeWidth: 1,\n            hover: {\n              sizeOffset: 2\n            }\n          }\n        };\n      }\n    }, {\n      key: \"heatmap\",\n      value: function value() {\n        return {\n          chart: {\n            stacked: !1\n          },\n          fill: {\n            opacity: 1\n          },\n          dataLabels: {\n            style: {\n              colors: [\"#fff\"]\n            }\n          },\n          stroke: {\n            colors: [\"#fff\"]\n          },\n          tooltip: {\n            followCursor: !0,\n            marker: {\n              show: !1\n            },\n            x: {\n              show: !1\n            }\n          },\n          legend: {\n            position: \"top\",\n            markers: {\n              shape: \"square\",\n              size: 10,\n              offsetY: 2\n            }\n          },\n          grid: {\n            padding: {\n              right: 20\n            }\n          }\n        };\n      }\n    }, {\n      key: \"treemap\",\n      value: function value() {\n        return {\n          chart: {\n            zoom: {\n              enabled: !1\n            }\n          },\n          dataLabels: {\n            style: {\n              fontSize: 14,\n              fontWeight: 600,\n              colors: [\"#fff\"]\n            }\n          },\n          stroke: {\n            show: !0,\n            width: 2,\n            colors: [\"#fff\"]\n          },\n          legend: {\n            show: !1\n          },\n          fill: {\n            gradient: {\n              stops: [0, 100]\n            }\n          },\n          tooltip: {\n            followCursor: !0,\n            x: {\n              show: !1\n            }\n          },\n          grid: {\n            padding: {\n              left: 0,\n              right: 0\n            }\n          },\n          xaxis: {\n            crosshairs: {\n              show: !1\n            },\n            tooltip: {\n              enabled: !1\n            }\n          }\n        };\n      }\n    }, {\n      key: \"pie\",\n      value: function value() {\n        return {\n          chart: {\n            toolbar: {\n              show: !1\n            }\n          },\n          plotOptions: {\n            pie: {\n              donut: {\n                labels: {\n                  show: !1\n                }\n              }\n            }\n          },\n          dataLabels: {\n            formatter: function formatter(t) {\n              return t.toFixed(1) + \"%\";\n            },\n            style: {\n              colors: [\"#fff\"]\n            },\n            background: {\n              enabled: !1\n            },\n            dropShadow: {\n              enabled: !0\n            }\n          },\n          stroke: {\n            colors: [\"#fff\"]\n          },\n          fill: {\n            opacity: 1,\n            gradient: {\n              shade: \"light\",\n              stops: [0, 100]\n            }\n          },\n          tooltip: {\n            theme: \"dark\",\n            fillSeriesColor: !0\n          },\n          legend: {\n            position: \"right\"\n          }\n        };\n      }\n    }, {\n      key: \"donut\",\n      value: function value() {\n        return {\n          chart: {\n            toolbar: {\n              show: !1\n            }\n          },\n          dataLabels: {\n            formatter: function formatter(t) {\n              return t.toFixed(1) + \"%\";\n            },\n            style: {\n              colors: [\"#fff\"]\n            },\n            background: {\n              enabled: !1\n            },\n            dropShadow: {\n              enabled: !0\n            }\n          },\n          stroke: {\n            colors: [\"#fff\"]\n          },\n          fill: {\n            opacity: 1,\n            gradient: {\n              shade: \"light\",\n              shadeIntensity: .35,\n              stops: [80, 100],\n              opacityFrom: 1,\n              opacityTo: 1\n            }\n          },\n          tooltip: {\n            theme: \"dark\",\n            fillSeriesColor: !0\n          },\n          legend: {\n            position: \"right\"\n          }\n        };\n      }\n    }, {\n      key: \"polarArea\",\n      value: function value() {\n        return this.opts.yaxis[0].tickAmount = this.opts.yaxis[0].tickAmount ? this.opts.yaxis[0].tickAmount : 6, {\n          chart: {\n            toolbar: {\n              show: !1\n            }\n          },\n          dataLabels: {\n            formatter: function formatter(t) {\n              return t.toFixed(1) + \"%\";\n            },\n            enabled: !1\n          },\n          stroke: {\n            show: !0,\n            width: 2\n          },\n          fill: {\n            opacity: .7\n          },\n          tooltip: {\n            theme: \"dark\",\n            fillSeriesColor: !0\n          },\n          legend: {\n            position: \"right\"\n          }\n        };\n      }\n    }, {\n      key: \"radar\",\n      value: function value() {\n        return this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels.offsetY ? this.opts.yaxis[0].labels.offsetY : 6, {\n          dataLabels: {\n            enabled: !1,\n            style: {\n              fontSize: \"11px\"\n            }\n          },\n          stroke: {\n            width: 2\n          },\n          markers: {\n            size: 3,\n            strokeWidth: 1,\n            strokeOpacity: 1\n          },\n          fill: {\n            opacity: .2\n          },\n          tooltip: {\n            shared: !1,\n            intersect: !0,\n            followCursor: !0\n          },\n          grid: {\n            show: !1\n          },\n          xaxis: {\n            labels: {\n              formatter: function formatter(t) {\n                return t;\n              },\n              style: {\n                colors: [\"#a8a8a8\"],\n                fontSize: \"11px\"\n              }\n            },\n            tooltip: {\n              enabled: !1\n            },\n            crosshairs: {\n              show: !1\n            }\n          }\n        };\n      }\n    }, {\n      key: \"radialBar\",\n      value: function value() {\n        return {\n          chart: {\n            animations: {\n              dynamicAnimation: {\n                enabled: !0,\n                speed: 800\n              }\n            },\n            toolbar: {\n              show: !1\n            }\n          },\n          fill: {\n            gradient: {\n              shade: \"dark\",\n              shadeIntensity: .4,\n              inverseColors: !1,\n              type: \"diagonal2\",\n              opacityFrom: 1,\n              opacityTo: 1,\n              stops: [70, 98, 100]\n            }\n          },\n          legend: {\n            show: !1,\n            position: \"right\"\n          },\n          tooltip: {\n            enabled: !1,\n            fillSeriesColor: !0\n          }\n        };\n      }\n    }, {\n      key: \"_getBoxTooltip\",\n      value: function value(t, e, i, a, s) {\n        var r = t.globals.seriesCandleO[e][i],\n            o = t.globals.seriesCandleH[e][i],\n            n = t.globals.seriesCandleM[e][i],\n            l = t.globals.seriesCandleL[e][i],\n            h = t.globals.seriesCandleC[e][i];\n        return t.config.series[e].type && t.config.series[e].type !== s ? '<div class=\"apexcharts-custom-tooltip\">\\n          '.concat(t.config.series[e].name ? t.config.series[e].name : \"series-\" + (e + 1), \": <strong>\").concat(t.globals.series[e][i], \"</strong>\\n        </div>\") : '<div class=\"apexcharts-tooltip-box apexcharts-tooltip-'.concat(t.config.chart.type, '\">') + \"<div>\".concat(a[0], ': <span class=\"value\">') + r + \"</span></div>\" + \"<div>\".concat(a[1], ': <span class=\"value\">') + o + \"</span></div>\" + (n ? \"<div>\".concat(a[2], ': <span class=\"value\">') + n + \"</span></div>\" : \"\") + \"<div>\".concat(a[3], ': <span class=\"value\">') + l + \"</span></div>\" + \"<div>\".concat(a[4], ': <span class=\"value\">') + h + \"</span></div></div>\";\n      }\n    }]), t;\n  }(),\n      N = function () {\n    function t(e) {\n      a(this, t), this.opts = e;\n    }\n\n    return r(t, [{\n      key: \"init\",\n      value: function value(t) {\n        var e = t.responsiveOverride,\n            a = this.opts,\n            s = new L(),\n            r = new D(a);\n        this.chartType = a.chart.type, \"histogram\" === this.chartType && (a.chart.type = \"bar\", a = x.extend({\n          plotOptions: {\n            bar: {\n              columnWidth: \"99.99%\"\n            }\n          }\n        }, a)), a = this.extendYAxis(a), a = this.extendAnnotations(a);\n        var o = s.init(),\n            n = {};\n\n        if (a && \"object\" === i(a)) {\n          var l = {};\n          l = -1 !== [\"line\", \"area\", \"bar\", \"candlestick\", \"boxPlot\", \"rangeBar\", \"histogram\", \"bubble\", \"scatter\", \"heatmap\", \"treemap\", \"pie\", \"polarArea\", \"donut\", \"radar\", \"radialBar\"].indexOf(a.chart.type) ? r[a.chart.type]() : r.line(), a.chart.brush && a.chart.brush.enabled && (l = r.brush(l)), a.chart.stacked && \"100%\" === a.chart.stackType && (a = r.stacked100(a)), this.checkForDarkTheme(window.Apex), this.checkForDarkTheme(a), a.xaxis = a.xaxis || window.Apex.xaxis || {}, e || (a.xaxis.convertedCatToNumeric = !1), ((a = this.checkForCatToNumericXAxis(this.chartType, l, a)).chart.sparkline && a.chart.sparkline.enabled || window.Apex.chart && window.Apex.chart.sparkline && window.Apex.chart.sparkline.enabled) && (l = r.sparkline(l)), n = x.extend(o, l);\n        }\n\n        var h = x.extend(n, window.Apex);\n        return o = x.extend(h, a), o = this.handleUserInputErrors(o);\n      }\n    }, {\n      key: \"checkForCatToNumericXAxis\",\n      value: function value(t, e, i) {\n        var a = new D(i),\n            s = (\"bar\" === t || \"boxPlot\" === t) && i.plotOptions && i.plotOptions.bar && i.plotOptions.bar.horizontal,\n            r = \"pie\" === t || \"polarArea\" === t || \"donut\" === t || \"radar\" === t || \"radialBar\" === t || \"heatmap\" === t,\n            o = \"datetime\" !== i.xaxis.type && \"numeric\" !== i.xaxis.type,\n            n = i.xaxis.tickPlacement ? i.xaxis.tickPlacement : e.xaxis && e.xaxis.tickPlacement;\n        return s || r || !o || \"between\" === n || (i = a.convertCatToNumeric(i)), i;\n      }\n    }, {\n      key: \"extendYAxis\",\n      value: function value(t, e) {\n        var i = new L();\n        (void 0 === t.yaxis || !t.yaxis || Array.isArray(t.yaxis) && 0 === t.yaxis.length) && (t.yaxis = {}), t.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array && (t.yaxis = x.extend(t.yaxis, window.Apex.yaxis)), t.yaxis.constructor !== Array ? t.yaxis = [x.extend(i.yAxis, t.yaxis)] : t.yaxis = x.extendArray(t.yaxis, i.yAxis);\n        var a = !1;\n        t.yaxis.forEach(function (t) {\n          t.logarithmic && (a = !0);\n        });\n        var s = t.series;\n        return e && !s && (s = e.config.series), a && s.length !== t.yaxis.length && s.length && (t.yaxis = s.map(function (e, a) {\n          if (e.name || (s[a].name = \"series-\".concat(a + 1)), t.yaxis[a]) return t.yaxis[a].seriesName = s[a].name, t.yaxis[a];\n          var r = x.extend(i.yAxis, t.yaxis[0]);\n          return r.show = !1, r;\n        })), a && s.length > 1 && s.length !== t.yaxis.length && console.warn(\"A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both.\"), t;\n      }\n    }, {\n      key: \"extendAnnotations\",\n      value: function value(t) {\n        return void 0 === t.annotations && (t.annotations = {}, t.annotations.yaxis = [], t.annotations.xaxis = [], t.annotations.points = []), t = this.extendYAxisAnnotations(t), t = this.extendXAxisAnnotations(t), t = this.extendPointAnnotations(t);\n      }\n    }, {\n      key: \"extendYAxisAnnotations\",\n      value: function value(t) {\n        var e = new L();\n        return t.annotations.yaxis = x.extendArray(void 0 !== t.annotations.yaxis ? t.annotations.yaxis : [], e.yAxisAnnotation), t;\n      }\n    }, {\n      key: \"extendXAxisAnnotations\",\n      value: function value(t) {\n        var e = new L();\n        return t.annotations.xaxis = x.extendArray(void 0 !== t.annotations.xaxis ? t.annotations.xaxis : [], e.xAxisAnnotation), t;\n      }\n    }, {\n      key: \"extendPointAnnotations\",\n      value: function value(t) {\n        var e = new L();\n        return t.annotations.points = x.extendArray(void 0 !== t.annotations.points ? t.annotations.points : [], e.pointAnnotation), t;\n      }\n    }, {\n      key: \"checkForDarkTheme\",\n      value: function value(t) {\n        t.theme && \"dark\" === t.theme.mode && (t.tooltip || (t.tooltip = {}), \"light\" !== t.tooltip.theme && (t.tooltip.theme = \"dark\"), t.chart.foreColor || (t.chart.foreColor = \"#f6f7f8\"), t.chart.background || (t.chart.background = \"#424242\"), t.theme.palette || (t.theme.palette = \"palette4\"));\n      }\n    }, {\n      key: \"handleUserInputErrors\",\n      value: function value(t) {\n        var e = t;\n        if (e.tooltip.shared && e.tooltip.intersect) throw new Error(\"tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.\");\n\n        if (\"bar\" === e.chart.type && e.plotOptions.bar.horizontal) {\n          if (e.yaxis.length > 1) throw new Error(\"Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false\");\n          e.yaxis[0].reversed && (e.yaxis[0].opposite = !0), e.xaxis.tooltip.enabled = !1, e.yaxis[0].tooltip.enabled = !1, e.chart.zoom.enabled = !1;\n        }\n\n        return \"bar\" !== e.chart.type && \"rangeBar\" !== e.chart.type || e.tooltip.shared && \"barWidth\" === e.xaxis.crosshairs.width && e.series.length > 1 && (e.xaxis.crosshairs.width = \"tickWidth\"), \"candlestick\" !== e.chart.type && \"boxPlot\" !== e.chart.type || e.yaxis[0].reversed && (console.warn(\"Reversed y-axis in \".concat(e.chart.type, \" chart is not supported.\")), e.yaxis[0].reversed = !1), e;\n      }\n    }]), t;\n  }(),\n      O = function () {\n    function t() {\n      a(this, t);\n    }\n\n    return r(t, [{\n      key: \"initGlobalVars\",\n      value: function value(t) {\n        t.series = [], t.seriesCandleO = [], t.seriesCandleH = [], t.seriesCandleM = [], t.seriesCandleL = [], t.seriesCandleC = [], t.seriesRangeStart = [], t.seriesRangeEnd = [], t.seriesRangeBar = [], t.seriesPercent = [], t.seriesGoals = [], t.seriesX = [], t.seriesZ = [], t.seriesNames = [], t.seriesTotals = [], t.seriesLog = [], t.seriesColors = [], t.stackedSeriesTotals = [], t.seriesXvalues = [], t.seriesYvalues = [], t.labels = [], t.hasGroups = !1, t.groups = [], t.categoryLabels = [], t.timescaleLabels = [], t.noLabelsProvided = !1, t.resizeTimer = null, t.selectionResizeTimer = null, t.delayedElements = [], t.pointsArray = [], t.dataLabelsRects = [], t.isXNumeric = !1, t.xaxisLabelsCount = 0, t.skipLastTimelinelabel = !1, t.skipFirstTimelinelabel = !1, t.isDataXYZ = !1, t.isMultiLineX = !1, t.isMultipleYAxis = !1, t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE, t.minYArr = [], t.maxYArr = [], t.maxX = -Number.MAX_VALUE, t.minX = Number.MAX_VALUE, t.initialMaxX = -Number.MAX_VALUE, t.initialMinX = Number.MAX_VALUE, t.maxDate = 0, t.minDate = Number.MAX_VALUE, t.minZ = Number.MAX_VALUE, t.maxZ = -Number.MAX_VALUE, t.minXDiff = Number.MAX_VALUE, t.yAxisScale = [], t.xAxisScale = null, t.xAxisTicksPositions = [], t.yLabelsCoords = [], t.yTitleCoords = [], t.barPadForNumericAxis = 0, t.padHorizontal = 0, t.xRange = 0, t.yRange = [], t.zRange = 0, t.dataPoints = 0, t.xTickAmount = 0;\n      }\n    }, {\n      key: \"globalVars\",\n      value: function value(t) {\n        return {\n          chartID: null,\n          cuid: null,\n          events: {\n            beforeMount: [],\n            mounted: [],\n            updated: [],\n            clicked: [],\n            selection: [],\n            dataPointSelection: [],\n            zoomed: [],\n            scrolled: []\n          },\n          colors: [],\n          clientX: null,\n          clientY: null,\n          fill: {\n            colors: []\n          },\n          stroke: {\n            colors: []\n          },\n          dataLabels: {\n            style: {\n              colors: []\n            }\n          },\n          radarPolygons: {\n            fill: {\n              colors: []\n            }\n          },\n          markers: {\n            colors: [],\n            size: t.markers.size,\n            largestSize: 0\n          },\n          animationEnded: !1,\n          isTouchDevice: \"ontouchstart\" in window || navigator.msMaxTouchPoints,\n          isDirty: !1,\n          isExecCalled: !1,\n          initialConfig: null,\n          initialSeries: [],\n          lastXAxis: [],\n          lastYAxis: [],\n          columnSeries: null,\n          labels: [],\n          timescaleLabels: [],\n          noLabelsProvided: !1,\n          allSeriesCollapsed: !1,\n          collapsedSeries: [],\n          collapsedSeriesIndices: [],\n          ancillaryCollapsedSeries: [],\n          ancillaryCollapsedSeriesIndices: [],\n          risingSeries: [],\n          dataFormatXNumeric: !1,\n          capturedSeriesIndex: -1,\n          capturedDataPointIndex: -1,\n          selectedDataPoints: [],\n          goldenPadding: 35,\n          invalidLogScale: !1,\n          ignoreYAxisIndexes: [],\n          yAxisSameScaleIndices: [],\n          maxValsInArrayIndex: 0,\n          radialSize: 0,\n          selection: void 0,\n          zoomEnabled: \"zoom\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.zoom && t.chart.zoom.enabled,\n          panEnabled: \"pan\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.pan,\n          selectionEnabled: \"selection\" === t.chart.toolbar.autoSelected && t.chart.toolbar.tools.selection,\n          yaxis: null,\n          mousedown: !1,\n          lastClientPosition: {},\n          visibleXRange: void 0,\n          yValueDecimal: 0,\n          total: 0,\n          SVGNS: \"http://www.w3.org/2000/svg\",\n          svgWidth: 0,\n          svgHeight: 0,\n          noData: !1,\n          locale: {},\n          dom: {},\n          memory: {\n            methodsToExec: []\n          },\n          shouldAnimate: !0,\n          skipLastTimelinelabel: !1,\n          skipFirstTimelinelabel: !1,\n          delayedElements: [],\n          axisCharts: !0,\n          isDataXYZ: !1,\n          resized: !1,\n          resizeTimer: null,\n          comboCharts: !1,\n          dataChanged: !1,\n          previousPaths: [],\n          allSeriesHasEqualX: !0,\n          pointsArray: [],\n          dataLabelsRects: [],\n          lastDrawnDataLabelsIndexes: [],\n          hasNullValues: !1,\n          easing: null,\n          zoomed: !1,\n          gridWidth: 0,\n          gridHeight: 0,\n          rotateXLabels: !1,\n          defaultLabels: !1,\n          xLabelFormatter: void 0,\n          yLabelFormatters: [],\n          xaxisTooltipFormatter: void 0,\n          ttKeyFormatter: void 0,\n          ttVal: void 0,\n          ttZFormatter: void 0,\n          LINE_HEIGHT_RATIO: 1.618,\n          xAxisLabelsHeight: 0,\n          xAxisGroupLabelsHeight: 0,\n          xAxisLabelsWidth: 0,\n          yAxisLabelsWidth: 0,\n          scaleX: 1,\n          scaleY: 1,\n          translateX: 0,\n          translateY: 0,\n          translateYAxisX: [],\n          yAxisWidths: [],\n          translateXAxisY: 0,\n          translateXAxisX: 0,\n          tooltip: null\n        };\n      }\n    }, {\n      key: \"init\",\n      value: function value(t) {\n        var e = this.globalVars(t);\n        return this.initGlobalVars(e), e.initialConfig = x.extend({}, t), e.initialSeries = x.clone(t.series), e.lastXAxis = x.clone(e.initialConfig.xaxis), e.lastYAxis = x.clone(e.initialConfig.yaxis), e;\n      }\n    }]), t;\n  }(),\n      W = function () {\n    function t(e) {\n      a(this, t), this.opts = e;\n    }\n\n    return r(t, [{\n      key: \"init\",\n      value: function value() {\n        var t = new N(this.opts).init({\n          responsiveOverride: !1\n        });\n        return {\n          config: t,\n          globals: new O().init(t)\n        };\n      }\n    }]), t;\n  }(),\n      B = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w, this.twoDSeries = [], this.threeDSeries = [], this.twoDSeriesX = [], this.seriesGoals = [], this.coreUtils = new y(this.ctx);\n    }\n\n    return r(t, [{\n      key: \"isMultiFormat\",\n      value: function value() {\n        return this.isFormatXY() || this.isFormat2DArray();\n      }\n    }, {\n      key: \"isFormatXY\",\n      value: function value() {\n        var t = this.w.config.series.slice(),\n            e = new E(this.ctx);\n        if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && null !== t[this.activeSeriesIndex].data[0] && void 0 !== t[this.activeSeriesIndex].data[0].x && null !== t[this.activeSeriesIndex].data[0]) return !0;\n      }\n    }, {\n      key: \"isFormat2DArray\",\n      value: function value() {\n        var t = this.w.config.series.slice(),\n            e = new E(this.ctx);\n        if (this.activeSeriesIndex = e.getActiveConfigSeriesIndex(), void 0 !== t[this.activeSeriesIndex].data && t[this.activeSeriesIndex].data.length > 0 && void 0 !== t[this.activeSeriesIndex].data[0] && null !== t[this.activeSeriesIndex].data[0] && t[this.activeSeriesIndex].data[0].constructor === Array) return !0;\n      }\n    }, {\n      key: \"handleFormat2DArray\",\n      value: function value(t, e) {\n        for (var i = this.w.config, a = this.w.globals, s = \"boxPlot\" === i.chart.type || \"boxPlot\" === i.series[e].type, r = 0; r < t[e].data.length; r++) {\n          if (void 0 !== t[e].data[r][1] && (Array.isArray(t[e].data[r][1]) && 4 === t[e].data[r][1].length && !s ? this.twoDSeries.push(x.parseNumber(t[e].data[r][1][3])) : t[e].data[r].length >= 5 ? this.twoDSeries.push(x.parseNumber(t[e].data[r][4])) : this.twoDSeries.push(x.parseNumber(t[e].data[r][1])), a.dataFormatXNumeric = !0), \"datetime\" === i.xaxis.type) {\n            var o = new Date(t[e].data[r][0]);\n            o = new Date(o).getTime(), this.twoDSeriesX.push(o);\n          } else this.twoDSeriesX.push(t[e].data[r][0]);\n        }\n\n        for (var n = 0; n < t[e].data.length; n++) {\n          void 0 !== t[e].data[n][2] && (this.threeDSeries.push(t[e].data[n][2]), a.isDataXYZ = !0);\n        }\n      }\n    }, {\n      key: \"handleFormatXY\",\n      value: function value(t, e) {\n        var i = this.w.config,\n            a = this.w.globals,\n            s = new R(this.ctx),\n            r = e;\n        a.collapsedSeriesIndices.indexOf(e) > -1 && (r = this.activeSeriesIndex);\n\n        for (var o = 0; o < t[e].data.length; o++) {\n          void 0 !== t[e].data[o].y && (Array.isArray(t[e].data[o].y) ? this.twoDSeries.push(x.parseNumber(t[e].data[o].y[t[e].data[o].y.length - 1])) : this.twoDSeries.push(x.parseNumber(t[e].data[o].y))), void 0 !== t[e].data[o].goals && Array.isArray(t[e].data[o].goals) ? (void 0 === this.seriesGoals[e] && (this.seriesGoals[e] = []), this.seriesGoals[e].push(t[e].data[o].goals)) : (void 0 === this.seriesGoals[e] && (this.seriesGoals[e] = []), this.seriesGoals[e].push(null));\n        }\n\n        for (var n = 0; n < t[r].data.length; n++) {\n          var l = \"string\" == typeof t[r].data[n].x,\n              h = Array.isArray(t[r].data[n].x),\n              c = !h && !!s.isValidDate(t[r].data[n].x.toString());\n          if (l || c) {\n            if (l || i.xaxis.convertedCatToNumeric) {\n              var d = a.isBarHorizontal && a.isRangeData;\n              \"datetime\" !== i.xaxis.type || d ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[r].data[n].x)) : this.twoDSeriesX.push(s.parseDate(t[r].data[n].x));\n            } else \"datetime\" === i.xaxis.type ? this.twoDSeriesX.push(s.parseDate(t[r].data[n].x.toString())) : (a.dataFormatXNumeric = !0, a.isXNumeric = !0, this.twoDSeriesX.push(parseFloat(t[r].data[n].x)));\n          } else h ? (this.fallbackToCategory = !0, this.twoDSeriesX.push(t[r].data[n].x)) : (a.isXNumeric = !0, a.dataFormatXNumeric = !0, this.twoDSeriesX.push(t[r].data[n].x));\n        }\n\n        if (t[e].data[0] && void 0 !== t[e].data[0].z) {\n          for (var g = 0; g < t[e].data.length; g++) {\n            this.threeDSeries.push(t[e].data[g].z);\n          }\n\n          a.isDataXYZ = !0;\n        }\n      }\n    }, {\n      key: \"handleRangeData\",\n      value: function value(t, e) {\n        var i = this.w.globals,\n            a = {};\n        return this.isFormat2DArray() ? a = this.handleRangeDataFormat(\"array\", t, e) : this.isFormatXY() && (a = this.handleRangeDataFormat(\"xy\", t, e)), i.seriesRangeStart.push(a.start), i.seriesRangeEnd.push(a.end), i.seriesRangeBar.push(a.rangeUniques), i.seriesRangeBar.forEach(function (t, e) {\n          t && t.forEach(function (t, e) {\n            t.y.forEach(function (e, i) {\n              for (var a = 0; a < t.y.length; a++) {\n                if (i !== a) {\n                  var s = e.y1,\n                      r = e.y2,\n                      o = t.y[a].y1;\n                  s <= t.y[a].y2 && o <= r && (t.overlaps.indexOf(e.rangeName) < 0 && t.overlaps.push(e.rangeName), t.overlaps.indexOf(t.y[a].rangeName) < 0 && t.overlaps.push(t.y[a].rangeName));\n                }\n              }\n            });\n          });\n        }), a;\n      }\n    }, {\n      key: \"handleCandleStickBoxData\",\n      value: function value(t, e) {\n        var i = this.w.globals,\n            a = {};\n        return this.isFormat2DArray() ? a = this.handleCandleStickBoxDataFormat(\"array\", t, e) : this.isFormatXY() && (a = this.handleCandleStickBoxDataFormat(\"xy\", t, e)), i.seriesCandleO[e] = a.o, i.seriesCandleH[e] = a.h, i.seriesCandleM[e] = a.m, i.seriesCandleL[e] = a.l, i.seriesCandleC[e] = a.c, a;\n      }\n    }, {\n      key: \"handleRangeDataFormat\",\n      value: function value(t, e, i) {\n        var a = [],\n            s = [],\n            r = e[i].data.filter(function (t, e, i) {\n          return e === i.findIndex(function (e) {\n            return e.x === t.x;\n          });\n        }).map(function (t, e) {\n          return {\n            x: t.x,\n            overlaps: [],\n            y: []\n          };\n        }),\n            o = \"Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts\",\n            n = new E(this.ctx).getActiveConfigSeriesIndex();\n\n        if (\"array\" === t) {\n          if (2 !== e[n].data[0][1].length) throw new Error(o);\n\n          for (var l = 0; l < e[i].data.length; l++) {\n            a.push(e[i].data[l][1][0]), s.push(e[i].data[l][1][1]);\n          }\n        } else if (\"xy\" === t) {\n          if (2 !== e[n].data[0].y.length) throw new Error(o);\n\n          for (var h = function h(t) {\n            var o = x.randomId(),\n                n = e[i].data[t].x,\n                l = {\n              y1: e[i].data[t].y[0],\n              y2: e[i].data[t].y[1],\n              rangeName: o\n            };\n            e[i].data[t].rangeName = o;\n            var h = r.findIndex(function (t) {\n              return t.x === n;\n            });\n            r[h].y.push(l), a.push(l.y1), s.push(l.y2);\n          }, c = 0; c < e[i].data.length; c++) {\n            h(c);\n          }\n        }\n\n        return {\n          start: a,\n          end: s,\n          rangeUniques: r\n        };\n      }\n    }, {\n      key: \"handleCandleStickBoxDataFormat\",\n      value: function value(t, e, i) {\n        var a = this.w,\n            s = \"boxPlot\" === a.config.chart.type || \"boxPlot\" === a.config.series[i].type,\n            r = [],\n            o = [],\n            n = [],\n            l = [],\n            h = [];\n        if (\"array\" === t) {\n          if (s && 6 === e[i].data[0].length || !s && 5 === e[i].data[0].length) for (var c = 0; c < e[i].data.length; c++) {\n            r.push(e[i].data[c][1]), o.push(e[i].data[c][2]), s ? (n.push(e[i].data[c][3]), l.push(e[i].data[c][4]), h.push(e[i].data[c][5])) : (l.push(e[i].data[c][3]), h.push(e[i].data[c][4]));\n          } else for (var d = 0; d < e[i].data.length; d++) {\n            Array.isArray(e[i].data[d][1]) && (r.push(e[i].data[d][1][0]), o.push(e[i].data[d][1][1]), s ? (n.push(e[i].data[d][1][2]), l.push(e[i].data[d][1][3]), h.push(e[i].data[d][1][4])) : (l.push(e[i].data[d][1][2]), h.push(e[i].data[d][1][3])));\n          }\n        } else if (\"xy\" === t) for (var g = 0; g < e[i].data.length; g++) {\n          Array.isArray(e[i].data[g].y) && (r.push(e[i].data[g].y[0]), o.push(e[i].data[g].y[1]), s ? (n.push(e[i].data[g].y[2]), l.push(e[i].data[g].y[3]), h.push(e[i].data[g].y[4])) : (l.push(e[i].data[g].y[2]), h.push(e[i].data[g].y[3])));\n        }\n        return {\n          o: r,\n          h: o,\n          m: n,\n          l: l,\n          c: h\n        };\n      }\n    }, {\n      key: \"parseDataAxisCharts\",\n      value: function value(t) {\n        var e = this,\n            i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.ctx,\n            a = this.w.config,\n            s = this.w.globals,\n            r = new R(i),\n            o = a.labels.length > 0 ? a.labels.slice() : a.xaxis.categories.slice();\n        s.isRangeBar = \"rangeBar\" === a.chart.type && s.isBarHorizontal, s.hasGroups = \"category\" === a.xaxis.type && a.xaxis.group.groups.length > 0, s.hasGroups && (s.groups = a.xaxis.group.groups);\n\n        for (var n = function n() {\n          for (var t = 0; t < o.length; t++) {\n            if (\"string\" == typeof o[t]) {\n              if (!r.isValidDate(o[t])) throw new Error(\"You have provided invalid Date format. Please provide a valid JavaScript Date\");\n              e.twoDSeriesX.push(r.parseDate(o[t]));\n            } else e.twoDSeriesX.push(o[t]);\n          }\n        }, l = 0; l < t.length; l++) {\n          if (this.twoDSeries = [], this.twoDSeriesX = [], this.threeDSeries = [], void 0 === t[l].data) return void console.error(\"It is a possibility that you may have not included 'data' property in series.\");\n          if (\"rangeBar\" !== a.chart.type && \"rangeArea\" !== a.chart.type && \"rangeBar\" !== t[l].type && \"rangeArea\" !== t[l].type || (s.isRangeData = !0, this.handleRangeData(t, l)), this.isMultiFormat()) this.isFormat2DArray() ? this.handleFormat2DArray(t, l) : this.isFormatXY() && this.handleFormatXY(t, l), \"candlestick\" !== a.chart.type && \"candlestick\" !== t[l].type && \"boxPlot\" !== a.chart.type && \"boxPlot\" !== t[l].type || this.handleCandleStickBoxData(t, l), s.series.push(this.twoDSeries), s.labels.push(this.twoDSeriesX), s.seriesX.push(this.twoDSeriesX), s.seriesGoals = this.seriesGoals, l !== this.activeSeriesIndex || this.fallbackToCategory || (s.isXNumeric = !0);else {\n            \"datetime\" === a.xaxis.type ? (s.isXNumeric = !0, n(), s.seriesX.push(this.twoDSeriesX)) : \"numeric\" === a.xaxis.type && (s.isXNumeric = !0, o.length > 0 && (this.twoDSeriesX = o, s.seriesX.push(this.twoDSeriesX))), s.labels.push(this.twoDSeriesX);\n            var h = t[l].data.map(function (t) {\n              return x.parseNumber(t);\n            });\n            s.series.push(h);\n          }\n          s.seriesZ.push(this.threeDSeries), void 0 !== t[l].name ? s.seriesNames.push(t[l].name) : s.seriesNames.push(\"series-\" + parseInt(l + 1, 10)), void 0 !== t[l].color ? s.seriesColors.push(t[l].color) : s.seriesColors.push(void 0);\n        }\n\n        return this.w;\n      }\n    }, {\n      key: \"parseDataNonAxisCharts\",\n      value: function value(t) {\n        var e = this.w.globals,\n            i = this.w.config;\n        e.series = t.slice(), e.seriesNames = i.labels.slice();\n\n        for (var a = 0; a < e.series.length; a++) {\n          void 0 === e.seriesNames[a] && e.seriesNames.push(\"series-\" + (a + 1));\n        }\n\n        return this.w;\n      }\n    }, {\n      key: \"handleExternalLabelsData\",\n      value: function value(t) {\n        var e = this.w.config,\n            i = this.w.globals;\n        if (e.xaxis.categories.length > 0) i.labels = e.xaxis.categories;else if (e.labels.length > 0) i.labels = e.labels.slice();else if (this.fallbackToCategory) {\n          if (i.labels = i.labels[0], i.seriesRangeBar.length && (i.seriesRangeBar.map(function (t) {\n            t.forEach(function (t) {\n              i.labels.indexOf(t.x) < 0 && t.x && i.labels.push(t.x);\n            });\n          }), i.labels = i.labels.filter(function (t, e, i) {\n            return i.indexOf(t) === e;\n          })), e.xaxis.convertedCatToNumeric) new D(e).convertCatToNumericXaxis(e, this.ctx, i.seriesX[0]), this._generateExternalLabels(t);\n        } else this._generateExternalLabels(t);\n      }\n    }, {\n      key: \"_generateExternalLabels\",\n      value: function value(t) {\n        var e = this.w.globals,\n            i = this.w.config,\n            a = [];\n\n        if (e.axisCharts) {\n          if (e.series.length > 0) if (this.isFormatXY()) for (var s = i.series.map(function (t, e) {\n            return t.data.filter(function (t, e, i) {\n              return i.findIndex(function (e) {\n                return e.x === t.x;\n              }) === e;\n            });\n          }), r = s.reduce(function (t, e, i, a) {\n            return a[t].length > e.length ? t : i;\n          }, 0), o = 0; o < s[r].length; o++) {\n            a.push(o + 1);\n          } else for (var n = 0; n < e.series[e.maxValsInArrayIndex].length; n++) {\n            a.push(n + 1);\n          }\n          e.seriesX = [];\n\n          for (var l = 0; l < t.length; l++) {\n            e.seriesX.push(a);\n          }\n\n          e.isXNumeric = !0;\n        }\n\n        if (0 === a.length) {\n          a = e.axisCharts ? [] : e.series.map(function (t, e) {\n            return e + 1;\n          });\n\n          for (var h = 0; h < t.length; h++) {\n            e.seriesX.push(a);\n          }\n        }\n\n        e.labels = a, i.xaxis.convertedCatToNumeric && (e.categoryLabels = a.map(function (t) {\n          return i.xaxis.labels.formatter(t);\n        })), e.noLabelsProvided = !0;\n      }\n    }, {\n      key: \"parseData\",\n      value: function value(t) {\n        var e = this.w,\n            i = e.config,\n            a = e.globals;\n\n        if (this.excludeCollapsedSeriesInYAxis(), this.fallbackToCategory = !1, this.ctx.core.resetGlobals(), this.ctx.core.isMultipleY(), a.axisCharts ? this.parseDataAxisCharts(t) : this.parseDataNonAxisCharts(t), this.coreUtils.getLargestSeries(), \"bar\" === i.chart.type && i.chart.stacked) {\n          var s = new E(this.ctx);\n          a.series = s.setNullSeriesToZeroValues(a.series);\n        }\n\n        this.coreUtils.getSeriesTotals(), a.axisCharts && this.coreUtils.getStackedSeriesTotals(), this.coreUtils.getPercentSeries(), a.dataFormatXNumeric || a.isXNumeric && (\"numeric\" !== i.xaxis.type || 0 !== i.labels.length || 0 !== i.xaxis.categories.length) || this.handleExternalLabelsData(t);\n\n        for (var r = this.coreUtils.getCategoryLabels(a.labels), o = 0; o < r.length; o++) {\n          if (Array.isArray(r[o])) {\n            a.isMultiLineX = !0;\n            break;\n          }\n        }\n      }\n    }, {\n      key: \"excludeCollapsedSeriesInYAxis\",\n      value: function value() {\n        var t = this,\n            e = this.w;\n        e.globals.ignoreYAxisIndexes = e.globals.collapsedSeries.map(function (i, a) {\n          if (t.w.globals.isMultipleYAxis && !e.config.chart.stacked) return i.index;\n        });\n      }\n    }]), t;\n  }(),\n      V = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w, this.tooltipKeyFormat = \"dd MMM\";\n    }\n\n    return r(t, [{\n      key: \"xLabelFormat\",\n      value: function value(t, e, i, a) {\n        var s = this.w;\n\n        if (\"datetime\" === s.config.xaxis.type && void 0 === s.config.xaxis.labels.formatter && void 0 === s.config.tooltip.x.formatter) {\n          var r = new R(this.ctx);\n          return r.formatDate(r.getDate(e), s.config.tooltip.x.format);\n        }\n\n        return t(e, i, a);\n      }\n    }, {\n      key: \"defaultGeneralFormatter\",\n      value: function value(t) {\n        return Array.isArray(t) ? t.map(function (t) {\n          return t;\n        }) : t;\n      }\n    }, {\n      key: \"defaultYFormatter\",\n      value: function value(t, e, i) {\n        var a = this.w;\n        return x.isNumber(t) && (t = 0 !== a.globals.yValueDecimal ? t.toFixed(void 0 !== e.decimalsInFloat ? e.decimalsInFloat : a.globals.yValueDecimal) : a.globals.maxYArr[i] - a.globals.minYArr[i] < 5 ? t.toFixed(1) : t.toFixed(0)), t;\n      }\n    }, {\n      key: \"setLabelFormatters\",\n      value: function value() {\n        var t = this,\n            e = this.w;\n        return e.globals.xaxisTooltipFormatter = function (e) {\n          return t.defaultGeneralFormatter(e);\n        }, e.globals.ttKeyFormatter = function (e) {\n          return t.defaultGeneralFormatter(e);\n        }, e.globals.ttZFormatter = function (t) {\n          return t;\n        }, e.globals.legendFormatter = function (e) {\n          return t.defaultGeneralFormatter(e);\n        }, void 0 !== e.config.xaxis.labels.formatter ? e.globals.xLabelFormatter = e.config.xaxis.labels.formatter : e.globals.xLabelFormatter = function (t) {\n          if (x.isNumber(t)) {\n            if (!e.config.xaxis.convertedCatToNumeric && \"numeric\" === e.config.xaxis.type) {\n              if (x.isNumber(e.config.xaxis.decimalsInFloat)) return t.toFixed(e.config.xaxis.decimalsInFloat);\n              var i = e.globals.maxX - e.globals.minX;\n              return i > 0 && i < 100 ? t.toFixed(1) : t.toFixed(0);\n            }\n\n            if (e.globals.isBarHorizontal) if (e.globals.maxY - e.globals.minYArr < 4) return t.toFixed(1);\n            return t.toFixed(0);\n          }\n\n          return t;\n        }, \"function\" == typeof e.config.tooltip.x.formatter ? e.globals.ttKeyFormatter = e.config.tooltip.x.formatter : e.globals.ttKeyFormatter = e.globals.xLabelFormatter, \"function\" == typeof e.config.xaxis.tooltip.formatter && (e.globals.xaxisTooltipFormatter = e.config.xaxis.tooltip.formatter), (Array.isArray(e.config.tooltip.y) || void 0 !== e.config.tooltip.y.formatter) && (e.globals.ttVal = e.config.tooltip.y), void 0 !== e.config.tooltip.z.formatter && (e.globals.ttZFormatter = e.config.tooltip.z.formatter), void 0 !== e.config.legend.formatter && (e.globals.legendFormatter = e.config.legend.formatter), e.config.yaxis.forEach(function (i, a) {\n          void 0 !== i.labels.formatter ? e.globals.yLabelFormatters[a] = i.labels.formatter : e.globals.yLabelFormatters[a] = function (s) {\n            return e.globals.xyCharts ? Array.isArray(s) ? s.map(function (e) {\n              return t.defaultYFormatter(e, i, a);\n            }) : t.defaultYFormatter(s, i, a) : s;\n          };\n        }), e.globals;\n      }\n    }, {\n      key: \"heatmapLabelFormatters\",\n      value: function value() {\n        var t = this.w;\n\n        if (\"heatmap\" === t.config.chart.type) {\n          t.globals.yAxisScale[0].result = t.globals.seriesNames.slice();\n          var e = t.globals.seriesNames.reduce(function (t, e) {\n            return t.length > e.length ? t : e;\n          }, 0);\n          t.globals.yAxisScale[0].niceMax = e, t.globals.yAxisScale[0].niceMin = e;\n        }\n      }\n    }]), t;\n  }(),\n      G = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"getLabel\",\n      value: function value(t, e, i, a) {\n        var s = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : [],\n            r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : \"12px\",\n            o = !(arguments.length > 6 && void 0 !== arguments[6]) || arguments[6],\n            n = this.w,\n            l = void 0 === t[a] ? \"\" : t[a],\n            h = l,\n            c = n.globals.xLabelFormatter,\n            d = n.config.xaxis.labels.formatter,\n            g = !1,\n            u = new V(this.ctx),\n            f = l;\n        o && (h = u.xLabelFormat(c, l, f, {\n          i: a,\n          dateFormatter: new R(this.ctx).formatDate,\n          w: n\n        }), void 0 !== d && (h = d(l, t[a], {\n          i: a,\n          dateFormatter: new R(this.ctx).formatDate,\n          w: n\n        })));\n\n        var p = function p(t) {\n          var i = null;\n          return e.forEach(function (t) {\n            \"month\" === t.unit ? i = \"year\" : \"day\" === t.unit ? i = \"month\" : \"hour\" === t.unit ? i = \"day\" : \"minute\" === t.unit && (i = \"hour\");\n          }), i === t;\n        };\n\n        e.length > 0 ? (g = p(e[a].unit), i = e[a].position, h = e[a].value) : \"datetime\" === n.config.xaxis.type && void 0 === d && (h = \"\"), void 0 === h && (h = \"\"), h = Array.isArray(h) ? h : h.toString();\n        var x = new m(this.ctx),\n            b = {};\n        b = n.globals.rotateXLabels && o ? x.getTextRects(h, parseInt(r, 10), null, \"rotate(\".concat(n.config.xaxis.labels.rotate, \" 0 0)\"), !1) : x.getTextRects(h, parseInt(r, 10));\n        var v = !n.config.xaxis.labels.showDuplicates && this.ctx.timeScale;\n        return !Array.isArray(h) && (0 === h.indexOf(\"NaN\") || 0 === h.toLowerCase().indexOf(\"invalid\") || h.toLowerCase().indexOf(\"infinity\") >= 0 || s.indexOf(h) >= 0 && v) && (h = \"\"), {\n          x: i,\n          text: h,\n          textRect: b,\n          isBold: g\n        };\n      }\n    }, {\n      key: \"checkLabelBasedOnTickamount\",\n      value: function value(t, e, i) {\n        var a = this.w,\n            s = a.config.xaxis.tickAmount;\n        return \"dataPoints\" === s && (s = Math.round(a.globals.gridWidth / 120)), s > i || t % Math.round(i / (s + 1)) == 0 || (e.text = \"\"), e;\n      }\n    }, {\n      key: \"checkForOverflowingLabels\",\n      value: function value(t, e, i, a, s) {\n        var r = this.w;\n\n        if (0 === t && r.globals.skipFirstTimelinelabel && (e.text = \"\"), t === i - 1 && r.globals.skipLastTimelinelabel && (e.text = \"\"), r.config.xaxis.labels.hideOverlappingLabels && a.length > 0) {\n          var o = s[s.length - 1];\n          e.x < o.textRect.width / (r.globals.rotateXLabels ? Math.abs(r.config.xaxis.labels.rotate) / 12 : 1.01) + o.x && (e.text = \"\");\n        }\n\n        return e;\n      }\n    }, {\n      key: \"checkForReversedLabels\",\n      value: function value(t, e) {\n        var i = this.w;\n        return i.config.yaxis[t] && i.config.yaxis[t].reversed && e.reverse(), e;\n      }\n    }, {\n      key: \"isYAxisHidden\",\n      value: function value(t) {\n        var e = this.w,\n            i = new y(this.ctx);\n        return !e.config.yaxis[t].show || !e.config.yaxis[t].showForNullSeries && i.isSeriesNull(t) && -1 === e.globals.collapsedSeriesIndices.indexOf(t);\n      }\n    }, {\n      key: \"getYAxisForeColor\",\n      value: function value(t, e) {\n        var i = this.w;\n        return Array.isArray(t) && i.globals.yAxisScale[e] && this.ctx.theme.pushExtraColors(t, i.globals.yAxisScale[e].result.length, !1), t;\n      }\n    }, {\n      key: \"drawYAxisTicks\",\n      value: function value(t, e, i, a, s, r, o) {\n        var n = this.w,\n            l = new m(this.ctx),\n            h = n.globals.translateY;\n\n        if (a.show && e > 0) {\n          !0 === n.config.yaxis[s].opposite && (t += a.width);\n\n          for (var c = e; c >= 0; c--) {\n            var d = h + e / 10 + n.config.yaxis[s].labels.offsetY - 1;\n            n.globals.isBarHorizontal && (d = r * c), \"heatmap\" === n.config.chart.type && (d += r / 2);\n            var g = l.drawLine(t + i.offsetX - a.width + a.offsetX, d + a.offsetY, t + i.offsetX + a.offsetX, d + a.offsetY, a.color);\n            o.add(g), h += r;\n          }\n        }\n      }\n    }]), t;\n  }(),\n      j = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"scaleSvgNode\",\n      value: function value(t, e) {\n        var i = parseFloat(t.getAttributeNS(null, \"width\")),\n            a = parseFloat(t.getAttributeNS(null, \"height\"));\n        t.setAttributeNS(null, \"width\", i * e), t.setAttributeNS(null, \"height\", a * e), t.setAttributeNS(null, \"viewBox\", \"0 0 \" + i + \" \" + a);\n      }\n    }, {\n      key: \"fixSvgStringForIe11\",\n      value: function value(t) {\n        if (!x.isIE11()) return t.replace(/&nbsp;/g, \"&#160;\");\n        var e = 0,\n            i = t.replace(/xmlns=\"http:\\/\\/www.w3.org\\/2000\\/svg\"/g, function (t) {\n          return 2 === ++e ? 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:svgjs=\"http://svgjs.dev\"' : t;\n        });\n        return i = (i = i.replace(/xmlns:NS\\d+=\"\"/g, \"\")).replace(/NS\\d+:(\\w+:\\w+=\")/g, \"$1\");\n      }\n    }, {\n      key: \"getSvgString\",\n      value: function value(t) {\n        null == t && (t = 1);\n        var e = this.w.globals.dom.Paper.svg();\n\n        if (1 !== t) {\n          var i = this.w.globals.dom.Paper.node.cloneNode(!0);\n          this.scaleSvgNode(i, t), e = new XMLSerializer().serializeToString(i);\n        }\n\n        return this.fixSvgStringForIe11(e);\n      }\n    }, {\n      key: \"cleanup\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals.dom.baseEl.getElementsByClassName(\"apexcharts-xcrosshairs\"),\n            i = t.globals.dom.baseEl.getElementsByClassName(\"apexcharts-ycrosshairs\"),\n            a = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-zoom-rect, .apexcharts-selection-rect\");\n        Array.prototype.forEach.call(a, function (t) {\n          t.setAttribute(\"width\", 0);\n        }), e && e[0] && (e[0].setAttribute(\"x\", -500), e[0].setAttribute(\"x1\", -500), e[0].setAttribute(\"x2\", -500)), i && i[0] && (i[0].setAttribute(\"y\", -100), i[0].setAttribute(\"y1\", -100), i[0].setAttribute(\"y2\", -100));\n      }\n    }, {\n      key: \"svgUrl\",\n      value: function value() {\n        this.cleanup();\n        var t = this.getSvgString(),\n            e = new Blob([t], {\n          type: \"image/svg+xml;charset=utf-8\"\n        });\n        return URL.createObjectURL(e);\n      }\n    }, {\n      key: \"dataURI\",\n      value: function value(t) {\n        var e = this;\n        return new Promise(function (i) {\n          var a = e.w,\n              s = t ? t.scale || t.width / a.globals.svgWidth : 1;\n          e.cleanup();\n          var r = document.createElement(\"canvas\");\n          r.width = a.globals.svgWidth * s, r.height = parseInt(a.globals.dom.elWrap.style.height, 10) * s;\n          var o = \"transparent\" === a.config.chart.background ? \"#fff\" : a.config.chart.background,\n              n = r.getContext(\"2d\");\n          n.fillStyle = o, n.fillRect(0, 0, r.width * s, r.height * s);\n          var l = e.getSvgString(s);\n\n          if (window.canvg && x.isIE11()) {\n            var h = window.canvg.Canvg.fromString(n, l, {\n              ignoreClear: !0,\n              ignoreDimensions: !0\n            });\n            h.start();\n            var c = r.msToBlob();\n            h.stop(), i({\n              blob: c\n            });\n          } else {\n            var d = \"data:image/svg+xml,\" + encodeURIComponent(l),\n                g = new Image();\n            g.crossOrigin = \"anonymous\", g.onload = function () {\n              if (n.drawImage(g, 0, 0), r.msToBlob) {\n                var t = r.msToBlob();\n                i({\n                  blob: t\n                });\n              } else {\n                var e = r.toDataURL(\"image/png\");\n                i({\n                  imgURI: e\n                });\n              }\n            }, g.src = d;\n          }\n        });\n      }\n    }, {\n      key: \"exportToSVG\",\n      value: function value() {\n        this.triggerDownload(this.svgUrl(), this.w.config.chart.toolbar[\"export\"].svg.filename, \".svg\");\n      }\n    }, {\n      key: \"exportToPng\",\n      value: function value() {\n        var t = this;\n        this.dataURI().then(function (e) {\n          var i = e.imgURI,\n              a = e.blob;\n          a ? navigator.msSaveOrOpenBlob(a, t.w.globals.chartID + \".png\") : t.triggerDownload(i, t.w.config.chart.toolbar[\"export\"].png.filename, \".png\");\n        });\n      }\n    }, {\n      key: \"exportToCSV\",\n      value: function value(t) {\n        var e = this,\n            i = t.series,\n            a = t.columnDelimiter,\n            s = t.lineDelimiter,\n            r = void 0 === s ? \"\\n\" : s,\n            o = this.w,\n            n = [],\n            l = [],\n            h = \"\",\n            c = new B(this.ctx),\n            d = new G(this.ctx),\n            g = function g(t) {\n          var i = \"\";\n\n          if (o.globals.axisCharts) {\n            if (\"category\" === o.config.xaxis.type || o.config.xaxis.convertedCatToNumeric) if (o.globals.isBarHorizontal) {\n              var s = o.globals.yLabelFormatters[0],\n                  r = new E(e.ctx).getActiveConfigSeriesIndex();\n              i = s(o.globals.labels[t], {\n                seriesIndex: r,\n                dataPointIndex: t,\n                w: o\n              });\n            } else i = d.getLabel(o.globals.labels, o.globals.timescaleLabels, 0, t).text;\n            \"datetime\" === o.config.xaxis.type && (o.config.xaxis.categories.length ? i = o.config.xaxis.categories[t] : o.config.labels.length && (i = o.config.labels[t]));\n          } else i = o.config.labels[t];\n\n          return Array.isArray(i) && (i = i.join(\" \")), x.isNumber(i) ? i : i.split(a).join(\"\");\n        };\n\n        n.push(o.config.chart.toolbar[\"export\"].csv.headerCategory), i.map(function (t, e) {\n          var i = t.name ? t.name : \"series-\".concat(e);\n          o.globals.axisCharts && n.push(i.split(a).join(\"\") ? i.split(a).join(\"\") : \"series-\".concat(e));\n        }), o.globals.axisCharts || (n.push(o.config.chart.toolbar[\"export\"].csv.headerValue), l.push(n.join(a))), i.map(function (t, e) {\n          o.globals.axisCharts ? function (t, e) {\n            if (n.length && 0 === e && l.push(n.join(a)), t.data && t.data.length) for (var s = 0; s < t.data.length; s++) {\n              n = [];\n              var r = g(s);\n\n              if (r || (c.isFormatXY() ? r = i[e].data[s].x : c.isFormat2DArray() && (r = i[e].data[s] ? i[e].data[s][0] : \"\")), 0 === e) {\n                n.push((d = r, \"datetime\" === o.config.xaxis.type && String(d).length >= 10 ? o.config.chart.toolbar[\"export\"].csv.dateFormatter(r) : x.isNumber(r) ? r : r.split(a).join(\"\")));\n\n                for (var h = 0; h < o.globals.series.length; h++) {\n                  n.push(o.globals.series[h][s]);\n                }\n              }\n\n              (\"candlestick\" === o.config.chart.type || t.type && \"candlestick\" === t.type) && (n.pop(), n.push(o.globals.seriesCandleO[e][s]), n.push(o.globals.seriesCandleH[e][s]), n.push(o.globals.seriesCandleL[e][s]), n.push(o.globals.seriesCandleC[e][s])), (\"boxPlot\" === o.config.chart.type || t.type && \"boxPlot\" === t.type) && (n.pop(), n.push(o.globals.seriesCandleO[e][s]), n.push(o.globals.seriesCandleH[e][s]), n.push(o.globals.seriesCandleM[e][s]), n.push(o.globals.seriesCandleL[e][s]), n.push(o.globals.seriesCandleC[e][s])), \"rangeBar\" === o.config.chart.type && (n.pop(), n.push(o.globals.seriesRangeStart[e][s]), n.push(o.globals.seriesRangeEnd[e][s])), n.length && l.push(n.join(a));\n            }\n            var d;\n          }(t, e) : ((n = []).push(o.globals.labels[e].split(a).join(\"\")), n.push(o.globals.series[e]), l.push(n.join(a)));\n        }), h += l.join(r), this.triggerDownload(\"data:text/csv; charset=utf-8,\" + encodeURIComponent(\"\\uFEFF\" + h), o.config.chart.toolbar[\"export\"].csv.filename, \".csv\");\n      }\n    }, {\n      key: \"triggerDownload\",\n      value: function value(t, e, i) {\n        var a = document.createElement(\"a\");\n        a.href = t, a.download = (e || this.w.globals.chartID) + i, document.body.appendChild(a), a.click(), document.body.removeChild(a);\n      }\n    }]), t;\n  }(),\n      _ = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n      var i = this.w;\n      this.axesUtils = new G(e), this.xaxisLabels = i.globals.labels.slice(), i.globals.timescaleLabels.length > 0 && !i.globals.isBarHorizontal && (this.xaxisLabels = i.globals.timescaleLabels.slice()), i.config.xaxis.overwriteCategories && (this.xaxisLabels = i.config.xaxis.overwriteCategories), this.drawnLabels = [], this.drawnLabelsRects = [], \"top\" === i.config.xaxis.position ? this.offY = 0 : this.offY = i.globals.gridHeight + 1, this.offY = this.offY + i.config.xaxis.axisBorder.offsetY, this.isCategoryBarHorizontal = \"bar\" === i.config.chart.type && i.config.plotOptions.bar.horizontal, this.xaxisFontSize = i.config.xaxis.labels.style.fontSize, this.xaxisFontFamily = i.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = i.config.xaxis.labels.style.colors, this.xaxisBorderWidth = i.config.xaxis.axisBorder.width, this.isCategoryBarHorizontal && (this.xaxisBorderWidth = i.config.yaxis[0].axisBorder.width.toString()), this.xaxisBorderWidth.indexOf(\"%\") > -1 ? this.xaxisBorderWidth = i.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10) / 100 : this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10), this.xaxisBorderHeight = i.config.xaxis.axisBorder.height, this.yaxis = i.config.yaxis[0];\n    }\n\n    return r(t, [{\n      key: \"drawXaxis\",\n      value: function value() {\n        var t = this.w,\n            e = new m(this.ctx),\n            i = e.group({\n          \"class\": \"apexcharts-xaxis\",\n          transform: \"translate(\".concat(t.config.xaxis.offsetX, \", \").concat(t.config.xaxis.offsetY, \")\")\n        }),\n            a = e.group({\n          \"class\": \"apexcharts-xaxis-texts-g\",\n          transform: \"translate(\".concat(t.globals.translateXAxisX, \", \").concat(t.globals.translateXAxisY, \")\")\n        });\n        i.add(a);\n\n        for (var s = [], r = 0; r < this.xaxisLabels.length; r++) {\n          s.push(this.xaxisLabels[r]);\n        }\n\n        if (this.drawXAxisLabelAndGroup(!0, e, a, s, t.globals.isXNumeric, function (t, e) {\n          return e;\n        }), t.globals.hasGroups) {\n          var o = t.globals.groups;\n          s = [];\n\n          for (var n = 0; n < o.length; n++) {\n            s.push(o[n].title);\n          }\n\n          var l = {};\n          t.config.xaxis.group.style && (l.xaxisFontSize = t.config.xaxis.group.style.fontSize, l.xaxisFontFamily = t.config.xaxis.group.style.fontFamily, l.xaxisForeColors = t.config.xaxis.group.style.colors, l.fontWeight = t.config.xaxis.group.style.fontWeight, l.cssClass = t.config.xaxis.group.style.cssClass), this.drawXAxisLabelAndGroup(!1, e, a, s, !1, function (t, e) {\n            return o[t].cols * e;\n          }, l);\n        }\n\n        if (void 0 !== t.config.xaxis.title.text) {\n          var h = e.group({\n            \"class\": \"apexcharts-xaxis-title\"\n          }),\n              c = e.drawText({\n            x: t.globals.gridWidth / 2 + t.config.xaxis.title.offsetX,\n            y: this.offY + parseFloat(this.xaxisFontSize) + t.globals.xAxisLabelsHeight + t.config.xaxis.title.offsetY,\n            text: t.config.xaxis.title.text,\n            textAnchor: \"middle\",\n            fontSize: t.config.xaxis.title.style.fontSize,\n            fontFamily: t.config.xaxis.title.style.fontFamily,\n            fontWeight: t.config.xaxis.title.style.fontWeight,\n            foreColor: t.config.xaxis.title.style.color,\n            cssClass: \"apexcharts-xaxis-title-text \" + t.config.xaxis.title.style.cssClass\n          });\n          h.add(c), i.add(h);\n        }\n\n        if (t.config.xaxis.axisBorder.show) {\n          var d = t.globals.barPadForNumericAxis,\n              g = e.drawLine(t.globals.padHorizontal + t.config.xaxis.axisBorder.offsetX - d, this.offY, this.xaxisBorderWidth + d, this.offY, t.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);\n          i.add(g);\n        }\n\n        return i;\n      }\n    }, {\n      key: \"drawXAxisLabelAndGroup\",\n      value: function value(t, e, i, a, s, r) {\n        var o,\n            n = this,\n            l = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : {},\n            h = [],\n            c = [],\n            d = this.w,\n            g = l.xaxisFontSize || this.xaxisFontSize,\n            u = l.xaxisFontFamily || this.xaxisFontFamily,\n            f = l.xaxisForeColors || this.xaxisForeColors,\n            p = l.fontWeight || d.config.xaxis.labels.style.fontWeight,\n            x = l.cssClass || d.config.xaxis.labels.style.cssClass,\n            b = d.globals.padHorizontal,\n            v = a.length,\n            m = \"category\" === d.config.xaxis.type ? d.globals.dataPoints : v;\n\n        if (s) {\n          var y = m > 1 ? m - 1 : m;\n          o = d.globals.gridWidth / y, b = b + r(0, o) / 2 + d.config.xaxis.labels.offsetX;\n        } else o = d.globals.gridWidth / m, b = b + r(0, o) + d.config.xaxis.labels.offsetX;\n\n        for (var w = function w(s) {\n          var l = b - r(s, o) / 2 + d.config.xaxis.labels.offsetX;\n          0 === s && 1 === v && o / 2 === b && 1 === m && (l = d.globals.gridWidth / 2);\n          var y = n.axesUtils.getLabel(a, d.globals.timescaleLabels, l, s, h, g, t),\n              w = 28;\n          d.globals.rotateXLabels && t && (w = 22), t || (w = w + parseFloat(g) + (d.globals.xAxisLabelsHeight - d.globals.xAxisGroupLabelsHeight) + (d.globals.rotateXLabels ? 10 : 0)), y = void 0 !== d.config.xaxis.tickAmount && \"dataPoints\" !== d.config.xaxis.tickAmount && \"datetime\" !== d.config.xaxis.type ? n.axesUtils.checkLabelBasedOnTickamount(s, y, v) : n.axesUtils.checkForOverflowingLabels(s, y, v, h, c);\n\n          if (t && y.text && d.globals.xaxisLabelsCount++, d.config.xaxis.labels.show) {\n            var k = e.drawText({\n              x: y.x,\n              y: n.offY + d.config.xaxis.labels.offsetY + w - (\"top\" === d.config.xaxis.position ? d.globals.xAxisHeight + d.config.xaxis.axisTicks.height - 2 : 0),\n              text: y.text,\n              textAnchor: \"middle\",\n              fontWeight: y.isBold ? 600 : p,\n              fontSize: g,\n              fontFamily: u,\n              foreColor: Array.isArray(f) ? t && d.config.xaxis.convertedCatToNumeric ? f[d.globals.minX + s - 1] : f[s] : f,\n              isPlainText: !1,\n              cssClass: (t ? \"apexcharts-xaxis-label \" : \"apexcharts-xaxis-group-label \") + x\n            });\n\n            if (i.add(k), t) {\n              var A = document.createElementNS(d.globals.SVGNS, \"title\");\n              A.textContent = Array.isArray(y.text) ? y.text.join(\" \") : y.text, k.node.appendChild(A), \"\" !== y.text && (h.push(y.text), c.push(y));\n            }\n          }\n\n          s < v - 1 && (b += r(s + 1, o));\n        }, k = 0; k <= v - 1; k++) {\n          w(k);\n        }\n      }\n    }, {\n      key: \"drawXaxisInversed\",\n      value: function value(t) {\n        var e,\n            i,\n            a = this,\n            s = this.w,\n            r = new m(this.ctx),\n            o = s.config.yaxis[0].opposite ? s.globals.translateYAxisX[t] : 0,\n            n = r.group({\n          \"class\": \"apexcharts-yaxis apexcharts-xaxis-inversed\",\n          rel: t\n        }),\n            l = r.group({\n          \"class\": \"apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g\",\n          transform: \"translate(\" + o + \", 0)\"\n        });\n        n.add(l);\n        var h = [];\n        if (s.config.yaxis[t].show) for (var c = 0; c < this.xaxisLabels.length; c++) {\n          h.push(this.xaxisLabels[c]);\n        }\n        e = s.globals.gridHeight / h.length, i = -e / 2.2;\n        var d = s.globals.yLabelFormatters[0],\n            g = s.config.yaxis[0].labels;\n        if (g.show) for (var u = function u(o) {\n          var n = void 0 === h[o] ? \"\" : h[o];\n          n = d(n, {\n            seriesIndex: t,\n            dataPointIndex: o,\n            w: s\n          });\n          var c = a.axesUtils.getYAxisForeColor(g.style.colors, t),\n              u = 0;\n          Array.isArray(n) && (u = n.length / 2 * parseInt(g.style.fontSize, 10));\n          var f = r.drawText({\n            x: g.offsetX - 15,\n            y: i + e + g.offsetY - u,\n            text: n,\n            textAnchor: a.yaxis.opposite ? \"start\" : \"end\",\n            foreColor: Array.isArray(c) ? c[o] : c,\n            fontSize: g.style.fontSize,\n            fontFamily: g.style.fontFamily,\n            fontWeight: g.style.fontWeight,\n            isPlainText: !1,\n            cssClass: \"apexcharts-yaxis-label \" + g.style.cssClass\n          });\n          l.add(f);\n          var p = document.createElementNS(s.globals.SVGNS, \"title\");\n\n          if (p.textContent = Array.isArray(n) ? n.join(\" \") : n, f.node.appendChild(p), 0 !== s.config.yaxis[t].labels.rotate) {\n            var x = r.rotateAroundCenter(f.node);\n            f.node.setAttribute(\"transform\", \"rotate(\".concat(s.config.yaxis[t].labels.rotate, \" 0 \").concat(x.y, \")\"));\n          }\n\n          i += e;\n        }, f = 0; f <= h.length - 1; f++) {\n          u(f);\n        }\n\n        if (void 0 !== s.config.yaxis[0].title.text) {\n          var p = r.group({\n            \"class\": \"apexcharts-yaxis-title apexcharts-xaxis-title-inversed\",\n            transform: \"translate(\" + o + \", 0)\"\n          }),\n              x = r.drawText({\n            x: 0,\n            y: s.globals.gridHeight / 2,\n            text: s.config.yaxis[0].title.text,\n            textAnchor: \"middle\",\n            foreColor: s.config.yaxis[0].title.style.color,\n            fontSize: s.config.yaxis[0].title.style.fontSize,\n            fontWeight: s.config.yaxis[0].title.style.fontWeight,\n            fontFamily: s.config.yaxis[0].title.style.fontFamily,\n            cssClass: \"apexcharts-yaxis-title-text \" + s.config.yaxis[0].title.style.cssClass\n          });\n          p.add(x), n.add(p);\n        }\n\n        var b = 0;\n        this.isCategoryBarHorizontal && s.config.yaxis[0].opposite && (b = s.globals.gridWidth);\n        var v = s.config.xaxis.axisBorder;\n\n        if (v.show) {\n          var y = r.drawLine(s.globals.padHorizontal + v.offsetX + b, 1 + v.offsetY, s.globals.padHorizontal + v.offsetX + b, s.globals.gridHeight + v.offsetY, v.color, 0);\n          n.add(y);\n        }\n\n        return s.config.yaxis[0].axisTicks.show && this.axesUtils.drawYAxisTicks(b, h.length, s.config.yaxis[0].axisBorder, s.config.yaxis[0].axisTicks, 0, e, n), n;\n      }\n    }, {\n      key: \"drawXaxisTicks\",\n      value: function value(t, e, i) {\n        var a = this.w,\n            s = t;\n\n        if (!(t < 0 || t - 2 > a.globals.gridWidth)) {\n          var r = this.offY + a.config.xaxis.axisTicks.offsetY;\n\n          if (e = e + r + a.config.xaxis.axisTicks.height, \"top\" === a.config.xaxis.position && (e = r - a.config.xaxis.axisTicks.height), a.config.xaxis.axisTicks.show) {\n            var o = new m(this.ctx).drawLine(t + a.config.xaxis.axisTicks.offsetX, r + a.config.xaxis.offsetY, s + a.config.xaxis.axisTicks.offsetX, e + a.config.xaxis.offsetY, a.config.xaxis.axisTicks.color);\n            i.add(o), o.node.classList.add(\"apexcharts-xaxis-tick\");\n          }\n        }\n      }\n    }, {\n      key: \"getXAxisTicksPositions\",\n      value: function value() {\n        var t = this.w,\n            e = [],\n            i = this.xaxisLabels.length,\n            a = t.globals.padHorizontal;\n        if (t.globals.timescaleLabels.length > 0) for (var s = 0; s < i; s++) {\n          a = this.xaxisLabels[s].position, e.push(a);\n        } else for (var r = i, o = 0; o < r; o++) {\n          var n = r;\n          t.globals.isXNumeric && \"bar\" !== t.config.chart.type && (n -= 1), a += t.globals.gridWidth / n, e.push(a);\n        }\n        return e;\n      }\n    }, {\n      key: \"xAxisLabelCorrections\",\n      value: function value() {\n        var t = this.w,\n            e = new m(this.ctx),\n            i = t.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-texts-g\"),\n            a = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)\"),\n            s = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis-inversed text\"),\n            r = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-xaxis-inversed-texts-g text tspan\");\n        if (t.globals.rotateXLabels || t.config.xaxis.labels.rotateAlways) for (var o = 0; o < a.length; o++) {\n          var n = e.rotateAroundCenter(a[o]);\n          n.y = n.y - 1, n.x = n.x + 1, a[o].setAttribute(\"transform\", \"rotate(\".concat(t.config.xaxis.labels.rotate, \" \").concat(n.x, \" \").concat(n.y, \")\")), a[o].setAttribute(\"text-anchor\", \"end\");\n          i.setAttribute(\"transform\", \"translate(0, \".concat(-10, \")\"));\n          var l = a[o].childNodes;\n          t.config.xaxis.labels.trim && Array.prototype.forEach.call(l, function (i) {\n            e.placeTextWithEllipsis(i, i.textContent, t.globals.xAxisLabelsHeight - (\"bottom\" === t.config.legend.position ? 20 : 10));\n          });\n        } else !function () {\n          for (var i = t.globals.gridWidth / (t.globals.labels.length + 1), s = 0; s < a.length; s++) {\n            var r = a[s].childNodes;\n            t.config.xaxis.labels.trim && \"datetime\" !== t.config.xaxis.type && Array.prototype.forEach.call(r, function (t) {\n              e.placeTextWithEllipsis(t, t.textContent, i);\n            });\n          }\n        }();\n\n        if (s.length > 0) {\n          var h = s[s.length - 1].getBBox(),\n              c = s[0].getBBox();\n          h.x < -20 && s[s.length - 1].parentNode.removeChild(s[s.length - 1]), c.x + c.width > t.globals.gridWidth && !t.globals.isBarHorizontal && s[0].parentNode.removeChild(s[0]);\n\n          for (var d = 0; d < r.length; d++) {\n            e.placeTextWithEllipsis(r[d], r[d].textContent, t.config.yaxis[0].labels.maxWidth - (t.config.yaxis[0].title.text ? 2 * parseFloat(t.config.yaxis[0].title.style.fontSize) : 0) - 15);\n          }\n        }\n      }\n    }]), t;\n  }(),\n      U = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n      var i = this.w;\n      this.xaxisLabels = i.globals.labels.slice(), this.axesUtils = new G(e), this.isRangeBar = i.globals.seriesRangeBar.length, i.globals.timescaleLabels.length > 0 && (this.xaxisLabels = i.globals.timescaleLabels.slice());\n    }\n\n    return r(t, [{\n      key: \"drawGridArea\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,\n            e = this.w,\n            i = new m(this.ctx);\n        null === t && (t = i.group({\n          \"class\": \"apexcharts-grid\"\n        }));\n        var a = i.drawLine(e.globals.padHorizontal, 1, e.globals.padHorizontal, e.globals.gridHeight, \"transparent\"),\n            s = i.drawLine(e.globals.padHorizontal, e.globals.gridHeight, e.globals.gridWidth, e.globals.gridHeight, \"transparent\");\n        return t.add(s), t.add(a), t;\n      }\n    }, {\n      key: \"drawGrid\",\n      value: function value() {\n        var t = null;\n        return this.w.globals.axisCharts && (t = this.renderGrid(), this.drawGridArea(t.el)), t;\n      }\n    }, {\n      key: \"createGridMask\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals,\n            i = new m(this.ctx),\n            a = Array.isArray(t.config.stroke.width) ? 0 : t.config.stroke.width;\n\n        if (Array.isArray(t.config.stroke.width)) {\n          var s = 0;\n          t.config.stroke.width.forEach(function (t) {\n            s = Math.max(s, t);\n          }), a = s;\n        }\n\n        e.dom.elGridRectMask = document.createElementNS(e.SVGNS, \"clipPath\"), e.dom.elGridRectMask.setAttribute(\"id\", \"gridRectMask\".concat(e.cuid)), e.dom.elGridRectMarkerMask = document.createElementNS(e.SVGNS, \"clipPath\"), e.dom.elGridRectMarkerMask.setAttribute(\"id\", \"gridRectMarkerMask\".concat(e.cuid)), e.dom.elForecastMask = document.createElementNS(e.SVGNS, \"clipPath\"), e.dom.elForecastMask.setAttribute(\"id\", \"forecastMask\".concat(e.cuid)), e.dom.elNonForecastMask = document.createElementNS(e.SVGNS, \"clipPath\"), e.dom.elNonForecastMask.setAttribute(\"id\", \"nonForecastMask\".concat(e.cuid));\n        var r = t.config.chart.type,\n            o = 0,\n            n = 0;\n        (\"bar\" === r || \"rangeBar\" === r || \"candlestick\" === r || \"boxPlot\" === r || t.globals.comboBarCount > 0) && t.globals.isXNumeric && !t.globals.isBarHorizontal && (o = t.config.grid.padding.left, n = t.config.grid.padding.right, e.barPadForNumericAxis > o && (o = e.barPadForNumericAxis, n = e.barPadForNumericAxis)), e.dom.elGridRect = i.drawRect(-a / 2 - o - 2, -a / 2, e.gridWidth + a + n + o + 4, e.gridHeight + a, 0, \"#fff\");\n        var l = t.globals.markers.largestSize + 1;\n        e.dom.elGridRectMarker = i.drawRect(2 * -l, 2 * -l, e.gridWidth + 4 * l, e.gridHeight + 4 * l, 0, \"#fff\"), e.dom.elGridRectMask.appendChild(e.dom.elGridRect.node), e.dom.elGridRectMarkerMask.appendChild(e.dom.elGridRectMarker.node);\n        var h = e.dom.baseEl.querySelector(\"defs\");\n        h.appendChild(e.dom.elGridRectMask), h.appendChild(e.dom.elForecastMask), h.appendChild(e.dom.elNonForecastMask), h.appendChild(e.dom.elGridRectMarkerMask);\n      }\n    }, {\n      key: \"_drawGridLines\",\n      value: function value(t) {\n        var e = t.i,\n            i = t.x1,\n            a = t.y1,\n            s = t.x2,\n            r = t.y2,\n            o = t.xCount,\n            n = t.parent,\n            l = this.w;\n\n        if (!(0 === e && l.globals.skipFirstTimelinelabel || e === o - 1 && l.globals.skipLastTimelinelabel && !l.config.xaxis.labels.formatter || \"radar\" === l.config.chart.type)) {\n          l.config.grid.xaxis.lines.show && this._drawGridLine({\n            x1: i,\n            y1: a,\n            x2: s,\n            y2: r,\n            parent: n\n          });\n          var h = 0;\n\n          if (l.globals.hasGroups && \"between\" === l.config.xaxis.tickPlacement) {\n            var c = l.globals.groups;\n\n            if (c) {\n              for (var d = 0, g = 0; d < e && g < c.length; g++) {\n                d += c[g].cols;\n              }\n\n              d === e && (h = .6 * l.globals.xAxisLabelsHeight);\n            }\n          }\n\n          new _(this.ctx).drawXaxisTicks(i, h, this.elg);\n        }\n      }\n    }, {\n      key: \"_drawGridLine\",\n      value: function value(t) {\n        var e = t.x1,\n            i = t.y1,\n            a = t.x2,\n            s = t.y2,\n            r = t.parent,\n            o = this.w,\n            n = r.node.classList.contains(\"apexcharts-gridlines-horizontal\"),\n            l = o.config.grid.strokeDashArray,\n            h = o.globals.barPadForNumericAxis,\n            c = new m(this).drawLine(e - (n ? h : 0), i, a + (n ? h : 0), s, o.config.grid.borderColor, l);\n        c.node.classList.add(\"apexcharts-gridline\"), r.add(c);\n      }\n    }, {\n      key: \"_drawGridBandRect\",\n      value: function value(t) {\n        var e = t.c,\n            i = t.x1,\n            a = t.y1,\n            s = t.x2,\n            r = t.y2,\n            o = t.type,\n            n = this.w,\n            l = new m(this.ctx),\n            h = n.globals.barPadForNumericAxis;\n\n        if (\"column\" !== o || \"datetime\" !== n.config.xaxis.type) {\n          var c = n.config.grid[o].colors[e],\n              d = l.drawRect(i - (\"row\" === o ? h : 0), a, s + (\"row\" === o ? 2 * h : 0), r, 0, c, n.config.grid[o].opacity);\n          this.elg.add(d), d.attr(\"clip-path\", \"url(#gridRectMask\".concat(n.globals.cuid, \")\")), d.node.classList.add(\"apexcharts-grid-\".concat(o));\n        }\n      }\n    }, {\n      key: \"_drawXYLines\",\n      value: function value(t) {\n        var e = this,\n            i = t.xCount,\n            a = t.tickAmount,\n            s = this.w;\n\n        if (s.config.grid.xaxis.lines.show || s.config.xaxis.axisTicks.show) {\n          var r,\n              o = s.globals.padHorizontal,\n              n = s.globals.gridHeight;\n          s.globals.timescaleLabels.length ? function (t) {\n            for (var a = t.xC, s = t.x1, r = t.y1, o = t.x2, n = t.y2, l = 0; l < a; l++) {\n              s = e.xaxisLabels[l].position, o = e.xaxisLabels[l].position, e._drawGridLines({\n                i: l,\n                x1: s,\n                y1: r,\n                x2: o,\n                y2: n,\n                xCount: i,\n                parent: e.elgridLinesV\n              });\n            }\n          }({\n            xC: i,\n            x1: o,\n            y1: 0,\n            x2: r,\n            y2: n\n          }) : (s.globals.isXNumeric && (i = s.globals.xAxisScale.result.length), s.config.xaxis.convertedCatToNumeric && (i = s.globals.xaxisLabelsCount), function (t) {\n            var a = t.xC,\n                r = t.x1,\n                o = t.y1,\n                n = t.x2,\n                l = t.y2;\n            if (void 0 !== s.config.xaxis.tickAmount && \"dataPoints\" !== s.config.xaxis.tickAmount && \"on\" === s.config.xaxis.tickPlacement) s.globals.dom.baseEl.querySelectorAll(\".apexcharts-text.apexcharts-xaxis-label tspan:not(:empty)\").forEach(function (t, a) {\n              var s = t.getBBox();\n\n              e._drawGridLines({\n                i: a,\n                x1: s.x + s.width / 2,\n                y1: o,\n                x2: s.x + s.width / 2,\n                y2: l,\n                xCount: i,\n                parent: e.elgridLinesV\n              });\n            });else for (var h = 0; h < a + (s.globals.isXNumeric ? 0 : 1); h++) {\n              0 === h && 1 === a && 1 === s.globals.dataPoints && (n = r = s.globals.gridWidth / 2), e._drawGridLines({\n                i: h,\n                x1: r,\n                y1: o,\n                x2: n,\n                y2: l,\n                xCount: i,\n                parent: e.elgridLinesV\n              }), n = r += s.globals.gridWidth / (s.globals.isXNumeric ? a - 1 : a);\n            }\n          }({\n            xC: i,\n            x1: o,\n            y1: 0,\n            x2: r,\n            y2: n\n          }));\n        }\n\n        if (s.config.grid.yaxis.lines.show) {\n          var l = 0,\n              h = 0,\n              c = s.globals.gridWidth,\n              d = a + 1;\n          this.isRangeBar && (d = s.globals.labels.length);\n\n          for (var g = 0; g < d + (this.isRangeBar ? 1 : 0); g++) {\n            this._drawGridLine({\n              x1: 0,\n              y1: l,\n              x2: c,\n              y2: h,\n              parent: this.elgridLinesH\n            }), h = l += s.globals.gridHeight / (this.isRangeBar ? d : a);\n          }\n        }\n      }\n    }, {\n      key: \"_drawInvertedXYLines\",\n      value: function value(t) {\n        var e = t.xCount,\n            i = this.w;\n        if (i.config.grid.xaxis.lines.show || i.config.xaxis.axisTicks.show) for (var a, s = i.globals.padHorizontal, r = i.globals.gridHeight, o = 0; o < e + 1; o++) {\n          i.config.grid.xaxis.lines.show && this._drawGridLine({\n            x1: s,\n            y1: 0,\n            x2: a,\n            y2: r,\n            parent: this.elgridLinesV\n          }), new _(this.ctx).drawXaxisTicks(s, 0, this.elg), a = s = s + i.globals.gridWidth / e + .3;\n        }\n        if (i.config.grid.yaxis.lines.show) for (var n = 0, l = 0, h = i.globals.gridWidth, c = 0; c < i.globals.dataPoints + 1; c++) {\n          this._drawGridLine({\n            x1: 0,\n            y1: n,\n            x2: h,\n            y2: l,\n            parent: this.elgridLinesH\n          }), l = n += i.globals.gridHeight / i.globals.dataPoints;\n        }\n      }\n    }, {\n      key: \"renderGrid\",\n      value: function value() {\n        var t = this.w,\n            e = new m(this.ctx);\n        this.elg = e.group({\n          \"class\": \"apexcharts-grid\"\n        }), this.elgridLinesH = e.group({\n          \"class\": \"apexcharts-gridlines-horizontal\"\n        }), this.elgridLinesV = e.group({\n          \"class\": \"apexcharts-gridlines-vertical\"\n        }), this.elg.add(this.elgridLinesH), this.elg.add(this.elgridLinesV), t.config.grid.show || (this.elgridLinesV.hide(), this.elgridLinesH.hide());\n\n        for (var i, a = t.globals.yAxisScale.length ? t.globals.yAxisScale[0].result.length - 1 : 5, s = 0; s < t.globals.series.length && (void 0 !== t.globals.yAxisScale[s] && (a = t.globals.yAxisScale[s].result.length - 1), !(a > 2)); s++) {\n          ;\n        }\n\n        return !t.globals.isBarHorizontal || this.isRangeBar ? (i = this.xaxisLabels.length, this.isRangeBar && (a = t.globals.labels.length, t.config.xaxis.tickAmount && t.config.xaxis.labels.formatter && (i = t.config.xaxis.tickAmount)), this._drawXYLines({\n          xCount: i,\n          tickAmount: a\n        })) : (i = a, a = t.globals.xTickAmount, this._drawInvertedXYLines({\n          xCount: i,\n          tickAmount: a\n        })), this.drawGridBands(i, a), {\n          el: this.elg,\n          xAxisTickWidth: t.globals.gridWidth / i\n        };\n      }\n    }, {\n      key: \"drawGridBands\",\n      value: function value(t, e) {\n        var i = this.w;\n        if (void 0 !== i.config.grid.row.colors && i.config.grid.row.colors.length > 0) for (var a = 0, s = i.globals.gridHeight / e, r = i.globals.gridWidth, o = 0, n = 0; o < e; o++, n++) {\n          n >= i.config.grid.row.colors.length && (n = 0), this._drawGridBandRect({\n            c: n,\n            x1: 0,\n            y1: a,\n            x2: r,\n            y2: s,\n            type: \"row\"\n          }), a += i.globals.gridHeight / e;\n        }\n        if (void 0 !== i.config.grid.column.colors && i.config.grid.column.colors.length > 0) for (var l = i.globals.isBarHorizontal || \"category\" !== i.config.xaxis.type && !i.config.xaxis.convertedCatToNumeric ? t : t - 1, h = i.globals.padHorizontal, c = i.globals.padHorizontal + i.globals.gridWidth / l, d = i.globals.gridHeight, g = 0, u = 0; g < t; g++, u++) {\n          u >= i.config.grid.column.colors.length && (u = 0), this._drawGridBandRect({\n            c: u,\n            x1: h,\n            y1: 0,\n            x2: c,\n            y2: d,\n            type: \"column\"\n          }), h += i.globals.gridWidth / l;\n        }\n      }\n    }]), t;\n  }(),\n      q = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"niceScale\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10,\n            a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,\n            s = arguments.length > 4 ? arguments[4] : void 0,\n            r = this.w,\n            o = Math.abs(e - t);\n\n        if (\"dataPoints\" === (i = this._adjustTicksForSmallRange(i, a, o)) && (i = r.globals.dataPoints - 1), t === Number.MIN_VALUE && 0 === e || !x.isNumber(t) && !x.isNumber(e) || t === Number.MIN_VALUE && e === -Number.MAX_VALUE) {\n          t = 0, e = i;\n          var n = this.linearScale(t, e, i);\n          return n;\n        }\n\n        t > e ? (console.warn(\"axis.min cannot be greater than axis.max\"), e = t + .1) : t === e && (t = 0 === t ? 0 : t - .5, e = 0 === e ? 2 : e + .5);\n        var l = [];\n        o < 1 && s && (\"candlestick\" === r.config.chart.type || \"candlestick\" === r.config.series[a].type || \"boxPlot\" === r.config.chart.type || \"boxPlot\" === r.config.series[a].type || r.globals.isRangeData) && (e *= 1.01);\n        var h = i + 1;\n        h < 2 ? h = 2 : h > 2 && (h -= 2);\n        var c = o / h,\n            d = Math.floor(x.log10(c)),\n            g = Math.pow(10, d),\n            u = Math.round(c / g);\n        u < 1 && (u = 1);\n        var f = u * g,\n            p = f * Math.floor(t / f),\n            b = f * Math.ceil(e / f),\n            v = p;\n\n        if (s && o > 2) {\n          for (; l.push(v), !((v += f) > b);) {\n            ;\n          }\n\n          return {\n            result: l,\n            niceMin: l[0],\n            niceMax: l[l.length - 1]\n          };\n        }\n\n        var m = t;\n        (l = []).push(m);\n\n        for (var y = Math.abs(e - t) / i, w = 0; w <= i; w++) {\n          m += y, l.push(m);\n        }\n\n        return l[l.length - 2] >= e && l.pop(), {\n          result: l,\n          niceMin: l[0],\n          niceMax: l[l.length - 1]\n        };\n      }\n    }, {\n      key: \"linearScale\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10,\n            a = arguments.length > 3 ? arguments[3] : void 0,\n            s = Math.abs(e - t);\n        \"dataPoints\" === (i = this._adjustTicksForSmallRange(i, a, s)) && (i = this.w.globals.dataPoints - 1);\n        var r = s / i;\n        i === Number.MAX_VALUE && (i = 10, r = 1);\n\n        for (var o = [], n = t; i >= 0;) {\n          o.push(n), n += r, i -= 1;\n        }\n\n        return {\n          result: o,\n          niceMin: o[0],\n          niceMax: o[o.length - 1]\n        };\n      }\n    }, {\n      key: \"logarithmicScaleNice\",\n      value: function value(t, e, i) {\n        e <= 0 && (e = Math.max(t, i)), t <= 0 && (t = Math.min(e, i));\n\n        for (var a = [], s = Math.ceil(Math.log(e) / Math.log(i) + 1), r = Math.floor(Math.log(t) / Math.log(i)); r < s; r++) {\n          a.push(Math.pow(i, r));\n        }\n\n        return {\n          result: a,\n          niceMin: a[0],\n          niceMax: a[a.length - 1]\n        };\n      }\n    }, {\n      key: \"logarithmicScale\",\n      value: function value(t, e, i) {\n        e <= 0 && (e = Math.max(t, i)), t <= 0 && (t = Math.min(e, i));\n\n        for (var a = [], s = Math.log(e) / Math.log(i), r = Math.log(t) / Math.log(i), o = s - r, n = Math.round(o), l = o / n, h = 0, c = r; h < n; h++, c += l) {\n          a.push(Math.pow(i, c));\n        }\n\n        return a.push(Math.pow(i, s)), {\n          result: a,\n          niceMin: t,\n          niceMax: e\n        };\n      }\n    }, {\n      key: \"_adjustTicksForSmallRange\",\n      value: function value(t, e, i) {\n        var a = t;\n\n        if (void 0 !== e && this.w.config.yaxis[e].labels.formatter && void 0 === this.w.config.yaxis[e].tickAmount) {\n          var s = this.w.config.yaxis[e].labels.formatter(1);\n          x.isNumber(Number(s)) && !x.isFloat(s) && (a = Math.ceil(i));\n        }\n\n        return a < t ? a : t;\n      }\n    }, {\n      key: \"setYScaleForIndex\",\n      value: function value(t, e, i) {\n        var a = this.w.globals,\n            s = this.w.config,\n            r = a.isBarHorizontal ? s.xaxis : s.yaxis[t];\n        void 0 === a.yAxisScale[t] && (a.yAxisScale[t] = []);\n        var o = Math.abs(i - e);\n        if (r.logarithmic && o <= 5 && (a.invalidLogScale = !0), r.logarithmic && o > 5) a.allSeriesCollapsed = !1, a.yAxisScale[t] = this.logarithmicScale(e, i, r.logBase), a.yAxisScale[t] = r.forceNiceScale ? this.logarithmicScaleNice(e, i, r.logBase) : this.logarithmicScale(e, i, r.logBase);else if (i !== -Number.MAX_VALUE && x.isNumber(i)) {\n          if (a.allSeriesCollapsed = !1, void 0 === r.min && void 0 === r.max || r.forceNiceScale) {\n            var n = void 0 === s.yaxis[t].max && void 0 === s.yaxis[t].min || s.yaxis[t].forceNiceScale;\n            a.yAxisScale[t] = this.niceScale(e, i, r.tickAmount ? r.tickAmount : o < 5 && o > 1 ? o + 1 : 5, t, n);\n          } else a.yAxisScale[t] = this.linearScale(e, i, r.tickAmount, t);\n        } else a.yAxisScale[t] = this.linearScale(0, 5, 5);\n      }\n    }, {\n      key: \"setXScale\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = i.globals,\n            s = i.config.xaxis,\n            r = Math.abs(e - t);\n        return e !== -Number.MAX_VALUE && x.isNumber(e) ? a.xAxisScale = this.linearScale(t, e, s.tickAmount ? s.tickAmount : r < 5 && r > 1 ? r + 1 : 5, 0) : a.xAxisScale = this.linearScale(0, 5, 5), a.xAxisScale;\n      }\n    }, {\n      key: \"setMultipleYScales\",\n      value: function value() {\n        var t = this,\n            e = this.w.globals,\n            i = this.w.config,\n            a = e.minYArr.concat([]),\n            s = e.maxYArr.concat([]),\n            r = [];\n        i.yaxis.forEach(function (e, o) {\n          var n = o;\n          i.series.forEach(function (t, i) {\n            t.name === e.seriesName && (n = i, o !== i ? r.push({\n              index: i,\n              similarIndex: o,\n              alreadyExists: !0\n            }) : r.push({\n              index: i\n            }));\n          });\n          var l = a[n],\n              h = s[n];\n          t.setYScaleForIndex(o, l, h);\n        }), this.sameScaleInMultipleAxes(a, s, r);\n      }\n    }, {\n      key: \"sameScaleInMultipleAxes\",\n      value: function value(t, e, i) {\n        var a = this,\n            s = this.w.config,\n            r = this.w.globals,\n            o = [];\n        i.forEach(function (t) {\n          t.alreadyExists && (void 0 === o[t.index] && (o[t.index] = []), o[t.index].push(t.index), o[t.index].push(t.similarIndex));\n        }), r.yAxisSameScaleIndices = o, o.forEach(function (t, e) {\n          o.forEach(function (i, a) {\n            var s, r;\n            e !== a && (s = t, r = i, s.filter(function (t) {\n              return -1 !== r.indexOf(t);\n            })).length > 0 && (o[e] = o[e].concat(o[a]));\n          });\n        });\n        var n = o.map(function (t) {\n          return t.filter(function (e, i) {\n            return t.indexOf(e) === i;\n          });\n        }).map(function (t) {\n          return t.sort();\n        });\n        o = o.filter(function (t) {\n          return !!t;\n        });\n        var l = n.slice(),\n            h = l.map(function (t) {\n          return JSON.stringify(t);\n        });\n        l = l.filter(function (t, e) {\n          return h.indexOf(JSON.stringify(t)) === e;\n        });\n        var c = [],\n            d = [];\n        t.forEach(function (t, i) {\n          l.forEach(function (a, s) {\n            a.indexOf(i) > -1 && (void 0 === c[s] && (c[s] = [], d[s] = []), c[s].push({\n              key: i,\n              value: t\n            }), d[s].push({\n              key: i,\n              value: e[i]\n            }));\n          });\n        });\n        var g = Array.apply(null, Array(l.length)).map(Number.prototype.valueOf, Number.MIN_VALUE),\n            u = Array.apply(null, Array(l.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);\n        c.forEach(function (t, e) {\n          t.forEach(function (t, i) {\n            g[e] = Math.min(t.value, g[e]);\n          });\n        }), d.forEach(function (t, e) {\n          t.forEach(function (t, i) {\n            u[e] = Math.max(t.value, u[e]);\n          });\n        }), t.forEach(function (t, e) {\n          d.forEach(function (t, i) {\n            var o = g[i],\n                n = u[i];\n            s.chart.stacked && (n = 0, t.forEach(function (t, e) {\n              t.value !== -Number.MAX_VALUE && (n += t.value), o !== Number.MIN_VALUE && (o += c[i][e].value);\n            })), t.forEach(function (i, l) {\n              t[l].key === e && (void 0 !== s.yaxis[e].min && (o = \"function\" == typeof s.yaxis[e].min ? s.yaxis[e].min(r.minY) : s.yaxis[e].min), void 0 !== s.yaxis[e].max && (n = \"function\" == typeof s.yaxis[e].max ? s.yaxis[e].max(r.maxY) : s.yaxis[e].max), a.setYScaleForIndex(e, o, n));\n            });\n          });\n        });\n      }\n    }, {\n      key: \"autoScaleY\",\n      value: function value(t, e, i) {\n        t || (t = this);\n        var a = t.w;\n        if (a.globals.isMultipleYAxis || a.globals.collapsedSeries.length) return console.warn(\"autoScaleYaxis is not supported in a multi-yaxis chart.\"), e;\n        var s = a.globals.seriesX[0],\n            r = a.config.chart.stacked;\n        return e.forEach(function (t, o) {\n          for (var n = 0, l = 0; l < s.length; l++) {\n            if (s[l] >= i.xaxis.min) {\n              n = l;\n              break;\n            }\n          }\n\n          var h,\n              c,\n              d = a.globals.minYArr[o],\n              g = a.globals.maxYArr[o],\n              u = a.globals.stackedSeriesTotals;\n          a.globals.series.forEach(function (o, l) {\n            var f = o[n];\n            r ? (f = u[n], h = c = f, u.forEach(function (t, e) {\n              s[e] <= i.xaxis.max && s[e] >= i.xaxis.min && (t > c && null !== t && (c = t), o[e] < h && null !== o[e] && (h = o[e]));\n            })) : (h = c = f, o.forEach(function (t, e) {\n              if (s[e] <= i.xaxis.max && s[e] >= i.xaxis.min) {\n                var r = t,\n                    o = t;\n                a.globals.series.forEach(function (i, a) {\n                  null !== t && (r = Math.min(i[e], r), o = Math.max(i[e], o));\n                }), o > c && null !== o && (c = o), r < h && null !== r && (h = r);\n              }\n            })), void 0 === h && void 0 === c && (h = d, c = g), (c *= c < 0 ? .9 : 1.1) < 0 && c < g && (c = g), (h *= h < 0 ? 1.1 : .9) < 0 && h > d && (h = d), e.length > 1 ? (e[l].min = void 0 === t.min ? h : t.min, e[l].max = void 0 === t.max ? c : t.max) : (e[0].min = void 0 === t.min ? h : t.min, e[0].max = void 0 === t.max ? c : t.max);\n          });\n        }), e;\n      }\n    }]), t;\n  }(),\n      Z = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w, this.scales = new q(e);\n    }\n\n    return r(t, [{\n      key: \"init\",\n      value: function value() {\n        this.setYRange(), this.setXRange(), this.setZRange();\n      }\n    }, {\n      key: \"getMinYMaxY\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Number.MAX_VALUE,\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -Number.MAX_VALUE,\n            a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,\n            s = this.w.config,\n            r = this.w.globals,\n            o = -Number.MAX_VALUE,\n            n = Number.MIN_VALUE;\n        null === a && (a = t + 1);\n        var l = r.series,\n            h = l,\n            c = l;\n        \"candlestick\" === s.chart.type ? (h = r.seriesCandleL, c = r.seriesCandleH) : \"boxPlot\" === s.chart.type ? (h = r.seriesCandleO, c = r.seriesCandleC) : r.isRangeData && (h = r.seriesRangeStart, c = r.seriesRangeEnd);\n\n        for (var d = t; d < a; d++) {\n          r.dataPoints = Math.max(r.dataPoints, l[d].length), r.categoryLabels.length && (r.dataPoints = r.categoryLabels.filter(function (t) {\n            return void 0 !== t;\n          }).length);\n\n          for (var g = 0; g < r.series[d].length; g++) {\n            var u = l[d][g];\n            null !== u && x.isNumber(u) ? (void 0 !== c[d][g] && (o = Math.max(o, c[d][g]), e = Math.min(e, c[d][g])), void 0 !== h[d][g] && (e = Math.min(e, h[d][g]), i = Math.max(i, h[d][g])), \"candlestick\" !== this.w.config.chart.type && \"boxPlot\" !== this.w.config.chart.type || (void 0 !== r.seriesCandleC[d][g] && (o = Math.max(o, r.seriesCandleO[d][g]), o = Math.max(o, r.seriesCandleH[d][g]), o = Math.max(o, r.seriesCandleL[d][g]), o = Math.max(o, r.seriesCandleC[d][g]), \"boxPlot\" === this.w.config.chart.type && (o = Math.max(o, r.seriesCandleM[d][g]))), !s.series[d].type || \"candlestick\" === s.series[d].type && \"boxPlot\" === s.series[d].type || (o = Math.max(o, r.series[d][g]), e = Math.min(e, r.series[d][g])), i = o), r.seriesGoals[d] && r.seriesGoals[d][g] && Array.isArray(r.seriesGoals[d][g]) && r.seriesGoals[d][g].forEach(function (t) {\n              n !== Number.MIN_VALUE && (n = Math.min(n, t.value), e = n), o = Math.max(o, t.value), i = o;\n            }), x.isFloat(u) && (u = x.noExponents(u), r.yValueDecimal = Math.max(r.yValueDecimal, u.toString().split(\".\")[1].length)), n > h[d][g] && h[d][g] < 0 && (n = h[d][g])) : r.hasNullValues = !0;\n          }\n        }\n\n        return \"rangeBar\" === s.chart.type && r.seriesRangeStart.length && r.isBarHorizontal && (n = e), \"bar\" === s.chart.type && (n < 0 && o < 0 && (o = 0), n === Number.MIN_VALUE && (n = 0)), {\n          minY: n,\n          maxY: o,\n          lowestY: e,\n          highestY: i\n        };\n      }\n    }, {\n      key: \"setYRange\",\n      value: function value() {\n        var t = this.w.globals,\n            e = this.w.config;\n        t.maxY = -Number.MAX_VALUE, t.minY = Number.MIN_VALUE;\n        var i = Number.MAX_VALUE;\n        if (t.isMultipleYAxis) for (var a = 0; a < t.series.length; a++) {\n          var s = this.getMinYMaxY(a, i, null, a + 1);\n          t.minYArr.push(s.minY), t.maxYArr.push(s.maxY), i = s.lowestY;\n        }\n        var r = this.getMinYMaxY(0, i, null, t.series.length);\n\n        if (t.minY = r.minY, t.maxY = r.maxY, i = r.lowestY, e.chart.stacked && this._setStackedMinMax(), (\"line\" === e.chart.type || \"area\" === e.chart.type || \"candlestick\" === e.chart.type || \"boxPlot\" === e.chart.type || \"rangeBar\" === e.chart.type && !t.isBarHorizontal) && t.minY === Number.MIN_VALUE && i !== -Number.MAX_VALUE && i !== t.maxY) {\n          var o = t.maxY - i;\n          (i >= 0 && i <= 10 || void 0 !== e.yaxis[0].min || void 0 !== e.yaxis[0].max) && (o = 0), t.minY = i - 5 * o / 100, i > 0 && t.minY < 0 && (t.minY = 0), t.maxY = t.maxY + 5 * o / 100;\n        }\n\n        if (e.yaxis.forEach(function (e, i) {\n          void 0 !== e.max && (\"number\" == typeof e.max ? t.maxYArr[i] = e.max : \"function\" == typeof e.max && (t.maxYArr[i] = e.max(t.isMultipleYAxis ? t.maxYArr[i] : t.maxY)), t.maxY = t.maxYArr[i]), void 0 !== e.min && (\"number\" == typeof e.min ? t.minYArr[i] = e.min : \"function\" == typeof e.min && (t.minYArr[i] = e.min(t.isMultipleYAxis ? t.minYArr[i] === Number.MIN_VALUE ? 0 : t.minYArr[i] : t.minY)), t.minY = t.minYArr[i]);\n        }), t.isBarHorizontal) {\n          [\"min\", \"max\"].forEach(function (i) {\n            void 0 !== e.xaxis[i] && \"number\" == typeof e.xaxis[i] && (\"min\" === i ? t.minY = e.xaxis[i] : t.maxY = e.xaxis[i]);\n          });\n        }\n\n        return t.isMultipleYAxis ? (this.scales.setMultipleYScales(), t.minY = i, t.yAxisScale.forEach(function (e, i) {\n          t.minYArr[i] = e.niceMin, t.maxYArr[i] = e.niceMax;\n        })) : (this.scales.setYScaleForIndex(0, t.minY, t.maxY), t.minY = t.yAxisScale[0].niceMin, t.maxY = t.yAxisScale[0].niceMax, t.minYArr[0] = t.yAxisScale[0].niceMin, t.maxYArr[0] = t.yAxisScale[0].niceMax), {\n          minY: t.minY,\n          maxY: t.maxY,\n          minYArr: t.minYArr,\n          maxYArr: t.maxYArr,\n          yAxisScale: t.yAxisScale\n        };\n      }\n    }, {\n      key: \"setXRange\",\n      value: function value() {\n        var t = this.w.globals,\n            e = this.w.config,\n            i = \"numeric\" === e.xaxis.type || \"datetime\" === e.xaxis.type || \"category\" === e.xaxis.type && !t.noLabelsProvided || t.noLabelsProvided || t.isXNumeric;\n\n        if (t.isXNumeric && function () {\n          for (var e = 0; e < t.series.length; e++) {\n            if (t.labels[e]) for (var i = 0; i < t.labels[e].length; i++) {\n              null !== t.labels[e][i] && x.isNumber(t.labels[e][i]) && (t.maxX = Math.max(t.maxX, t.labels[e][i]), t.initialMaxX = Math.max(t.maxX, t.labels[e][i]), t.minX = Math.min(t.minX, t.labels[e][i]), t.initialMinX = Math.min(t.minX, t.labels[e][i]));\n            }\n          }\n        }(), t.noLabelsProvided && 0 === e.xaxis.categories.length && (t.maxX = t.labels[t.labels.length - 1], t.initialMaxX = t.labels[t.labels.length - 1], t.minX = 1, t.initialMinX = 1), t.isXNumeric || t.noLabelsProvided || t.dataFormatXNumeric) {\n          var a;\n          if (void 0 === e.xaxis.tickAmount ? (a = Math.round(t.svgWidth / 150), \"numeric\" === e.xaxis.type && t.dataPoints < 30 && (a = t.dataPoints - 1), a > t.dataPoints && 0 !== t.dataPoints && (a = t.dataPoints - 1)) : \"dataPoints\" === e.xaxis.tickAmount ? (t.series.length > 1 && (a = t.series[t.maxValsInArrayIndex].length - 1), t.isXNumeric && (a = t.maxX - t.minX - 1)) : a = e.xaxis.tickAmount, t.xTickAmount = a, void 0 !== e.xaxis.max && \"number\" == typeof e.xaxis.max && (t.maxX = e.xaxis.max), void 0 !== e.xaxis.min && \"number\" == typeof e.xaxis.min && (t.minX = e.xaxis.min), void 0 !== e.xaxis.range && (t.minX = t.maxX - e.xaxis.range), t.minX !== Number.MAX_VALUE && t.maxX !== -Number.MAX_VALUE) {\n            if (e.xaxis.convertedCatToNumeric && !t.dataFormatXNumeric) {\n              for (var s = [], r = t.minX - 1; r < t.maxX; r++) {\n                s.push(r + 1);\n              }\n\n              t.xAxisScale = {\n                result: s,\n                niceMin: s[0],\n                niceMax: s[s.length - 1]\n              };\n            } else t.xAxisScale = this.scales.setXScale(t.minX, t.maxX);\n          } else t.xAxisScale = this.scales.linearScale(1, a, a), t.noLabelsProvided && t.labels.length > 0 && (t.xAxisScale = this.scales.linearScale(1, t.labels.length, a - 1), t.seriesX = t.labels.slice());\n          i && (t.labels = t.xAxisScale.result.slice());\n        }\n\n        return t.isBarHorizontal && t.labels.length && (t.xTickAmount = t.labels.length), this._handleSingleDataPoint(), this._getMinXDiff(), {\n          minX: t.minX,\n          maxX: t.maxX\n        };\n      }\n    }, {\n      key: \"setZRange\",\n      value: function value() {\n        var t = this.w.globals;\n        if (t.isDataXYZ) for (var e = 0; e < t.series.length; e++) {\n          if (void 0 !== t.seriesZ[e]) for (var i = 0; i < t.seriesZ[e].length; i++) {\n            null !== t.seriesZ[e][i] && x.isNumber(t.seriesZ[e][i]) && (t.maxZ = Math.max(t.maxZ, t.seriesZ[e][i]), t.minZ = Math.min(t.minZ, t.seriesZ[e][i]));\n          }\n        }\n      }\n    }, {\n      key: \"_handleSingleDataPoint\",\n      value: function value() {\n        var t = this.w.globals,\n            e = this.w.config;\n\n        if (t.minX === t.maxX) {\n          var i = new R(this.ctx);\n\n          if (\"datetime\" === e.xaxis.type) {\n            var a = i.getDate(t.minX);\n            e.xaxis.labels.datetimeUTC ? a.setUTCDate(a.getUTCDate() - 2) : a.setDate(a.getDate() - 2), t.minX = new Date(a).getTime();\n            var s = i.getDate(t.maxX);\n            e.xaxis.labels.datetimeUTC ? s.setUTCDate(s.getUTCDate() + 2) : s.setDate(s.getDate() + 2), t.maxX = new Date(s).getTime();\n          } else (\"numeric\" === e.xaxis.type || \"category\" === e.xaxis.type && !t.noLabelsProvided) && (t.minX = t.minX - 2, t.initialMinX = t.minX, t.maxX = t.maxX + 2, t.initialMaxX = t.maxX);\n        }\n      }\n    }, {\n      key: \"_getMinXDiff\",\n      value: function value() {\n        var t = this.w.globals;\n        t.isXNumeric && t.seriesX.forEach(function (e, i) {\n          1 === e.length && e.push(t.seriesX[t.maxValsInArrayIndex][t.seriesX[t.maxValsInArrayIndex].length - 1]);\n          var a = e.slice();\n          a.sort(function (t, e) {\n            return t - e;\n          }), a.forEach(function (e, i) {\n            if (i > 0) {\n              var s = e - a[i - 1];\n              s > 0 && (t.minXDiff = Math.min(s, t.minXDiff));\n            }\n          }), 1 !== t.dataPoints && t.minXDiff !== Number.MAX_VALUE || (t.minXDiff = .5);\n        });\n      }\n    }, {\n      key: \"_setStackedMinMax\",\n      value: function value() {\n        var t = this.w.globals,\n            e = [],\n            i = [];\n        if (t.series.length) for (var a = 0; a < t.series[t.maxValsInArrayIndex].length; a++) {\n          for (var s = 0, r = 0, o = 0; o < t.series.length; o++) {\n            null !== t.series[o][a] && x.isNumber(t.series[o][a]) && (t.series[o][a] > 0 ? s = s + parseFloat(t.series[o][a]) + 1e-4 : r += parseFloat(t.series[o][a])), o === t.series.length - 1 && (e.push(s), i.push(r));\n          }\n        }\n\n        for (var n = 0; n < e.length; n++) {\n          t.maxY = Math.max(t.maxY, e[n]), t.minY = Math.min(t.minY, i[n]);\n        }\n      }\n    }]), t;\n  }(),\n      $ = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n      var i = this.w;\n      this.xaxisFontSize = i.config.xaxis.labels.style.fontSize, this.axisFontFamily = i.config.xaxis.labels.style.fontFamily, this.xaxisForeColors = i.config.xaxis.labels.style.colors, this.isCategoryBarHorizontal = \"bar\" === i.config.chart.type && i.config.plotOptions.bar.horizontal, this.xAxisoffX = 0, \"bottom\" === i.config.xaxis.position && (this.xAxisoffX = i.globals.gridHeight), this.drawnLabels = [], this.axesUtils = new G(e);\n    }\n\n    return r(t, [{\n      key: \"drawYaxis\",\n      value: function value(t) {\n        var e = this,\n            i = this.w,\n            a = new m(this.ctx),\n            s = i.config.yaxis[t].labels.style,\n            r = s.fontSize,\n            o = s.fontFamily,\n            n = s.fontWeight,\n            l = a.group({\n          \"class\": \"apexcharts-yaxis\",\n          rel: t,\n          transform: \"translate(\" + i.globals.translateYAxisX[t] + \", 0)\"\n        });\n        if (this.axesUtils.isYAxisHidden(t)) return l;\n        var h = a.group({\n          \"class\": \"apexcharts-yaxis-texts-g\"\n        });\n        l.add(h);\n        var c = i.globals.yAxisScale[t].result.length - 1,\n            d = i.globals.gridHeight / c,\n            g = i.globals.translateY,\n            u = i.globals.yLabelFormatters[t],\n            f = i.globals.yAxisScale[t].result.slice();\n        f = this.axesUtils.checkForReversedLabels(t, f);\n        var p = \"\";\n        if (i.config.yaxis[t].labels.show) for (var x = function x(l) {\n          var x = f[l];\n          x = u(x, l, i);\n          var b = i.config.yaxis[t].labels.padding;\n          i.config.yaxis[t].opposite && 0 !== i.config.yaxis.length && (b *= -1);\n          var v = e.axesUtils.getYAxisForeColor(s.colors, t),\n              m = a.drawText({\n            x: b,\n            y: g + c / 10 + i.config.yaxis[t].labels.offsetY + 1,\n            text: x,\n            textAnchor: i.config.yaxis[t].opposite ? \"start\" : \"end\",\n            fontSize: r,\n            fontFamily: o,\n            fontWeight: n,\n            maxWidth: i.config.yaxis[t].labels.maxWidth,\n            foreColor: Array.isArray(v) ? v[l] : v,\n            isPlainText: !1,\n            cssClass: \"apexcharts-yaxis-label \" + s.cssClass\n          });\n          l === c && (p = m), h.add(m);\n          var y = document.createElementNS(i.globals.SVGNS, \"title\");\n\n          if (y.textContent = Array.isArray(x) ? x.join(\" \") : x, m.node.appendChild(y), 0 !== i.config.yaxis[t].labels.rotate) {\n            var w = a.rotateAroundCenter(p.node),\n                k = a.rotateAroundCenter(m.node);\n            m.node.setAttribute(\"transform\", \"rotate(\".concat(i.config.yaxis[t].labels.rotate, \" \").concat(w.x, \" \").concat(k.y, \")\"));\n          }\n\n          g += d;\n        }, b = c; b >= 0; b--) {\n          x(b);\n        }\n\n        if (void 0 !== i.config.yaxis[t].title.text) {\n          var v = a.group({\n            \"class\": \"apexcharts-yaxis-title\"\n          }),\n              y = 0;\n          i.config.yaxis[t].opposite && (y = i.globals.translateYAxisX[t]);\n          var w = a.drawText({\n            x: y,\n            y: i.globals.gridHeight / 2 + i.globals.translateY + i.config.yaxis[t].title.offsetY,\n            text: i.config.yaxis[t].title.text,\n            textAnchor: \"end\",\n            foreColor: i.config.yaxis[t].title.style.color,\n            fontSize: i.config.yaxis[t].title.style.fontSize,\n            fontWeight: i.config.yaxis[t].title.style.fontWeight,\n            fontFamily: i.config.yaxis[t].title.style.fontFamily,\n            cssClass: \"apexcharts-yaxis-title-text \" + i.config.yaxis[t].title.style.cssClass\n          });\n          v.add(w), l.add(v);\n        }\n\n        var k = i.config.yaxis[t].axisBorder,\n            A = 31 + k.offsetX;\n\n        if (i.config.yaxis[t].opposite && (A = -31 - k.offsetX), k.show) {\n          var S = a.drawLine(A, i.globals.translateY + k.offsetY - 2, A, i.globals.gridHeight + i.globals.translateY + k.offsetY + 2, k.color, 0, k.width);\n          l.add(S);\n        }\n\n        return i.config.yaxis[t].axisTicks.show && this.axesUtils.drawYAxisTicks(A, c, k, i.config.yaxis[t].axisTicks, t, d, l), l;\n      }\n    }, {\n      key: \"drawYaxisInversed\",\n      value: function value(t) {\n        var e = this.w,\n            i = new m(this.ctx),\n            a = i.group({\n          \"class\": \"apexcharts-xaxis apexcharts-yaxis-inversed\"\n        }),\n            s = i.group({\n          \"class\": \"apexcharts-xaxis-texts-g\",\n          transform: \"translate(\".concat(e.globals.translateXAxisX, \", \").concat(e.globals.translateXAxisY, \")\")\n        });\n        a.add(s);\n        var r = e.globals.yAxisScale[t].result.length - 1,\n            o = e.globals.gridWidth / r + .1,\n            n = o + e.config.xaxis.labels.offsetX,\n            l = e.globals.xLabelFormatter,\n            h = e.globals.yAxisScale[t].result.slice(),\n            c = e.globals.timescaleLabels;\n        c.length > 0 && (this.xaxisLabels = c.slice(), r = (h = c.slice()).length), h = this.axesUtils.checkForReversedLabels(t, h);\n        var d = c.length;\n        if (e.config.xaxis.labels.show) for (var g = d ? 0 : r; d ? g < d : g >= 0; d ? g++ : g--) {\n          var u = h[g];\n          u = l(u, g, e);\n          var f = e.globals.gridWidth + e.globals.padHorizontal - (n - o + e.config.xaxis.labels.offsetX);\n\n          if (c.length) {\n            var p = this.axesUtils.getLabel(h, c, f, g, this.drawnLabels, this.xaxisFontSize);\n            f = p.x, u = p.text, this.drawnLabels.push(p.text), 0 === g && e.globals.skipFirstTimelinelabel && (u = \"\"), g === h.length - 1 && e.globals.skipLastTimelinelabel && (u = \"\");\n          }\n\n          var x = i.drawText({\n            x: f,\n            y: this.xAxisoffX + e.config.xaxis.labels.offsetY + 30 - (\"top\" === e.config.xaxis.position ? e.globals.xAxisHeight + e.config.xaxis.axisTicks.height - 2 : 0),\n            text: u,\n            textAnchor: \"middle\",\n            foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[t] : this.xaxisForeColors,\n            fontSize: this.xaxisFontSize,\n            fontFamily: this.xaxisFontFamily,\n            fontWeight: e.config.xaxis.labels.style.fontWeight,\n            isPlainText: !1,\n            cssClass: \"apexcharts-xaxis-label \" + e.config.xaxis.labels.style.cssClass\n          });\n          s.add(x), x.tspan(u);\n          var b = document.createElementNS(e.globals.SVGNS, \"title\");\n          b.textContent = u, x.node.appendChild(b), n += o;\n        }\n        return this.inversedYAxisTitleText(a), this.inversedYAxisBorder(a), a;\n      }\n    }, {\n      key: \"inversedYAxisBorder\",\n      value: function value(t) {\n        var e = this.w,\n            i = new m(this.ctx),\n            a = e.config.xaxis.axisBorder;\n\n        if (a.show) {\n          var s = 0;\n          \"bar\" === e.config.chart.type && e.globals.isXNumeric && (s -= 15);\n          var r = i.drawLine(e.globals.padHorizontal + s + a.offsetX, this.xAxisoffX, e.globals.gridWidth, this.xAxisoffX, a.color, 0, a.height);\n          t.add(r);\n        }\n      }\n    }, {\n      key: \"inversedYAxisTitleText\",\n      value: function value(t) {\n        var e = this.w,\n            i = new m(this.ctx);\n\n        if (void 0 !== e.config.xaxis.title.text) {\n          var a = i.group({\n            \"class\": \"apexcharts-xaxis-title apexcharts-yaxis-title-inversed\"\n          }),\n              s = i.drawText({\n            x: e.globals.gridWidth / 2 + e.config.xaxis.title.offsetX,\n            y: this.xAxisoffX + parseFloat(this.xaxisFontSize) + parseFloat(e.config.xaxis.title.style.fontSize) + e.config.xaxis.title.offsetY + 20,\n            text: e.config.xaxis.title.text,\n            textAnchor: \"middle\",\n            fontSize: e.config.xaxis.title.style.fontSize,\n            fontFamily: e.config.xaxis.title.style.fontFamily,\n            fontWeight: e.config.xaxis.title.style.fontWeight,\n            foreColor: e.config.xaxis.title.style.color,\n            cssClass: \"apexcharts-xaxis-title-text \" + e.config.xaxis.title.style.cssClass\n          });\n          a.add(s), t.add(a);\n        }\n      }\n    }, {\n      key: \"yAxisTitleRotate\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = new m(this.ctx),\n            s = {\n          width: 0,\n          height: 0\n        },\n            r = {\n          width: 0,\n          height: 0\n        },\n            o = i.globals.dom.baseEl.querySelector(\" .apexcharts-yaxis[rel='\".concat(t, \"'] .apexcharts-yaxis-texts-g\"));\n        null !== o && (s = o.getBoundingClientRect());\n        var n = i.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(t, \"'] .apexcharts-yaxis-title text\"));\n\n        if (null !== n && (r = n.getBoundingClientRect()), null !== n) {\n          var l = this.xPaddingForYAxisTitle(t, s, r, e);\n          n.setAttribute(\"x\", l.xPos - (e ? 10 : 0));\n        }\n\n        if (null !== n) {\n          var h = a.rotateAroundCenter(n);\n          n.setAttribute(\"transform\", \"rotate(\".concat(e ? -1 * i.config.yaxis[t].title.rotate : i.config.yaxis[t].title.rotate, \" \").concat(h.x, \" \").concat(h.y, \")\"));\n        }\n      }\n    }, {\n      key: \"xPaddingForYAxisTitle\",\n      value: function value(t, e, i, a) {\n        var s = this.w,\n            r = 0,\n            o = 0,\n            n = 10;\n        return void 0 === s.config.yaxis[t].title.text || t < 0 ? {\n          xPos: o,\n          padd: 0\n        } : (a ? (o = e.width + s.config.yaxis[t].title.offsetX + i.width / 2 + n / 2, 0 === (r += 1) && (o -= n / 2)) : (o = -1 * e.width + s.config.yaxis[t].title.offsetX + n / 2 + i.width / 2, s.globals.isBarHorizontal && (n = 25, o = -1 * e.width - s.config.yaxis[t].title.offsetX - n)), {\n          xPos: o,\n          padd: n\n        });\n      }\n    }, {\n      key: \"setYAxisXPosition\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = 0,\n            s = 0,\n            r = 18,\n            o = 1;\n        i.config.yaxis.length > 1 && (this.multipleYs = !0), i.config.yaxis.map(function (n, l) {\n          var h = i.globals.ignoreYAxisIndexes.indexOf(l) > -1 || !n.show || n.floating || 0 === t[l].width,\n              c = t[l].width + e[l].width;\n          n.opposite ? i.globals.isBarHorizontal ? (s = i.globals.gridWidth + i.globals.translateX - 1, i.globals.translateYAxisX[l] = s - n.labels.offsetX) : (s = i.globals.gridWidth + i.globals.translateX + o, h || (o = o + c + 20), i.globals.translateYAxisX[l] = s - n.labels.offsetX + 20) : (a = i.globals.translateX - r, h || (r = r + c + 20), i.globals.translateYAxisX[l] = a + n.labels.offsetX);\n        });\n      }\n    }, {\n      key: \"setYAxisTextAlignments\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals.dom.baseEl.getElementsByClassName(\"apexcharts-yaxis\");\n        (e = x.listToArray(e)).forEach(function (e, i) {\n          var a = t.config.yaxis[i];\n\n          if (a && void 0 !== a.labels.align) {\n            var s = t.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(i, \"'] .apexcharts-yaxis-texts-g\")),\n                r = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis[rel='\".concat(i, \"'] .apexcharts-yaxis-label\"));\n            r = x.listToArray(r);\n            var o = s.getBoundingClientRect();\n            \"left\" === a.labels.align ? (r.forEach(function (t, e) {\n              t.setAttribute(\"text-anchor\", \"start\");\n            }), a.opposite || s.setAttribute(\"transform\", \"translate(-\".concat(o.width, \", 0)\"))) : \"center\" === a.labels.align ? (r.forEach(function (t, e) {\n              t.setAttribute(\"text-anchor\", \"middle\");\n            }), s.setAttribute(\"transform\", \"translate(\".concat(o.width / 2 * (a.opposite ? 1 : -1), \", 0)\"))) : \"right\" === a.labels.align && (r.forEach(function (t, e) {\n              t.setAttribute(\"text-anchor\", \"end\");\n            }), a.opposite && s.setAttribute(\"transform\", \"translate(\".concat(o.width, \", 0)\")));\n          }\n        });\n      }\n    }]), t;\n  }(),\n      J = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w, this.documentEvent = x.bind(this.documentEvent, this);\n    }\n\n    return r(t, [{\n      key: \"addEventListener\",\n      value: function value(t, e) {\n        var i = this.w;\n        i.globals.events.hasOwnProperty(t) ? i.globals.events[t].push(e) : i.globals.events[t] = [e];\n      }\n    }, {\n      key: \"removeEventListener\",\n      value: function value(t, e) {\n        var i = this.w;\n\n        if (i.globals.events.hasOwnProperty(t)) {\n          var a = i.globals.events[t].indexOf(e);\n          -1 !== a && i.globals.events[t].splice(a, 1);\n        }\n      }\n    }, {\n      key: \"fireEvent\",\n      value: function value(t, e) {\n        var i = this.w;\n\n        if (i.globals.events.hasOwnProperty(t)) {\n          e && e.length || (e = []);\n\n          for (var a = i.globals.events[t], s = a.length, r = 0; r < s; r++) {\n            a[r].apply(null, e);\n          }\n        }\n      }\n    }, {\n      key: \"setupEventHandlers\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = this.ctx,\n            a = e.globals.dom.baseEl.querySelector(e.globals.chartClass);\n        this.ctx.eventList.forEach(function (t) {\n          a.addEventListener(t, function (t) {\n            var a = Object.assign({}, e, {\n              seriesIndex: e.globals.capturedSeriesIndex,\n              dataPointIndex: e.globals.capturedDataPointIndex\n            });\n            \"mousemove\" === t.type || \"touchmove\" === t.type ? \"function\" == typeof e.config.chart.events.mouseMove && e.config.chart.events.mouseMove(t, i, a) : \"mouseleave\" === t.type || \"touchleave\" === t.type ? \"function\" == typeof e.config.chart.events.mouseLeave && e.config.chart.events.mouseLeave(t, i, a) : (\"mouseup\" === t.type && 1 === t.which || \"touchend\" === t.type) && (\"function\" == typeof e.config.chart.events.click && e.config.chart.events.click(t, i, a), i.ctx.events.fireEvent(\"click\", [t, i, a]));\n          }, {\n            capture: !1,\n            passive: !0\n          });\n        }), this.ctx.eventList.forEach(function (i) {\n          e.globals.dom.baseEl.addEventListener(i, t.documentEvent, {\n            passive: !0\n          });\n        }), this.ctx.core.setupBrushHandler();\n      }\n    }, {\n      key: \"documentEvent\",\n      value: function value(t) {\n        var e = this.w,\n            i = t.target.className;\n\n        if (\"click\" === t.type) {\n          var a = e.globals.dom.baseEl.querySelector(\".apexcharts-menu\");\n          a && a.classList.contains(\"apexcharts-menu-open\") && \"apexcharts-menu-icon\" !== i && a.classList.remove(\"apexcharts-menu-open\");\n        }\n\n        e.globals.clientX = \"touchmove\" === t.type ? t.touches[0].clientX : t.clientX, e.globals.clientY = \"touchmove\" === t.type ? t.touches[0].clientY : t.clientY;\n      }\n    }]), t;\n  }(),\n      Q = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"setCurrentLocaleValues\",\n      value: function value(t) {\n        var e = this.w.config.chart.locales;\n        window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0 && (e = this.w.config.chart.locales.concat(window.Apex.chart.locales));\n        var i = e.filter(function (e) {\n          return e.name === t;\n        })[0];\n        if (!i) throw new Error(\"Wrong locale name provided. Please make sure you set the correct locale name in options\");\n        var a = x.extend(C, i);\n        this.w.globals.locale = a.options;\n      }\n    }]), t;\n  }(),\n      K = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"drawAxis\",\n      value: function value(t, e) {\n        var i,\n            a,\n            s = this.w.globals,\n            r = this.w.config,\n            o = new _(this.ctx),\n            n = new $(this.ctx);\n        s.axisCharts && \"radar\" !== t && (s.isBarHorizontal ? (a = n.drawYaxisInversed(0), i = o.drawXaxisInversed(0), s.dom.elGraphical.add(i), s.dom.elGraphical.add(a)) : (i = o.drawXaxis(), s.dom.elGraphical.add(i), r.yaxis.map(function (t, e) {\n          -1 === s.ignoreYAxisIndexes.indexOf(e) && (a = n.drawYaxis(e), s.dom.Paper.add(a));\n        })));\n      }\n    }]), t;\n  }(),\n      tt = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"drawXCrosshairs\",\n      value: function value() {\n        var t = this.w,\n            e = new m(this.ctx),\n            i = new v(this.ctx),\n            a = t.config.xaxis.crosshairs.fill.gradient,\n            s = t.config.xaxis.crosshairs.dropShadow,\n            r = t.config.xaxis.crosshairs.fill.type,\n            o = a.colorFrom,\n            n = a.colorTo,\n            l = a.opacityFrom,\n            h = a.opacityTo,\n            c = a.stops,\n            d = s.enabled,\n            g = s.left,\n            u = s.top,\n            f = s.blur,\n            p = s.color,\n            b = s.opacity,\n            y = t.config.xaxis.crosshairs.fill.color;\n\n        if (t.config.xaxis.crosshairs.show) {\n          \"gradient\" === r && (y = e.drawGradient(\"vertical\", o, n, l, h, null, c, null));\n          var w = e.drawRect();\n          1 === t.config.xaxis.crosshairs.width && (w = e.drawLine());\n          var k = t.globals.gridHeight;\n          (!x.isNumber(k) || k < 0) && (k = 0);\n          var A = t.config.xaxis.crosshairs.width;\n          (!x.isNumber(A) || A < 0) && (A = 0), w.attr({\n            \"class\": \"apexcharts-xcrosshairs\",\n            x: 0,\n            y: 0,\n            y2: k,\n            width: A,\n            height: k,\n            fill: y,\n            filter: \"none\",\n            \"fill-opacity\": t.config.xaxis.crosshairs.opacity,\n            stroke: t.config.xaxis.crosshairs.stroke.color,\n            \"stroke-width\": t.config.xaxis.crosshairs.stroke.width,\n            \"stroke-dasharray\": t.config.xaxis.crosshairs.stroke.dashArray\n          }), d && (w = i.dropShadow(w, {\n            left: g,\n            top: u,\n            blur: f,\n            color: p,\n            opacity: b\n          })), t.globals.dom.elGraphical.add(w);\n        }\n      }\n    }, {\n      key: \"drawYCrosshairs\",\n      value: function value() {\n        var t = this.w,\n            e = new m(this.ctx),\n            i = t.config.yaxis[0].crosshairs,\n            a = t.globals.barPadForNumericAxis;\n\n        if (t.config.yaxis[0].crosshairs.show) {\n          var s = e.drawLine(-a, 0, t.globals.gridWidth + a, 0, i.stroke.color, i.stroke.dashArray, i.stroke.width);\n          s.attr({\n            \"class\": \"apexcharts-ycrosshairs\"\n          }), t.globals.dom.elGraphical.add(s);\n        }\n\n        var r = e.drawLine(-a, 0, t.globals.gridWidth + a, 0, i.stroke.color, 0, 0);\n        r.attr({\n          \"class\": \"apexcharts-ycrosshairs-hidden\"\n        }), t.globals.dom.elGraphical.add(r);\n      }\n    }]), t;\n  }(),\n      et = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"checkResponsiveConfig\",\n      value: function value(t) {\n        var e = this,\n            i = this.w,\n            a = i.config;\n\n        if (0 !== a.responsive.length) {\n          var s = a.responsive.slice();\n          s.sort(function (t, e) {\n            return t.breakpoint > e.breakpoint ? 1 : e.breakpoint > t.breakpoint ? -1 : 0;\n          }).reverse();\n\n          var r = new N({}),\n              o = function o() {\n            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n                a = s[0].breakpoint,\n                o = window.innerWidth > 0 ? window.innerWidth : screen.width;\n\n            if (o > a) {\n              var n = y.extendArrayProps(r, i.globals.initialConfig, i);\n              t = x.extend(n, t), t = x.extend(i.config, t), e.overrideResponsiveOptions(t);\n            } else for (var l = 0; l < s.length; l++) {\n              o < s[l].breakpoint && (t = y.extendArrayProps(r, s[l].options, i), t = x.extend(i.config, t), e.overrideResponsiveOptions(t));\n            }\n          };\n\n          if (t) {\n            var n = y.extendArrayProps(r, t, i);\n            n = x.extend(i.config, n), o(n = x.extend(n, t));\n          } else o({});\n        }\n      }\n    }, {\n      key: \"overrideResponsiveOptions\",\n      value: function value(t) {\n        var e = new N(t).init({\n          responsiveOverride: !0\n        });\n        this.w.config = e;\n      }\n    }]), t;\n  }(),\n      it = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.colors = [], this.w = e.w;\n      var i = this.w;\n      this.isColorFn = !1, this.isHeatmapDistributed = \"treemap\" === i.config.chart.type && i.config.plotOptions.treemap.distributed || \"heatmap\" === i.config.chart.type && i.config.plotOptions.heatmap.distributed, this.isBarDistributed = i.config.plotOptions.bar.distributed && (\"bar\" === i.config.chart.type || \"rangeBar\" === i.config.chart.type);\n    }\n\n    return r(t, [{\n      key: \"init\",\n      value: function value() {\n        this.setDefaultColors();\n      }\n    }, {\n      key: \"setDefaultColors\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = new x();\n\n        if (e.globals.dom.elWrap.classList.add(\"apexcharts-theme-\".concat(e.config.theme.mode)), void 0 === e.config.colors ? e.globals.colors = this.predefined() : (e.globals.colors = e.config.colors, Array.isArray(e.config.colors) && e.config.colors.length > 0 && \"function\" == typeof e.config.colors[0] && (e.globals.colors = e.config.series.map(function (i, a) {\n          var s = e.config.colors[a];\n          return s || (s = e.config.colors[0]), \"function\" == typeof s ? (t.isColorFn = !0, s({\n            value: e.globals.axisCharts ? e.globals.series[a][0] ? e.globals.series[a][0] : 0 : e.globals.series[a],\n            seriesIndex: a,\n            dataPointIndex: a,\n            w: e\n          })) : s;\n        }))), e.globals.seriesColors.map(function (t, i) {\n          t && (e.globals.colors[i] = t);\n        }), e.config.theme.monochrome.enabled) {\n          var a = [],\n              s = e.globals.series.length;\n          (this.isBarDistributed || this.isHeatmapDistributed) && (s = e.globals.series[0].length * e.globals.series.length);\n\n          for (var r = e.config.theme.monochrome.color, o = 1 / (s / e.config.theme.monochrome.shadeIntensity), n = e.config.theme.monochrome.shadeTo, l = 0, h = 0; h < s; h++) {\n            var c = void 0;\n            \"dark\" === n ? (c = i.shadeColor(-1 * l, r), l += o) : (c = i.shadeColor(l, r), l += o), a.push(c);\n          }\n\n          e.globals.colors = a.slice();\n        }\n\n        var d = e.globals.colors.slice();\n        this.pushExtraColors(e.globals.colors);\n        [\"fill\", \"stroke\"].forEach(function (i) {\n          void 0 === e.config[i].colors ? e.globals[i].colors = t.isColorFn ? e.config.colors : d : e.globals[i].colors = e.config[i].colors.slice(), t.pushExtraColors(e.globals[i].colors);\n        }), void 0 === e.config.dataLabels.style.colors ? e.globals.dataLabels.style.colors = d : e.globals.dataLabels.style.colors = e.config.dataLabels.style.colors.slice(), this.pushExtraColors(e.globals.dataLabels.style.colors, 50), void 0 === e.config.plotOptions.radar.polygons.fill.colors ? e.globals.radarPolygons.fill.colors = [\"dark\" === e.config.theme.mode ? \"#424242\" : \"none\"] : e.globals.radarPolygons.fill.colors = e.config.plotOptions.radar.polygons.fill.colors.slice(), this.pushExtraColors(e.globals.radarPolygons.fill.colors, 20), void 0 === e.config.markers.colors ? e.globals.markers.colors = d : e.globals.markers.colors = e.config.markers.colors.slice(), this.pushExtraColors(e.globals.markers.colors);\n      }\n    }, {\n      key: \"pushExtraColors\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n            a = this.w,\n            s = e || a.globals.series.length;\n        if (null === i && (i = this.isBarDistributed || this.isHeatmapDistributed || \"heatmap\" === a.config.chart.type && a.config.plotOptions.heatmap.colorScale.inverse), i && a.globals.series.length && (s = a.globals.series[a.globals.maxValsInArrayIndex].length * a.globals.series.length), t.length < s) for (var r = s - t.length, o = 0; o < r; o++) {\n          t.push(t[o]);\n        }\n      }\n    }, {\n      key: \"updateThemeOptions\",\n      value: function value(t) {\n        t.chart = t.chart || {}, t.tooltip = t.tooltip || {};\n        var e = t.theme.mode || \"light\",\n            i = t.theme.palette ? t.theme.palette : \"dark\" === e ? \"palette4\" : \"palette1\",\n            a = t.chart.foreColor ? t.chart.foreColor : \"dark\" === e ? \"#f6f7f8\" : \"#373d3f\";\n        return t.tooltip.theme = e, t.chart.foreColor = a, t.theme.palette = i, t;\n      }\n    }, {\n      key: \"predefined\",\n      value: function value() {\n        switch (this.w.config.theme.palette) {\n          case \"palette1\":\n            this.colors = [\"#008FFB\", \"#00E396\", \"#FEB019\", \"#FF4560\", \"#775DD0\"];\n            break;\n\n          case \"palette2\":\n            this.colors = [\"#3f51b5\", \"#03a9f4\", \"#4caf50\", \"#f9ce1d\", \"#FF9800\"];\n            break;\n\n          case \"palette3\":\n            this.colors = [\"#33b2df\", \"#546E7A\", \"#d4526e\", \"#13d8aa\", \"#A5978B\"];\n            break;\n\n          case \"palette4\":\n            this.colors = [\"#4ecdc4\", \"#c7f464\", \"#81D4FA\", \"#fd6a6a\", \"#546E7A\"];\n            break;\n\n          case \"palette5\":\n            this.colors = [\"#2b908f\", \"#f9a3a4\", \"#90ee7e\", \"#fa4443\", \"#69d2e7\"];\n            break;\n\n          case \"palette6\":\n            this.colors = [\"#449DD1\", \"#F86624\", \"#EA3546\", \"#662E9B\", \"#C5D86D\"];\n            break;\n\n          case \"palette7\":\n            this.colors = [\"#D7263D\", \"#1B998B\", \"#2E294E\", \"#F46036\", \"#E2C044\"];\n            break;\n\n          case \"palette8\":\n            this.colors = [\"#662E9B\", \"#F86624\", \"#F9C80E\", \"#EA3546\", \"#43BCCD\"];\n            break;\n\n          case \"palette9\":\n            this.colors = [\"#5C4742\", \"#A5978B\", \"#8D5B4C\", \"#5A2A27\", \"#C4BBAF\"];\n            break;\n\n          case \"palette10\":\n            this.colors = [\"#A300D6\", \"#7D02EB\", \"#5653FE\", \"#2983FF\", \"#00B1F2\"];\n            break;\n\n          default:\n            this.colors = [\"#008FFB\", \"#00E396\", \"#FEB019\", \"#FF4560\", \"#775DD0\"];\n        }\n\n        return this.colors;\n      }\n    }]), t;\n  }(),\n      at = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"draw\",\n      value: function value() {\n        this.drawTitleSubtitle(\"title\"), this.drawTitleSubtitle(\"subtitle\");\n      }\n    }, {\n      key: \"drawTitleSubtitle\",\n      value: function value(t) {\n        var e = this.w,\n            i = \"title\" === t ? e.config.title : e.config.subtitle,\n            a = e.globals.svgWidth / 2,\n            s = i.offsetY,\n            r = \"middle\";\n\n        if (\"left\" === i.align ? (a = 10, r = \"start\") : \"right\" === i.align && (a = e.globals.svgWidth - 10, r = \"end\"), a += i.offsetX, s = s + parseInt(i.style.fontSize, 10) + i.margin / 2, void 0 !== i.text) {\n          var o = new m(this.ctx).drawText({\n            x: a,\n            y: s,\n            text: i.text,\n            textAnchor: r,\n            fontSize: i.style.fontSize,\n            fontFamily: i.style.fontFamily,\n            fontWeight: i.style.fontWeight,\n            foreColor: i.style.color,\n            opacity: 1\n          });\n          o.node.setAttribute(\"class\", \"apexcharts-\".concat(t, \"-text\")), e.globals.dom.Paper.add(o);\n        }\n      }\n    }]), t;\n  }(),\n      st = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.dCtx = e;\n    }\n\n    return r(t, [{\n      key: \"getTitleSubtitleCoords\",\n      value: function value(t) {\n        var e = this.w,\n            i = 0,\n            a = 0,\n            s = \"title\" === t ? e.config.title.floating : e.config.subtitle.floating,\n            r = e.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(t, \"-text\"));\n\n        if (null !== r && !s) {\n          var o = r.getBoundingClientRect();\n          i = o.width, a = e.globals.axisCharts ? o.height + 5 : o.height;\n        }\n\n        return {\n          width: i,\n          height: a\n        };\n      }\n    }, {\n      key: \"getLegendsRect\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals.dom.baseEl.querySelector(\".apexcharts-legend\");\n        t.config.legend.height || \"top\" !== t.config.legend.position && \"bottom\" !== t.config.legend.position || (e.style.maxHeight = t.globals.svgHeight / 2 + \"px\");\n        var i = Object.assign({}, x.getBoundingClientRect(e));\n        return null !== e && !t.config.legend.floating && t.config.legend.show ? this.dCtx.lgRect = {\n          x: i.x,\n          y: i.y,\n          height: i.height,\n          width: 0 === i.height ? 0 : i.width\n        } : this.dCtx.lgRect = {\n          x: 0,\n          y: 0,\n          height: 0,\n          width: 0\n        }, \"left\" !== t.config.legend.position && \"right\" !== t.config.legend.position || 1.5 * this.dCtx.lgRect.width > t.globals.svgWidth && (this.dCtx.lgRect.width = t.globals.svgWidth / 1.5), this.dCtx.lgRect;\n      }\n    }, {\n      key: \"getLargestStringFromMultiArr\",\n      value: function value(t, e) {\n        var i = t;\n\n        if (this.w.globals.isMultiLineX) {\n          var a = e.map(function (t, e) {\n            return Array.isArray(t) ? t.length : 1;\n          }),\n              s = Math.max.apply(Math, u(a));\n          i = e[a.indexOf(s)];\n        }\n\n        return i;\n      }\n    }]), t;\n  }(),\n      rt = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.dCtx = e;\n    }\n\n    return r(t, [{\n      key: \"getxAxisLabelsCoords\",\n      value: function value() {\n        var t,\n            e = this.w,\n            i = e.globals.labels.slice();\n\n        if (e.config.xaxis.convertedCatToNumeric && 0 === i.length && (i = e.globals.categoryLabels), e.globals.timescaleLabels.length > 0) {\n          var a = this.getxAxisTimeScaleLabelsCoords();\n          t = {\n            width: a.width,\n            height: a.height\n          }, e.globals.rotateXLabels = !1;\n        } else {\n          this.dCtx.lgWidthForSideLegends = \"left\" !== e.config.legend.position && \"right\" !== e.config.legend.position || e.config.legend.floating ? 0 : this.dCtx.lgRect.width;\n          var s = e.globals.xLabelFormatter,\n              r = x.getLargestStringFromArr(i),\n              o = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r, i);\n          e.globals.isBarHorizontal && (o = r = e.globals.yAxisScale[0].result.reduce(function (t, e) {\n            return t.length > e.length ? t : e;\n          }, 0));\n          var n = new V(this.dCtx.ctx),\n              l = r;\n          r = n.xLabelFormat(s, r, l, {\n            i: void 0,\n            dateFormatter: new R(this.dCtx.ctx).formatDate,\n            w: e\n          }), o = n.xLabelFormat(s, o, l, {\n            i: void 0,\n            dateFormatter: new R(this.dCtx.ctx).formatDate,\n            w: e\n          }), (e.config.xaxis.convertedCatToNumeric && void 0 === r || \"\" === String(r).trim()) && (o = r = \"1\");\n          var h = new m(this.dCtx.ctx),\n              c = h.getTextRects(r, e.config.xaxis.labels.style.fontSize),\n              d = c;\n\n          if (r !== o && (d = h.getTextRects(o, e.config.xaxis.labels.style.fontSize)), (t = {\n            width: c.width >= d.width ? c.width : d.width,\n            height: c.height >= d.height ? c.height : d.height\n          }).width * i.length > e.globals.svgWidth - this.dCtx.lgWidthForSideLegends - this.dCtx.yAxisWidth - this.dCtx.gridPad.left - this.dCtx.gridPad.right && 0 !== e.config.xaxis.labels.rotate || e.config.xaxis.labels.rotateAlways) {\n            if (!e.globals.isBarHorizontal) {\n              e.globals.rotateXLabels = !0;\n\n              var g = function g(t) {\n                return h.getTextRects(t, e.config.xaxis.labels.style.fontSize, e.config.xaxis.labels.style.fontFamily, \"rotate(\".concat(e.config.xaxis.labels.rotate, \" 0 0)\"), !1);\n              };\n\n              c = g(r), r !== o && (d = g(o)), t.height = (c.height > d.height ? c.height : d.height) / 1.5, t.width = c.width > d.width ? c.width : d.width;\n            }\n          } else e.globals.rotateXLabels = !1;\n        }\n\n        return e.config.xaxis.labels.show || (t = {\n          width: 0,\n          height: 0\n        }), {\n          width: t.width,\n          height: t.height\n        };\n      }\n    }, {\n      key: \"getxAxisGroupLabelsCoords\",\n      value: function value() {\n        var t,\n            e = this.w;\n        if (!e.globals.hasGroups) return {\n          width: 0,\n          height: 0\n        };\n        var i,\n            a = (null === (t = e.config.xaxis.group.style) || void 0 === t ? void 0 : t.fontSize) || e.config.xaxis.labels.style.fontSize,\n            s = e.globals.groups.map(function (t) {\n          return t.title;\n        }),\n            r = x.getLargestStringFromArr(s),\n            o = this.dCtx.dimHelpers.getLargestStringFromMultiArr(r, s),\n            n = new m(this.dCtx.ctx),\n            l = n.getTextRects(r, a),\n            h = l;\n        return r !== o && (h = n.getTextRects(o, a)), i = {\n          width: l.width >= h.width ? l.width : h.width,\n          height: l.height >= h.height ? l.height : h.height\n        }, e.config.xaxis.labels.show || (i = {\n          width: 0,\n          height: 0\n        }), {\n          width: i.width,\n          height: i.height\n        };\n      }\n    }, {\n      key: \"getxAxisTitleCoords\",\n      value: function value() {\n        var t = this.w,\n            e = 0,\n            i = 0;\n\n        if (void 0 !== t.config.xaxis.title.text) {\n          var a = new m(this.dCtx.ctx).getTextRects(t.config.xaxis.title.text, t.config.xaxis.title.style.fontSize);\n          e = a.width, i = a.height;\n        }\n\n        return {\n          width: e,\n          height: i\n        };\n      }\n    }, {\n      key: \"getxAxisTimeScaleLabelsCoords\",\n      value: function value() {\n        var t,\n            e = this.w;\n        this.dCtx.timescaleLabels = e.globals.timescaleLabels.slice();\n        var i = this.dCtx.timescaleLabels.map(function (t) {\n          return t.value;\n        }),\n            a = i.reduce(function (t, e) {\n          return void 0 === t ? (console.error(\"You have possibly supplied invalid Date format. Please supply a valid JavaScript Date\"), 0) : t.length > e.length ? t : e;\n        }, 0);\n        return 1.05 * (t = new m(this.dCtx.ctx).getTextRects(a, e.config.xaxis.labels.style.fontSize)).width * i.length > e.globals.gridWidth && 0 !== e.config.xaxis.labels.rotate && (e.globals.overlappingXLabels = !0), t;\n      }\n    }, {\n      key: \"additionalPaddingXLabels\",\n      value: function value(t) {\n        var e = this,\n            i = this.w,\n            a = i.globals,\n            s = i.config,\n            r = s.xaxis.type,\n            o = t.width;\n        a.skipLastTimelinelabel = !1, a.skipFirstTimelinelabel = !1;\n\n        var n = i.config.yaxis[0].opposite && i.globals.isBarHorizontal,\n            l = function l(t, n) {\n          (function (t) {\n            return -1 !== a.collapsedSeriesIndices.indexOf(t);\n          })(n) || function (t) {\n            if (e.dCtx.timescaleLabels && e.dCtx.timescaleLabels.length) {\n              var n = e.dCtx.timescaleLabels[0],\n                  l = e.dCtx.timescaleLabels[e.dCtx.timescaleLabels.length - 1].position + o / 1.75 - e.dCtx.yAxisWidthRight,\n                  h = n.position - o / 1.75 + e.dCtx.yAxisWidthLeft,\n                  c = \"right\" === i.config.legend.position && e.dCtx.lgRect.width > 0 ? e.dCtx.lgRect.width : 0;\n              l > a.svgWidth - a.translateX - c && (a.skipLastTimelinelabel = !0), h < -(t.show && !t.floating || \"bar\" !== s.chart.type && \"candlestick\" !== s.chart.type && \"rangeBar\" !== s.chart.type && \"boxPlot\" !== s.chart.type ? 10 : o / 1.75) && (a.skipFirstTimelinelabel = !0);\n            } else \"datetime\" === r ? e.dCtx.gridPad.right < o && !a.rotateXLabels && (a.skipLastTimelinelabel = !0) : \"datetime\" !== r && e.dCtx.gridPad.right < o / 2 - e.dCtx.yAxisWidthRight && !a.rotateXLabels && !i.config.xaxis.labels.trim && (\"between\" !== i.config.xaxis.tickPlacement || i.globals.isBarHorizontal) && (e.dCtx.xPadRight = o / 2 + 1);\n          }(t);\n        };\n\n        s.yaxis.forEach(function (t, i) {\n          n ? (e.dCtx.gridPad.left < o && (e.dCtx.xPadLeft = o / 2 + 1), e.dCtx.xPadRight = o / 2 + 1) : l(t, i);\n        });\n      }\n    }]), t;\n  }(),\n      ot = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.dCtx = e;\n    }\n\n    return r(t, [{\n      key: \"getyAxisLabelsCoords\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = [],\n            a = 10,\n            s = new G(this.dCtx.ctx);\n        return e.config.yaxis.map(function (r, o) {\n          var n = e.globals.yAxisScale[o],\n              l = 0;\n\n          if (!s.isYAxisHidden(o) && r.labels.show && void 0 !== r.labels.minWidth && (l = r.labels.minWidth), !s.isYAxisHidden(o) && r.labels.show && n.result.length) {\n            var h = e.globals.yLabelFormatters[o],\n                c = n.niceMin === Number.MIN_VALUE ? 0 : n.niceMin,\n                d = String(c).length > String(n.niceMax).length ? c : n.niceMax,\n                g = h(d, {\n              seriesIndex: o,\n              dataPointIndex: -1,\n              w: e\n            }),\n                u = g;\n\n            if (void 0 !== g && 0 !== g.length || (g = d), e.globals.isBarHorizontal) {\n              a = 0;\n              var f = e.globals.labels.slice();\n              g = h(g = x.getLargestStringFromArr(f), {\n                seriesIndex: o,\n                dataPointIndex: -1,\n                w: e\n              }), u = t.dCtx.dimHelpers.getLargestStringFromMultiArr(g, f);\n            }\n\n            var p = new m(t.dCtx.ctx),\n                b = \"rotate(\".concat(r.labels.rotate, \" 0 0)\"),\n                v = p.getTextRects(g, r.labels.style.fontSize, r.labels.style.fontFamily, b, !1),\n                y = v;\n            g !== u && (y = p.getTextRects(u, r.labels.style.fontSize, r.labels.style.fontFamily, b, !1)), i.push({\n              width: (l > y.width || l > v.width ? l : y.width > v.width ? y.width : v.width) + a,\n              height: y.height > v.height ? y.height : v.height\n            });\n          } else i.push({\n            width: 0,\n            height: 0\n          });\n        }), i;\n      }\n    }, {\n      key: \"getyAxisTitleCoords\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = [];\n        return e.config.yaxis.map(function (e, a) {\n          if (e.show && void 0 !== e.title.text) {\n            var s = new m(t.dCtx.ctx),\n                r = \"rotate(\".concat(e.title.rotate, \" 0 0)\"),\n                o = s.getTextRects(e.title.text, e.title.style.fontSize, e.title.style.fontFamily, r, !1);\n            i.push({\n              width: o.width,\n              height: o.height\n            });\n          } else i.push({\n            width: 0,\n            height: 0\n          });\n        }), i;\n      }\n    }, {\n      key: \"getTotalYAxisWidth\",\n      value: function value() {\n        var t = this.w,\n            e = 0,\n            i = 0,\n            a = 0,\n            s = t.globals.yAxisScale.length > 1 ? 10 : 0,\n            r = new G(this.dCtx.ctx),\n            o = function o(_o, n) {\n          var l = t.config.yaxis[n].floating,\n              h = 0;\n          _o.width > 0 && !l ? (h = _o.width + s, function (e) {\n            return t.globals.ignoreYAxisIndexes.indexOf(e) > -1;\n          }(n) && (h = h - _o.width - s)) : h = l || r.isYAxisHidden(n) ? 0 : 5, t.config.yaxis[n].opposite ? a += h : i += h, e += h;\n        };\n\n        return t.globals.yLabelsCoords.map(function (t, e) {\n          o(t, e);\n        }), t.globals.yTitleCoords.map(function (t, e) {\n          o(t, e);\n        }), t.globals.isBarHorizontal && !t.config.yaxis[0].floating && (e = t.globals.yLabelsCoords[0].width + t.globals.yTitleCoords[0].width + 15), this.dCtx.yAxisWidthLeft = i, this.dCtx.yAxisWidthRight = a, e;\n      }\n    }]), t;\n  }(),\n      nt = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.dCtx = e;\n    }\n\n    return r(t, [{\n      key: \"gridPadForColumnsInNumericAxis\",\n      value: function value(t) {\n        var e = this.w;\n        if (e.globals.noData || e.globals.allSeriesCollapsed) return 0;\n\n        var i = function i(t) {\n          return \"bar\" === t || \"rangeBar\" === t || \"candlestick\" === t || \"boxPlot\" === t;\n        },\n            a = e.config.chart.type,\n            s = 0,\n            r = i(a) ? e.config.series.length : 1;\n\n        if (e.globals.comboBarCount > 0 && (r = e.globals.comboBarCount), e.globals.collapsedSeries.forEach(function (t) {\n          i(t.type) && (r -= 1);\n        }), e.config.chart.stacked && (r = 1), (i(a) || e.globals.comboBarCount > 0) && e.globals.isXNumeric && !e.globals.isBarHorizontal && r > 0) {\n          var o,\n              n,\n              l = Math.abs(e.globals.initialMaxX - e.globals.initialMinX);\n          l <= 3 && (l = e.globals.dataPoints), o = l / t, e.globals.minXDiff && e.globals.minXDiff / o > 0 && (n = e.globals.minXDiff / o), n > t / 2 && (n /= 2), (s = n / r * parseInt(e.config.plotOptions.bar.columnWidth, 10) / 100) < 1 && (s = 1), s = s / (r > 1 ? 1 : 1.5) + 5, e.globals.barPadForNumericAxis = s;\n        }\n\n        return s;\n      }\n    }, {\n      key: \"gridPadFortitleSubtitle\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = e.globals,\n            a = this.dCtx.isSparkline || !e.globals.axisCharts ? 0 : 10;\n        [\"title\", \"subtitle\"].forEach(function (i) {\n          void 0 !== e.config[i].text ? a += e.config[i].margin : a += t.dCtx.isSparkline || !e.globals.axisCharts ? 0 : 5;\n        }), !e.config.legend.show || \"bottom\" !== e.config.legend.position || e.config.legend.floating || e.globals.axisCharts || (a += 10);\n        var s = this.dCtx.dimHelpers.getTitleSubtitleCoords(\"title\"),\n            r = this.dCtx.dimHelpers.getTitleSubtitleCoords(\"subtitle\");\n        i.gridHeight = i.gridHeight - s.height - r.height - a, i.translateY = i.translateY + s.height + r.height + a;\n      }\n    }, {\n      key: \"setGridXPosForDualYAxis\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = new G(this.dCtx.ctx);\n        i.config.yaxis.map(function (s, r) {\n          -1 !== i.globals.ignoreYAxisIndexes.indexOf(r) || s.floating || a.isYAxisHidden(r) || (s.opposite && (i.globals.translateX = i.globals.translateX - (e[r].width + t[r].width) - parseInt(i.config.yaxis[r].labels.style.fontSize, 10) / 1.2 - 12), i.globals.translateX < 2 && (i.globals.translateX = 2));\n        });\n      }\n    }]), t;\n  }(),\n      lt = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w, this.lgRect = {}, this.yAxisWidth = 0, this.yAxisWidthLeft = 0, this.yAxisWidthRight = 0, this.xAxisHeight = 0, this.isSparkline = this.w.config.chart.sparkline.enabled, this.dimHelpers = new st(this), this.dimYAxis = new ot(this), this.dimXAxis = new rt(this), this.dimGrid = new nt(this), this.lgWidthForSideLegends = 0, this.gridPad = this.w.config.grid.padding, this.xPadRight = 0, this.xPadLeft = 0;\n    }\n\n    return r(t, [{\n      key: \"plotCoords\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = e.globals;\n        this.lgRect = this.dimHelpers.getLegendsRect(), this.isSparkline && (e.config.markers.discrete.length > 0 || e.config.markers.size > 0) && Object.entries(this.gridPad).forEach(function (e) {\n          var i = g(e, 2),\n              a = i[0],\n              s = i[1];\n          t.gridPad[a] = Math.max(s, t.w.globals.markers.largestSize / 1.5);\n        }), i.axisCharts ? this.setDimensionsForAxisCharts() : this.setDimensionsForNonAxisCharts(), this.dimGrid.gridPadFortitleSubtitle(), i.gridHeight = i.gridHeight - this.gridPad.top - this.gridPad.bottom, i.gridWidth = i.gridWidth - this.gridPad.left - this.gridPad.right - this.xPadRight - this.xPadLeft;\n        var a = this.dimGrid.gridPadForColumnsInNumericAxis(i.gridWidth);\n        i.gridWidth = i.gridWidth - 2 * a, i.translateX = i.translateX + this.gridPad.left + this.xPadLeft + (a > 0 ? a + 4 : 0), i.translateY = i.translateY + this.gridPad.top;\n      }\n    }, {\n      key: \"setDimensionsForAxisCharts\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = e.globals,\n            a = this.dimYAxis.getyAxisLabelsCoords(),\n            s = this.dimYAxis.getyAxisTitleCoords();\n        e.globals.yLabelsCoords = [], e.globals.yTitleCoords = [], e.config.yaxis.map(function (t, i) {\n          e.globals.yLabelsCoords.push({\n            width: a[i].width,\n            index: i\n          }), e.globals.yTitleCoords.push({\n            width: s[i].width,\n            index: i\n          });\n        }), this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth();\n        var r = this.dimXAxis.getxAxisLabelsCoords(),\n            o = this.dimXAxis.getxAxisGroupLabelsCoords(),\n            n = this.dimXAxis.getxAxisTitleCoords();\n        this.conditionalChecksForAxisCoords(r, n, o), i.translateXAxisY = e.globals.rotateXLabels ? this.xAxisHeight / 8 : -4, i.translateXAxisX = e.globals.rotateXLabels && e.globals.isXNumeric && e.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0, e.globals.isBarHorizontal && (i.rotateXLabels = !1, i.translateXAxisY = parseInt(e.config.xaxis.labels.style.fontSize, 10) / 1.5 * -1), i.translateXAxisY = i.translateXAxisY + e.config.xaxis.labels.offsetY, i.translateXAxisX = i.translateXAxisX + e.config.xaxis.labels.offsetX;\n        var l = this.yAxisWidth,\n            h = this.xAxisHeight;\n        i.xAxisLabelsHeight = this.xAxisHeight - n.height, i.xAxisGroupLabelsHeight = i.xAxisLabelsHeight - r.height, i.xAxisLabelsWidth = this.xAxisWidth, i.xAxisHeight = this.xAxisHeight;\n        var c = 10;\n        (\"radar\" === e.config.chart.type || this.isSparkline) && (l = 0, h = i.goldenPadding), this.isSparkline && (this.lgRect = {\n          height: 0,\n          width: 0\n        }), (this.isSparkline || \"treemap\" === e.config.chart.type) && (l = 0, h = 0, c = 0), this.isSparkline || this.dimXAxis.additionalPaddingXLabels(r);\n\n        var d = function d() {\n          i.translateX = l, i.gridHeight = i.svgHeight - t.lgRect.height - h - (t.isSparkline || \"treemap\" === e.config.chart.type ? 0 : e.globals.rotateXLabels ? 10 : 15), i.gridWidth = i.svgWidth - l;\n        };\n\n        switch (\"top\" === e.config.xaxis.position && (c = i.xAxisHeight - e.config.xaxis.axisTicks.height - 5), e.config.legend.position) {\n          case \"bottom\":\n            i.translateY = c, d();\n            break;\n\n          case \"top\":\n            i.translateY = this.lgRect.height + c, d();\n            break;\n\n          case \"left\":\n            i.translateY = c, i.translateX = this.lgRect.width + l, i.gridHeight = i.svgHeight - h - 12, i.gridWidth = i.svgWidth - this.lgRect.width - l;\n            break;\n\n          case \"right\":\n            i.translateY = c, i.translateX = l, i.gridHeight = i.svgHeight - h - 12, i.gridWidth = i.svgWidth - this.lgRect.width - l - 5;\n            break;\n\n          default:\n            throw new Error(\"Legend position not supported\");\n        }\n\n        this.dimGrid.setGridXPosForDualYAxis(s, a), new $(this.ctx).setYAxisXPosition(a, s);\n      }\n    }, {\n      key: \"setDimensionsForNonAxisCharts\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals,\n            i = t.config,\n            a = 0;\n        t.config.legend.show && !t.config.legend.floating && (a = 20);\n        var s = \"pie\" === i.chart.type || \"polarArea\" === i.chart.type || \"donut\" === i.chart.type ? \"pie\" : \"radialBar\",\n            r = i.plotOptions[s].offsetY,\n            o = i.plotOptions[s].offsetX;\n        if (!i.legend.show || i.legend.floating) return e.gridHeight = e.svgHeight - i.grid.padding.left + i.grid.padding.right, e.gridWidth = e.gridHeight, e.translateY = r, void (e.translateX = o + (e.svgWidth - e.gridWidth) / 2);\n\n        switch (i.legend.position) {\n          case \"bottom\":\n            e.gridHeight = e.svgHeight - this.lgRect.height - e.goldenPadding, e.gridWidth = e.svgWidth, e.translateY = r - 10, e.translateX = o + (e.svgWidth - e.gridWidth) / 2;\n            break;\n\n          case \"top\":\n            e.gridHeight = e.svgHeight - this.lgRect.height - e.goldenPadding, e.gridWidth = e.svgWidth, e.translateY = this.lgRect.height + r + 10, e.translateX = o + (e.svgWidth - e.gridWidth) / 2;\n            break;\n\n          case \"left\":\n            e.gridWidth = e.svgWidth - this.lgRect.width - a, e.gridHeight = \"auto\" !== i.chart.height ? e.svgHeight : e.gridWidth, e.translateY = r, e.translateX = o + this.lgRect.width + a;\n            break;\n\n          case \"right\":\n            e.gridWidth = e.svgWidth - this.lgRect.width - a - 5, e.gridHeight = \"auto\" !== i.chart.height ? e.svgHeight : e.gridWidth, e.translateY = r, e.translateX = o + 10;\n            break;\n\n          default:\n            throw new Error(\"Legend position not supported\");\n        }\n      }\n    }, {\n      key: \"conditionalChecksForAxisCoords\",\n      value: function value(t, e, i) {\n        var a = this.w,\n            s = a.globals.hasGroups ? 2 : 1,\n            r = i.height + t.height + e.height,\n            o = a.globals.isMultiLineX ? 1.2 : a.globals.LINE_HEIGHT_RATIO,\n            n = a.globals.rotateXLabels ? 22 : 10,\n            l = a.globals.rotateXLabels && \"bottom\" === a.config.legend.position ? 10 : 0;\n        this.xAxisHeight = r * o + s * n + l, this.xAxisWidth = t.width, this.xAxisHeight - e.height > a.config.xaxis.labels.maxHeight && (this.xAxisHeight = a.config.xaxis.labels.maxHeight), a.config.xaxis.labels.minHeight && this.xAxisHeight < a.config.xaxis.labels.minHeight && (this.xAxisHeight = a.config.xaxis.labels.minHeight), a.config.xaxis.floating && (this.xAxisHeight = 0);\n        var h = 0,\n            c = 0;\n        a.config.yaxis.forEach(function (t) {\n          h += t.labels.minWidth, c += t.labels.maxWidth;\n        }), this.yAxisWidth < h && (this.yAxisWidth = h), this.yAxisWidth > c && (this.yAxisWidth = c);\n      }\n    }]), t;\n  }(),\n      ht = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.lgCtx = e;\n    }\n\n    return r(t, [{\n      key: \"getLegendStyles\",\n      value: function value() {\n        var t = document.createElement(\"style\");\n        t.setAttribute(\"type\", \"text/css\");\n        var e = document.createTextNode(\"\\t\\n    \\t\\n      .apexcharts-legend {\\t\\n        display: flex;\\t\\n        overflow: auto;\\t\\n        padding: 0 10px;\\t\\n      }\\t\\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\\t\\n        flex-wrap: wrap\\t\\n      }\\t\\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\\t\\n        flex-direction: column;\\t\\n        bottom: 0;\\t\\n      }\\t\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\\t\\n        justify-content: flex-start;\\t\\n      }\\t\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\\t\\n        justify-content: center;  \\t\\n      }\\t\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\\t\\n        justify-content: flex-end;\\t\\n      }\\t\\n      .apexcharts-legend-series {\\t\\n        cursor: pointer;\\t\\n        line-height: normal;\\t\\n      }\\t\\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{\\t\\n        display: flex;\\t\\n        align-items: center;\\t\\n      }\\t\\n      .apexcharts-legend-text {\\t\\n        position: relative;\\t\\n        font-size: 14px;\\t\\n      }\\t\\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\\t\\n        pointer-events: none;\\t\\n      }\\t\\n      .apexcharts-legend-marker {\\t\\n        position: relative;\\t\\n        display: inline-block;\\t\\n        cursor: pointer;\\t\\n        margin-right: 3px;\\t\\n        border-style: solid;\\n      }\\t\\n      \\t\\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\\t\\n        display: inline-block;\\t\\n      }\\t\\n      .apexcharts-legend-series.apexcharts-no-click {\\t\\n        cursor: auto;\\t\\n      }\\t\\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\\t\\n        display: none !important;\\t\\n      }\\t\\n      .apexcharts-inactive-legend {\\t\\n        opacity: 0.45;\\t\\n      }\");\n        return t.appendChild(e), t;\n      }\n    }, {\n      key: \"getLegendBBox\",\n      value: function value() {\n        var t = this.w.globals.dom.baseEl.querySelector(\".apexcharts-legend\").getBoundingClientRect(),\n            e = t.width;\n        return {\n          clwh: t.height,\n          clww: e\n        };\n      }\n    }, {\n      key: \"appendToForeignObject\",\n      value: function value() {\n        var t = this.w.globals;\n        t.dom.elLegendForeign = document.createElementNS(t.SVGNS, \"foreignObject\");\n        var e = t.dom.elLegendForeign;\n        e.setAttribute(\"x\", 0), e.setAttribute(\"y\", 0), e.setAttribute(\"width\", t.svgWidth), e.setAttribute(\"height\", t.svgHeight), t.dom.elLegendWrap.setAttribute(\"xmlns\", \"http://www.w3.org/1999/xhtml\"), e.appendChild(t.dom.elLegendWrap), e.appendChild(this.getLegendStyles()), t.dom.Paper.node.insertBefore(e, t.dom.elGraphical.node);\n      }\n    }, {\n      key: \"toggleDataSeries\",\n      value: function value(t, e) {\n        var i = this,\n            a = this.w;\n\n        if (a.globals.axisCharts || \"radialBar\" === a.config.chart.type) {\n          a.globals.resized = !0;\n          var s = null,\n              r = null;\n          if (a.globals.risingSeries = [], a.globals.axisCharts ? (s = a.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(t, \"']\")), r = parseInt(s.getAttribute(\"data:realIndex\"), 10)) : (s = a.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(t + 1, \"']\")), r = parseInt(s.getAttribute(\"rel\"), 10) - 1), e) [{\n            cs: a.globals.collapsedSeries,\n            csi: a.globals.collapsedSeriesIndices\n          }, {\n            cs: a.globals.ancillaryCollapsedSeries,\n            csi: a.globals.ancillaryCollapsedSeriesIndices\n          }].forEach(function (t) {\n            i.riseCollapsedSeries(t.cs, t.csi, r);\n          });else this.hideSeries({\n            seriesEl: s,\n            realIndex: r\n          });\n        } else {\n          var o = a.globals.dom.Paper.select(\" .apexcharts-series[rel='\".concat(t + 1, \"'] path\")),\n              n = a.config.chart.type;\n\n          if (\"pie\" === n || \"polarArea\" === n || \"donut\" === n) {\n            var l = a.config.plotOptions.pie.donut.labels;\n            new m(this.lgCtx.ctx).pathMouseDown(o.members[0], null), this.lgCtx.ctx.pie.printDataLabelsInner(o.members[0].node, l);\n          }\n\n          o.fire(\"click\");\n        }\n      }\n    }, {\n      key: \"hideSeries\",\n      value: function value(t) {\n        var e = t.seriesEl,\n            i = t.realIndex,\n            a = this.w,\n            s = x.clone(a.config.series);\n\n        if (a.globals.axisCharts) {\n          var r = !1;\n\n          if (a.config.yaxis[i] && a.config.yaxis[i].show && a.config.yaxis[i].showAlways && (r = !0, a.globals.ancillaryCollapsedSeriesIndices.indexOf(i) < 0 && (a.globals.ancillaryCollapsedSeries.push({\n            index: i,\n            data: s[i].data.slice(),\n            type: e.parentNode.className.baseVal.split(\"-\")[1]\n          }), a.globals.ancillaryCollapsedSeriesIndices.push(i))), !r) {\n            a.globals.collapsedSeries.push({\n              index: i,\n              data: s[i].data.slice(),\n              type: e.parentNode.className.baseVal.split(\"-\")[1]\n            }), a.globals.collapsedSeriesIndices.push(i);\n            var o = a.globals.risingSeries.indexOf(i);\n            a.globals.risingSeries.splice(o, 1);\n          }\n        } else a.globals.collapsedSeries.push({\n          index: i,\n          data: s[i]\n        }), a.globals.collapsedSeriesIndices.push(i);\n\n        for (var n = e.childNodes, l = 0; l < n.length; l++) {\n          n[l].classList.contains(\"apexcharts-series-markers-wrap\") && (n[l].classList.contains(\"apexcharts-hide\") ? n[l].classList.remove(\"apexcharts-hide\") : n[l].classList.add(\"apexcharts-hide\"));\n        }\n\n        a.globals.allSeriesCollapsed = a.globals.collapsedSeries.length === a.config.series.length, s = this._getSeriesBasedOnCollapsedState(s), this.lgCtx.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled);\n      }\n    }, {\n      key: \"riseCollapsedSeries\",\n      value: function value(t, e, i) {\n        var a = this.w,\n            s = x.clone(a.config.series);\n\n        if (t.length > 0) {\n          for (var r = 0; r < t.length; r++) {\n            t[r].index === i && (a.globals.axisCharts ? (s[i].data = t[r].data.slice(), t.splice(r, 1), e.splice(r, 1), a.globals.risingSeries.push(i)) : (s[i] = t[r].data, t.splice(r, 1), e.splice(r, 1), a.globals.risingSeries.push(i)));\n          }\n\n          s = this._getSeriesBasedOnCollapsedState(s), this.lgCtx.ctx.updateHelpers._updateSeries(s, a.config.chart.animations.dynamicAnimation.enabled);\n        }\n      }\n    }, {\n      key: \"_getSeriesBasedOnCollapsedState\",\n      value: function value(t) {\n        var e = this.w;\n        return e.globals.axisCharts ? t.forEach(function (i, a) {\n          e.globals.collapsedSeriesIndices.indexOf(a) > -1 && (t[a].data = []);\n        }) : t.forEach(function (i, a) {\n          e.globals.collapsedSeriesIndices.indexOf(a) > -1 && (t[a] = 0);\n        }), t;\n      }\n    }]), t;\n  }(),\n      ct = function () {\n    function t(e, i) {\n      a(this, t), this.ctx = e, this.w = e.w, this.onLegendClick = this.onLegendClick.bind(this), this.onLegendHovered = this.onLegendHovered.bind(this), this.isBarsDistributed = \"bar\" === this.w.config.chart.type && this.w.config.plotOptions.bar.distributed && 1 === this.w.config.series.length, this.legendHelpers = new ht(this);\n    }\n\n    return r(t, [{\n      key: \"init\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals,\n            i = t.config;\n\n        if ((i.legend.showForSingleSeries && 1 === e.series.length || this.isBarsDistributed || e.series.length > 1 || !e.axisCharts) && i.legend.show) {\n          for (; e.dom.elLegendWrap.firstChild;) {\n            e.dom.elLegendWrap.removeChild(e.dom.elLegendWrap.firstChild);\n          }\n\n          this.drawLegends(), x.isIE11() ? document.getElementsByTagName(\"head\")[0].appendChild(this.legendHelpers.getLegendStyles()) : this.legendHelpers.appendToForeignObject(), \"bottom\" === i.legend.position || \"top\" === i.legend.position ? this.legendAlignHorizontal() : \"right\" !== i.legend.position && \"left\" !== i.legend.position || this.legendAlignVertical();\n        }\n      }\n    }, {\n      key: \"drawLegends\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = e.config.legend.fontFamily,\n            a = e.globals.seriesNames,\n            s = e.globals.colors.slice();\n\n        if (\"heatmap\" === e.config.chart.type) {\n          var r = e.config.plotOptions.heatmap.colorScale.ranges;\n          a = r.map(function (t) {\n            return t.name ? t.name : t.from + \" - \" + t.to;\n          }), s = r.map(function (t) {\n            return t.color;\n          });\n        } else this.isBarsDistributed && (a = e.globals.labels.slice());\n\n        e.config.legend.customLegendItems.length && (a = e.config.legend.customLegendItems);\n\n        for (var o = e.globals.legendFormatter, n = e.config.legend.inverseOrder, l = n ? a.length - 1 : 0; n ? l >= 0 : l <= a.length - 1; n ? l-- : l++) {\n          var h = o(a[l], {\n            seriesIndex: l,\n            w: e\n          }),\n              c = !1,\n              d = !1;\n          if (e.globals.collapsedSeries.length > 0) for (var g = 0; g < e.globals.collapsedSeries.length; g++) {\n            e.globals.collapsedSeries[g].index === l && (c = !0);\n          }\n          if (e.globals.ancillaryCollapsedSeriesIndices.length > 0) for (var u = 0; u < e.globals.ancillaryCollapsedSeriesIndices.length; u++) {\n            e.globals.ancillaryCollapsedSeriesIndices[u] === l && (d = !0);\n          }\n          var f = document.createElement(\"span\");\n          f.classList.add(\"apexcharts-legend-marker\");\n          var p = e.config.legend.markers.offsetX,\n              b = e.config.legend.markers.offsetY,\n              v = e.config.legend.markers.height,\n              w = e.config.legend.markers.width,\n              k = e.config.legend.markers.strokeWidth,\n              A = e.config.legend.markers.strokeColor,\n              S = e.config.legend.markers.radius,\n              C = f.style;\n          C.background = s[l], C.color = s[l], C.setProperty(\"background\", s[l], \"important\"), e.config.legend.markers.fillColors && e.config.legend.markers.fillColors[l] && (C.background = e.config.legend.markers.fillColors[l]), void 0 !== e.globals.seriesColors[l] && (C.background = e.globals.seriesColors[l], C.color = e.globals.seriesColors[l]), C.height = Array.isArray(v) ? parseFloat(v[l]) + \"px\" : parseFloat(v) + \"px\", C.width = Array.isArray(w) ? parseFloat(w[l]) + \"px\" : parseFloat(w) + \"px\", C.left = (Array.isArray(p) ? parseFloat(p[l]) : parseFloat(p)) + \"px\", C.top = (Array.isArray(b) ? parseFloat(b[l]) : parseFloat(b)) + \"px\", C.borderWidth = Array.isArray(k) ? k[l] : k, C.borderColor = Array.isArray(A) ? A[l] : A, C.borderRadius = Array.isArray(S) ? parseFloat(S[l]) + \"px\" : parseFloat(S) + \"px\", e.config.legend.markers.customHTML && (Array.isArray(e.config.legend.markers.customHTML) ? e.config.legend.markers.customHTML[l] && (f.innerHTML = e.config.legend.markers.customHTML[l]()) : f.innerHTML = e.config.legend.markers.customHTML()), m.setAttrs(f, {\n            rel: l + 1,\n            \"data:collapsed\": c || d\n          }), (c || d) && f.classList.add(\"apexcharts-inactive-legend\");\n          var L = document.createElement(\"div\"),\n              P = document.createElement(\"span\");\n          P.classList.add(\"apexcharts-legend-text\"), P.innerHTML = Array.isArray(h) ? h.join(\" \") : h;\n          var M = e.config.legend.labels.useSeriesColors ? e.globals.colors[l] : e.config.legend.labels.colors;\n          M || (M = e.config.chart.foreColor), P.style.color = M, P.style.fontSize = parseFloat(e.config.legend.fontSize) + \"px\", P.style.fontWeight = e.config.legend.fontWeight, P.style.fontFamily = i || e.config.chart.fontFamily, m.setAttrs(P, {\n            rel: l + 1,\n            i: l,\n            \"data:default-text\": encodeURIComponent(h),\n            \"data:collapsed\": c || d\n          }), L.appendChild(f), L.appendChild(P);\n          var T = new y(this.ctx);\n          if (!e.config.legend.showForZeroSeries) 0 === T.getSeriesTotalByIndex(l) && T.seriesHaveSameValues(l) && !T.isSeriesNull(l) && -1 === e.globals.collapsedSeriesIndices.indexOf(l) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(l) && L.classList.add(\"apexcharts-hidden-zero-series\");\n          e.config.legend.showForNullSeries || T.isSeriesNull(l) && -1 === e.globals.collapsedSeriesIndices.indexOf(l) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(l) && L.classList.add(\"apexcharts-hidden-null-series\"), e.globals.dom.elLegendWrap.appendChild(L), e.globals.dom.elLegendWrap.classList.add(\"apexcharts-align-\".concat(e.config.legend.horizontalAlign)), e.globals.dom.elLegendWrap.classList.add(\"apx-legend-position-\" + e.config.legend.position), L.classList.add(\"apexcharts-legend-series\"), L.style.margin = \"\".concat(e.config.legend.itemMargin.vertical, \"px \").concat(e.config.legend.itemMargin.horizontal, \"px\"), e.globals.dom.elLegendWrap.style.width = e.config.legend.width ? e.config.legend.width + \"px\" : \"\", e.globals.dom.elLegendWrap.style.height = e.config.legend.height ? e.config.legend.height + \"px\" : \"\", m.setAttrs(L, {\n            rel: l + 1,\n            seriesName: x.escapeString(a[l]),\n            \"data:collapsed\": c || d\n          }), (c || d) && L.classList.add(\"apexcharts-inactive-legend\"), e.config.legend.onItemClick.toggleDataSeries || L.classList.add(\"apexcharts-no-click\");\n        }\n\n        e.globals.dom.elWrap.addEventListener(\"click\", t.onLegendClick, !0), e.config.legend.onItemHover.highlightDataSeries && 0 === e.config.legend.customLegendItems.length && (e.globals.dom.elWrap.addEventListener(\"mousemove\", t.onLegendHovered, !0), e.globals.dom.elWrap.addEventListener(\"mouseout\", t.onLegendHovered, !0));\n      }\n    }, {\n      key: \"setLegendWrapXY\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = i.globals.dom.baseEl.querySelector(\".apexcharts-legend\"),\n            s = a.getBoundingClientRect(),\n            r = 0,\n            o = 0;\n        if (\"bottom\" === i.config.legend.position) o += i.globals.svgHeight - s.height / 2;else if (\"top\" === i.config.legend.position) {\n          var n = new lt(this.ctx),\n              l = n.dimHelpers.getTitleSubtitleCoords(\"title\").height,\n              h = n.dimHelpers.getTitleSubtitleCoords(\"subtitle\").height;\n          o = o + (l > 0 ? l - 10 : 0) + (h > 0 ? h - 10 : 0);\n        }\n        a.style.position = \"absolute\", r = r + t + i.config.legend.offsetX, o = o + e + i.config.legend.offsetY, a.style.left = r + \"px\", a.style.top = o + \"px\", \"bottom\" === i.config.legend.position ? (a.style.top = \"auto\", a.style.bottom = 5 - i.config.legend.offsetY + \"px\") : \"right\" === i.config.legend.position && (a.style.left = \"auto\", a.style.right = 25 + i.config.legend.offsetX + \"px\");\n        [\"width\", \"height\"].forEach(function (t) {\n          a.style[t] && (a.style[t] = parseInt(i.config.legend[t], 10) + \"px\");\n        });\n      }\n    }, {\n      key: \"legendAlignHorizontal\",\n      value: function value() {\n        var t = this.w;\n        t.globals.dom.baseEl.querySelector(\".apexcharts-legend\").style.right = 0;\n        var e = this.legendHelpers.getLegendBBox(),\n            i = new lt(this.ctx),\n            a = i.dimHelpers.getTitleSubtitleCoords(\"title\"),\n            s = i.dimHelpers.getTitleSubtitleCoords(\"subtitle\"),\n            r = 0;\n        \"bottom\" === t.config.legend.position ? r = -e.clwh / 1.8 : \"top\" === t.config.legend.position && (r = a.height + s.height + t.config.title.margin + t.config.subtitle.margin - 10), this.setLegendWrapXY(20, r);\n      }\n    }, {\n      key: \"legendAlignVertical\",\n      value: function value() {\n        var t = this.w,\n            e = this.legendHelpers.getLegendBBox(),\n            i = 0;\n        \"left\" === t.config.legend.position && (i = 20), \"right\" === t.config.legend.position && (i = t.globals.svgWidth - e.clww - 10), this.setLegendWrapXY(i, 20);\n      }\n    }, {\n      key: \"onLegendHovered\",\n      value: function value(t) {\n        var e = this.w,\n            i = t.target.classList.contains(\"apexcharts-legend-text\") || t.target.classList.contains(\"apexcharts-legend-marker\");\n\n        if (\"heatmap\" === e.config.chart.type || this.isBarsDistributed) {\n          if (i) {\n            var a = parseInt(t.target.getAttribute(\"rel\"), 10) - 1;\n            this.ctx.events.fireEvent(\"legendHover\", [this.ctx, a, this.w]), new E(this.ctx).highlightRangeInSeries(t, t.target);\n          }\n        } else !t.target.classList.contains(\"apexcharts-inactive-legend\") && i && new E(this.ctx).toggleSeriesOnHover(t, t.target);\n      }\n    }, {\n      key: \"onLegendClick\",\n      value: function value(t) {\n        var e = this.w;\n\n        if (!e.config.legend.customLegendItems.length && (t.target.classList.contains(\"apexcharts-legend-text\") || t.target.classList.contains(\"apexcharts-legend-marker\"))) {\n          var i = parseInt(t.target.getAttribute(\"rel\"), 10) - 1,\n              a = \"true\" === t.target.getAttribute(\"data:collapsed\"),\n              s = this.w.config.chart.events.legendClick;\n          \"function\" == typeof s && s(this.ctx, i, this.w), this.ctx.events.fireEvent(\"legendClick\", [this.ctx, i, this.w]);\n          var r = this.w.config.legend.markers.onClick;\n          \"function\" == typeof r && t.target.classList.contains(\"apexcharts-legend-marker\") && (r(this.ctx, i, this.w), this.ctx.events.fireEvent(\"legendMarkerClick\", [this.ctx, i, this.w])), \"treemap\" !== e.config.chart.type && \"heatmap\" !== e.config.chart.type && !this.isBarsDistributed && e.config.legend.onItemClick.toggleDataSeries && this.legendHelpers.toggleDataSeries(i, a);\n        }\n      }\n    }]), t;\n  }(),\n      dt = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n      var i = this.w;\n      this.ev = this.w.config.chart.events, this.selectedClass = \"apexcharts-selected\", this.localeValues = this.w.globals.locale.toolbar, this.minX = i.globals.minX, this.maxX = i.globals.maxX;\n    }\n\n    return r(t, [{\n      key: \"createToolbar\",\n      value: function value() {\n        var t = this,\n            e = this.w,\n            i = function i() {\n          return document.createElement(\"div\");\n        },\n            a = i();\n\n        if (a.setAttribute(\"class\", \"apexcharts-toolbar\"), a.style.top = e.config.chart.toolbar.offsetY + \"px\", a.style.right = 3 - e.config.chart.toolbar.offsetX + \"px\", e.globals.dom.elWrap.appendChild(a), this.elZoom = i(), this.elZoomIn = i(), this.elZoomOut = i(), this.elPan = i(), this.elSelection = i(), this.elZoomReset = i(), this.elMenuIcon = i(), this.elMenu = i(), this.elCustomIcons = [], this.t = e.config.chart.toolbar.tools, Array.isArray(this.t.customIcons)) for (var s = 0; s < this.t.customIcons.length; s++) {\n          this.elCustomIcons.push(i());\n        }\n\n        var r = [],\n            o = function o(i, a, s) {\n          var o = i.toLowerCase();\n          t.t[o] && e.config.chart.zoom.enabled && r.push({\n            el: a,\n            icon: \"string\" == typeof t.t[o] ? t.t[o] : s,\n            title: t.localeValues[i],\n            \"class\": \"apexcharts-\".concat(o, \"-icon\")\n          });\n        };\n\n        o(\"zoomIn\", this.elZoomIn, '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\\n</svg>\\n'), o(\"zoomOut\", this.elZoomOut, '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\\n</svg>\\n');\n\n        var n = function n(i) {\n          t.t[i] && e.config.chart[i].enabled && r.push({\n            el: \"zoom\" === i ? t.elZoom : t.elSelection,\n            icon: \"string\" == typeof t.t[i] ? t.t[i] : \"zoom\" === i ? '<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\\n    <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\\n    <path d=\"M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z\"/>\\n</svg>' : '<svg fill=\"#6E8192\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n    <path d=\"M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z\"/>\\n</svg>',\n            title: t.localeValues[\"zoom\" === i ? \"selectionZoom\" : \"selection\"],\n            \"class\": e.globals.isTouchDevice ? \"apexcharts-element-hidden\" : \"apexcharts-\".concat(i, \"-icon\")\n          });\n        };\n\n        n(\"zoom\"), n(\"selection\"), this.t.pan && e.config.chart.zoom.enabled && r.push({\n          el: this.elPan,\n          icon: \"string\" == typeof this.t.pan ? this.t.pan : '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\\n    <defs>\\n        <path d=\"M0 0h24v24H0z\" id=\"a\"/>\\n    </defs>\\n    <clipPath id=\"b\">\\n        <use overflow=\"visible\" xlink:href=\"#a\"/>\\n    </clipPath>\\n    <path clip-path=\"url(#b)\" d=\"M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z\"/>\\n</svg>',\n          title: this.localeValues.pan,\n          \"class\": e.globals.isTouchDevice ? \"apexcharts-element-hidden\" : \"apexcharts-pan-icon\"\n        }), o(\"reset\", this.elZoomReset, '<svg fill=\"#000000\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\\n    <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\"/>\\n    <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\\n</svg>'), this.t.download && r.push({\n          el: this.elMenuIcon,\n          icon: \"string\" == typeof this.t.download ? this.t.download : '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"/></svg>',\n          title: this.localeValues.menu,\n          \"class\": \"apexcharts-menu-icon\"\n        });\n\n        for (var l = 0; l < this.elCustomIcons.length; l++) {\n          r.push({\n            el: this.elCustomIcons[l],\n            icon: this.t.customIcons[l].icon,\n            title: this.t.customIcons[l].title,\n            index: this.t.customIcons[l].index,\n            \"class\": \"apexcharts-toolbar-custom-icon \" + this.t.customIcons[l][\"class\"]\n          });\n        }\n\n        r.forEach(function (t, e) {\n          t.index && x.moveIndexInArray(r, e, t.index);\n        });\n\n        for (var h = 0; h < r.length; h++) {\n          m.setAttrs(r[h].el, {\n            \"class\": r[h][\"class\"],\n            title: r[h].title\n          }), r[h].el.innerHTML = r[h].icon, a.appendChild(r[h].el);\n        }\n\n        this._createHamburgerMenu(a), e.globals.zoomEnabled ? this.elZoom.classList.add(this.selectedClass) : e.globals.panEnabled ? this.elPan.classList.add(this.selectedClass) : e.globals.selectionEnabled && this.elSelection.classList.add(this.selectedClass), this.addToolbarEventListeners();\n      }\n    }, {\n      key: \"_createHamburgerMenu\",\n      value: function value(t) {\n        this.elMenuItems = [], t.appendChild(this.elMenu), m.setAttrs(this.elMenu, {\n          \"class\": \"apexcharts-menu\"\n        });\n        var e = [{\n          name: \"exportSVG\",\n          title: this.localeValues.exportToSVG\n        }, {\n          name: \"exportPNG\",\n          title: this.localeValues.exportToPNG\n        }, {\n          name: \"exportCSV\",\n          title: this.localeValues.exportToCSV\n        }];\n        this.w.globals.allSeriesHasEqualX || e.splice(2, 1);\n\n        for (var i = 0; i < e.length; i++) {\n          this.elMenuItems.push(document.createElement(\"div\")), this.elMenuItems[i].innerHTML = e[i].title, m.setAttrs(this.elMenuItems[i], {\n            \"class\": \"apexcharts-menu-item \".concat(e[i].name),\n            title: e[i].title\n          }), this.elMenu.appendChild(this.elMenuItems[i]);\n        }\n      }\n    }, {\n      key: \"addToolbarEventListeners\",\n      value: function value() {\n        var t = this;\n        this.elZoomReset.addEventListener(\"click\", this.handleZoomReset.bind(this)), this.elSelection.addEventListener(\"click\", this.toggleZoomSelection.bind(this, \"selection\")), this.elZoom.addEventListener(\"click\", this.toggleZoomSelection.bind(this, \"zoom\")), this.elZoomIn.addEventListener(\"click\", this.handleZoomIn.bind(this)), this.elZoomOut.addEventListener(\"click\", this.handleZoomOut.bind(this)), this.elPan.addEventListener(\"click\", this.togglePanning.bind(this)), this.elMenuIcon.addEventListener(\"click\", this.toggleMenu.bind(this)), this.elMenuItems.forEach(function (e) {\n          e.classList.contains(\"exportSVG\") ? e.addEventListener(\"click\", t.handleDownload.bind(t, \"svg\")) : e.classList.contains(\"exportPNG\") ? e.addEventListener(\"click\", t.handleDownload.bind(t, \"png\")) : e.classList.contains(\"exportCSV\") && e.addEventListener(\"click\", t.handleDownload.bind(t, \"csv\"));\n        });\n\n        for (var e = 0; e < this.t.customIcons.length; e++) {\n          this.elCustomIcons[e].addEventListener(\"click\", this.t.customIcons[e].click.bind(this, this.ctx, this.ctx.w));\n        }\n      }\n    }, {\n      key: \"toggleZoomSelection\",\n      value: function value(t) {\n        this.ctx.getSyncedCharts().forEach(function (e) {\n          e.ctx.toolbar.toggleOtherControls();\n          var i = \"selection\" === t ? e.ctx.toolbar.elSelection : e.ctx.toolbar.elZoom,\n              a = \"selection\" === t ? \"selectionEnabled\" : \"zoomEnabled\";\n          e.w.globals[a] = !e.w.globals[a], i.classList.contains(e.ctx.toolbar.selectedClass) ? i.classList.remove(e.ctx.toolbar.selectedClass) : i.classList.add(e.ctx.toolbar.selectedClass);\n        });\n      }\n    }, {\n      key: \"getToolbarIconsReference\",\n      value: function value() {\n        var t = this.w;\n        this.elZoom || (this.elZoom = t.globals.dom.baseEl.querySelector(\".apexcharts-zoom-icon\")), this.elPan || (this.elPan = t.globals.dom.baseEl.querySelector(\".apexcharts-pan-icon\")), this.elSelection || (this.elSelection = t.globals.dom.baseEl.querySelector(\".apexcharts-selection-icon\"));\n      }\n    }, {\n      key: \"enableZoomPanFromToolbar\",\n      value: function value(t) {\n        this.toggleOtherControls(), \"pan\" === t ? this.w.globals.panEnabled = !0 : this.w.globals.zoomEnabled = !0;\n        var e = \"pan\" === t ? this.elPan : this.elZoom,\n            i = \"pan\" === t ? this.elZoom : this.elPan;\n        e && e.classList.add(this.selectedClass), i && i.classList.remove(this.selectedClass);\n      }\n    }, {\n      key: \"togglePanning\",\n      value: function value() {\n        this.ctx.getSyncedCharts().forEach(function (t) {\n          t.ctx.toolbar.toggleOtherControls(), t.w.globals.panEnabled = !t.w.globals.panEnabled, t.ctx.toolbar.elPan.classList.contains(t.ctx.toolbar.selectedClass) ? t.ctx.toolbar.elPan.classList.remove(t.ctx.toolbar.selectedClass) : t.ctx.toolbar.elPan.classList.add(t.ctx.toolbar.selectedClass);\n        });\n      }\n    }, {\n      key: \"toggleOtherControls\",\n      value: function value() {\n        var t = this,\n            e = this.w;\n        e.globals.panEnabled = !1, e.globals.zoomEnabled = !1, e.globals.selectionEnabled = !1, this.getToolbarIconsReference(), [this.elPan, this.elSelection, this.elZoom].forEach(function (e) {\n          e && e.classList.remove(t.selectedClass);\n        });\n      }\n    }, {\n      key: \"handleZoomIn\",\n      value: function value() {\n        var t = this.w;\n        t.globals.isRangeBar && (this.minX = t.globals.minY, this.maxX = t.globals.maxY);\n\n        var e = (this.minX + this.maxX) / 2,\n            i = (this.minX + e) / 2,\n            a = (this.maxX + e) / 2,\n            s = this._getNewMinXMaxX(i, a);\n\n        t.globals.disableZoomIn || this.zoomUpdateOptions(s.minX, s.maxX);\n      }\n    }, {\n      key: \"handleZoomOut\",\n      value: function value() {\n        var t = this.w;\n\n        if (t.globals.isRangeBar && (this.minX = t.globals.minY, this.maxX = t.globals.maxY), !(\"datetime\" === t.config.xaxis.type && new Date(this.minX).getUTCFullYear() < 1e3)) {\n          var e = (this.minX + this.maxX) / 2,\n              i = this.minX - (e - this.minX),\n              a = this.maxX - (e - this.maxX),\n              s = this._getNewMinXMaxX(i, a);\n\n          t.globals.disableZoomOut || this.zoomUpdateOptions(s.minX, s.maxX);\n        }\n      }\n    }, {\n      key: \"_getNewMinXMaxX\",\n      value: function value(t, e) {\n        var i = this.w.config.xaxis.convertedCatToNumeric;\n        return {\n          minX: i ? Math.floor(t) : t,\n          maxX: i ? Math.floor(e) : e\n        };\n      }\n    }, {\n      key: \"zoomUpdateOptions\",\n      value: function value(t, e) {\n        var i = this.w;\n\n        if (void 0 !== t || void 0 !== e) {\n          if (!(i.config.xaxis.convertedCatToNumeric && (t < 1 && (t = 1, e = i.globals.dataPoints), e - t < 2))) {\n            var a = {\n              min: t,\n              max: e\n            },\n                s = this.getBeforeZoomRange(a);\n            s && (a = s.xaxis);\n            var r = {\n              xaxis: a\n            },\n                o = x.clone(i.globals.initialConfig.yaxis);\n            if (i.config.chart.zoom.autoScaleYaxis) o = new q(this.ctx).autoScaleY(this.ctx, o, {\n              xaxis: a\n            });\n            i.config.chart.group || (r.yaxis = o), this.w.globals.zoomed = !0, this.ctx.updateHelpers._updateOptions(r, !1, this.w.config.chart.animations.dynamicAnimation.enabled), this.zoomCallback(a, o);\n          }\n        } else this.handleZoomReset();\n      }\n    }, {\n      key: \"zoomCallback\",\n      value: function value(t, e) {\n        \"function\" == typeof this.ev.zoomed && this.ev.zoomed(this.ctx, {\n          xaxis: t,\n          yaxis: e\n        });\n      }\n    }, {\n      key: \"getBeforeZoomRange\",\n      value: function value(t, e) {\n        var i = null;\n        return \"function\" == typeof this.ev.beforeZoom && (i = this.ev.beforeZoom(this, {\n          xaxis: t,\n          yaxis: e\n        })), i;\n      }\n    }, {\n      key: \"toggleMenu\",\n      value: function value() {\n        var t = this;\n        window.setTimeout(function () {\n          t.elMenu.classList.contains(\"apexcharts-menu-open\") ? t.elMenu.classList.remove(\"apexcharts-menu-open\") : t.elMenu.classList.add(\"apexcharts-menu-open\");\n        }, 0);\n      }\n    }, {\n      key: \"handleDownload\",\n      value: function value(t) {\n        var e = this.w,\n            i = new j(this.ctx);\n\n        switch (t) {\n          case \"svg\":\n            i.exportToSVG(this.ctx);\n            break;\n\n          case \"png\":\n            i.exportToPng(this.ctx);\n            break;\n\n          case \"csv\":\n            i.exportToCSV({\n              series: e.config.series,\n              columnDelimiter: e.config.chart.toolbar[\"export\"].csv.columnDelimiter\n            });\n        }\n      }\n    }, {\n      key: \"handleZoomReset\",\n      value: function value(t) {\n        this.ctx.getSyncedCharts().forEach(function (t) {\n          var e = t.w;\n\n          if (e.globals.lastXAxis.min = void 0, e.globals.lastXAxis.max = void 0, t.updateHelpers.revertDefaultAxisMinMax(), \"function\" == typeof e.config.chart.events.beforeResetZoom) {\n            var i = e.config.chart.events.beforeResetZoom(t, e);\n            i && t.updateHelpers.revertDefaultAxisMinMax(i);\n          }\n\n          \"function\" == typeof e.config.chart.events.zoomed && t.ctx.toolbar.zoomCallback({\n            min: e.config.xaxis.min,\n            max: e.config.xaxis.max\n          }), e.globals.zoomed = !1;\n          var a = t.ctx.series.emptyCollapsedSeries(x.clone(e.globals.initialSeries));\n\n          t.updateHelpers._updateSeries(a, e.config.chart.animations.dynamicAnimation.enabled);\n        });\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        this.elZoom = null, this.elZoomIn = null, this.elZoomOut = null, this.elPan = null, this.elSelection = null, this.elZoomReset = null, this.elMenuIcon = null;\n      }\n    }]), t;\n  }(),\n      gt = function (t) {\n    n(i, t);\n    var e = d(i);\n\n    function i(t) {\n      var s;\n      return a(this, i), (s = e.call(this, t)).ctx = t, s.w = t.w, s.dragged = !1, s.graphics = new m(s.ctx), s.eventList = [\"mousedown\", \"mouseleave\", \"mousemove\", \"touchstart\", \"touchmove\", \"mouseup\", \"touchend\"], s.clientX = 0, s.clientY = 0, s.startX = 0, s.endX = 0, s.dragX = 0, s.startY = 0, s.endY = 0, s.dragY = 0, s.moveDirection = \"none\", s;\n    }\n\n    return r(i, [{\n      key: \"init\",\n      value: function value(t) {\n        var e = this,\n            i = t.xyRatios,\n            a = this.w,\n            s = this;\n        this.xyRatios = i, this.zoomRect = this.graphics.drawRect(0, 0, 0, 0), this.selectionRect = this.graphics.drawRect(0, 0, 0, 0), this.gridRect = a.globals.dom.baseEl.querySelector(\".apexcharts-grid\"), this.zoomRect.node.classList.add(\"apexcharts-zoom-rect\"), this.selectionRect.node.classList.add(\"apexcharts-selection-rect\"), a.globals.dom.elGraphical.add(this.zoomRect), a.globals.dom.elGraphical.add(this.selectionRect), \"x\" === a.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({\n          minX: 0,\n          minY: 0,\n          maxX: a.globals.gridWidth,\n          maxY: a.globals.gridHeight\n        }).on(\"dragmove\", this.selectionDragging.bind(this, \"dragging\")) : \"y\" === a.config.chart.selection.type ? this.slDraggableRect = this.selectionRect.draggable({\n          minX: 0,\n          maxX: a.globals.gridWidth\n        }).on(\"dragmove\", this.selectionDragging.bind(this, \"dragging\")) : this.slDraggableRect = this.selectionRect.draggable().on(\"dragmove\", this.selectionDragging.bind(this, \"dragging\")), this.preselectedSelection(), this.hoverArea = a.globals.dom.baseEl.querySelector(\"\".concat(a.globals.chartClass, \" .apexcharts-svg\")), this.hoverArea.classList.add(\"apexcharts-zoomable\"), this.eventList.forEach(function (t) {\n          e.hoverArea.addEventListener(t, s.svgMouseEvents.bind(s, i), {\n            capture: !1,\n            passive: !0\n          });\n        });\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        this.slDraggableRect && (this.slDraggableRect.draggable(!1), this.slDraggableRect.off(), this.selectionRect.off()), this.selectionRect = null, this.zoomRect = null, this.gridRect = null;\n      }\n    }, {\n      key: \"svgMouseEvents\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = this,\n            s = this.ctx.toolbar,\n            r = i.globals.zoomEnabled ? i.config.chart.zoom.type : i.config.chart.selection.type,\n            o = i.config.chart.toolbar.autoSelected;\n\n        if (e.shiftKey ? (this.shiftWasPressed = !0, s.enableZoomPanFromToolbar(\"pan\" === o ? \"zoom\" : \"pan\")) : this.shiftWasPressed && (s.enableZoomPanFromToolbar(o), this.shiftWasPressed = !1), e.target) {\n          var n,\n              l = e.target.classList;\n\n          if (e.target.parentNode && null !== e.target.parentNode && (n = e.target.parentNode.classList), !(l.contains(\"apexcharts-selection-rect\") || l.contains(\"apexcharts-legend-marker\") || l.contains(\"apexcharts-legend-text\") || n && n.contains(\"apexcharts-toolbar\"))) {\n            if (a.clientX = \"touchmove\" === e.type || \"touchstart\" === e.type ? e.touches[0].clientX : \"touchend\" === e.type ? e.changedTouches[0].clientX : e.clientX, a.clientY = \"touchmove\" === e.type || \"touchstart\" === e.type ? e.touches[0].clientY : \"touchend\" === e.type ? e.changedTouches[0].clientY : e.clientY, \"mousedown\" === e.type && 1 === e.which) {\n              var h = a.gridRect.getBoundingClientRect();\n              a.startX = a.clientX - h.left, a.startY = a.clientY - h.top, a.dragged = !1, a.w.globals.mousedown = !0;\n            }\n\n            if ((\"mousemove\" === e.type && 1 === e.which || \"touchmove\" === e.type) && (a.dragged = !0, i.globals.panEnabled ? (i.globals.selection = null, a.w.globals.mousedown && a.panDragging({\n              context: a,\n              zoomtype: r,\n              xyRatios: t\n            })) : (a.w.globals.mousedown && i.globals.zoomEnabled || a.w.globals.mousedown && i.globals.selectionEnabled) && (a.selection = a.selectionDrawing({\n              context: a,\n              zoomtype: r\n            }))), \"mouseup\" === e.type || \"touchend\" === e.type || \"mouseleave\" === e.type) {\n              var c = a.gridRect.getBoundingClientRect();\n              a.w.globals.mousedown && (a.endX = a.clientX - c.left, a.endY = a.clientY - c.top, a.dragX = Math.abs(a.endX - a.startX), a.dragY = Math.abs(a.endY - a.startY), (i.globals.zoomEnabled || i.globals.selectionEnabled) && a.selectionDrawn({\n                context: a,\n                zoomtype: r\n              }), i.globals.panEnabled && i.config.xaxis.convertedCatToNumeric && a.delayedPanScrolled()), i.globals.zoomEnabled && a.hideSelectionRect(this.selectionRect), a.dragged = !1, a.w.globals.mousedown = !1;\n            }\n\n            this.makeSelectionRectDraggable();\n          }\n        }\n      }\n    }, {\n      key: \"makeSelectionRectDraggable\",\n      value: function value() {\n        var t = this.w;\n\n        if (this.selectionRect) {\n          var e = this.selectionRect.node.getBoundingClientRect();\n          e.width > 0 && e.height > 0 && this.slDraggableRect.selectize({\n            points: \"l, r\",\n            pointSize: 8,\n            pointType: \"rect\"\n          }).resize({\n            constraint: {\n              minX: 0,\n              minY: 0,\n              maxX: t.globals.gridWidth,\n              maxY: t.globals.gridHeight\n            }\n          }).on(\"resizing\", this.selectionDragging.bind(this, \"resizing\"));\n        }\n      }\n    }, {\n      key: \"preselectedSelection\",\n      value: function value() {\n        var t = this.w,\n            e = this.xyRatios;\n        if (!t.globals.zoomEnabled) if (void 0 !== t.globals.selection && null !== t.globals.selection) this.drawSelectionRect(t.globals.selection);else if (void 0 !== t.config.chart.selection.xaxis.min && void 0 !== t.config.chart.selection.xaxis.max) {\n          var i = (t.config.chart.selection.xaxis.min - t.globals.minX) / e.xRatio,\n              a = {\n            x: i,\n            y: 0,\n            width: t.globals.gridWidth - (t.globals.maxX - t.config.chart.selection.xaxis.max) / e.xRatio - i,\n            height: t.globals.gridHeight,\n            translateX: 0,\n            translateY: 0,\n            selectionEnabled: !0\n          };\n          this.drawSelectionRect(a), this.makeSelectionRectDraggable(), \"function\" == typeof t.config.chart.events.selection && t.config.chart.events.selection(this.ctx, {\n            xaxis: {\n              min: t.config.chart.selection.xaxis.min,\n              max: t.config.chart.selection.xaxis.max\n            },\n            yaxis: {}\n          });\n        }\n      }\n    }, {\n      key: \"drawSelectionRect\",\n      value: function value(t) {\n        var e = t.x,\n            i = t.y,\n            a = t.width,\n            s = t.height,\n            r = t.translateX,\n            o = void 0 === r ? 0 : r,\n            n = t.translateY,\n            l = void 0 === n ? 0 : n,\n            h = this.w,\n            c = this.zoomRect,\n            d = this.selectionRect;\n\n        if (this.dragged || null !== h.globals.selection) {\n          var g = {\n            transform: \"translate(\" + o + \", \" + l + \")\"\n          };\n          h.globals.zoomEnabled && this.dragged && (a < 0 && (a = 1), c.attr({\n            x: e,\n            y: i,\n            width: a,\n            height: s,\n            fill: h.config.chart.zoom.zoomedArea.fill.color,\n            \"fill-opacity\": h.config.chart.zoom.zoomedArea.fill.opacity,\n            stroke: h.config.chart.zoom.zoomedArea.stroke.color,\n            \"stroke-width\": h.config.chart.zoom.zoomedArea.stroke.width,\n            \"stroke-opacity\": h.config.chart.zoom.zoomedArea.stroke.opacity\n          }), m.setAttrs(c.node, g)), h.globals.selectionEnabled && (d.attr({\n            x: e,\n            y: i,\n            width: a > 0 ? a : 0,\n            height: s > 0 ? s : 0,\n            fill: h.config.chart.selection.fill.color,\n            \"fill-opacity\": h.config.chart.selection.fill.opacity,\n            stroke: h.config.chart.selection.stroke.color,\n            \"stroke-width\": h.config.chart.selection.stroke.width,\n            \"stroke-dasharray\": h.config.chart.selection.stroke.dashArray,\n            \"stroke-opacity\": h.config.chart.selection.stroke.opacity\n          }), m.setAttrs(d.node, g));\n        }\n      }\n    }, {\n      key: \"hideSelectionRect\",\n      value: function value(t) {\n        t && t.attr({\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        });\n      }\n    }, {\n      key: \"selectionDrawing\",\n      value: function value(t) {\n        var e = t.context,\n            i = t.zoomtype,\n            a = this.w,\n            s = e,\n            r = this.gridRect.getBoundingClientRect(),\n            o = s.startX - 1,\n            n = s.startY,\n            l = !1,\n            h = !1,\n            c = s.clientX - r.left - o,\n            d = s.clientY - r.top - n,\n            g = {};\n        return Math.abs(c + o) > a.globals.gridWidth ? c = a.globals.gridWidth - o : s.clientX - r.left < 0 && (c = o), o > s.clientX - r.left && (l = !0, c = Math.abs(c)), n > s.clientY - r.top && (h = !0, d = Math.abs(d)), g = \"x\" === i ? {\n          x: l ? o - c : o,\n          y: 0,\n          width: c,\n          height: a.globals.gridHeight\n        } : \"y\" === i ? {\n          x: 0,\n          y: h ? n - d : n,\n          width: a.globals.gridWidth,\n          height: d\n        } : {\n          x: l ? o - c : o,\n          y: h ? n - d : n,\n          width: c,\n          height: d\n        }, s.drawSelectionRect(g), s.selectionDragging(\"resizing\"), g;\n      }\n    }, {\n      key: \"selectionDragging\",\n      value: function value(t, e) {\n        var i = this,\n            a = this.w,\n            s = this.xyRatios,\n            r = this.selectionRect,\n            o = 0;\n        \"resizing\" === t && (o = 30);\n\n        var n = function n(t) {\n          return parseFloat(r.node.getAttribute(t));\n        },\n            l = {\n          x: n(\"x\"),\n          y: n(\"y\"),\n          width: n(\"width\"),\n          height: n(\"height\")\n        };\n\n        a.globals.selection = l, \"function\" == typeof a.config.chart.events.selection && a.globals.selectionEnabled && (clearTimeout(this.w.globals.selectionResizeTimer), this.w.globals.selectionResizeTimer = window.setTimeout(function () {\n          var t = i.gridRect.getBoundingClientRect(),\n              e = r.node.getBoundingClientRect(),\n              o = {\n            xaxis: {\n              min: a.globals.xAxisScale.niceMin + (e.left - t.left) * s.xRatio,\n              max: a.globals.xAxisScale.niceMin + (e.right - t.left) * s.xRatio\n            },\n            yaxis: {\n              min: a.globals.yAxisScale[0].niceMin + (t.bottom - e.bottom) * s.yRatio[0],\n              max: a.globals.yAxisScale[0].niceMax - (e.top - t.top) * s.yRatio[0]\n            }\n          };\n          a.config.chart.events.selection(i.ctx, o), a.config.chart.brush.enabled && void 0 !== a.config.chart.events.brushScrolled && a.config.chart.events.brushScrolled(i.ctx, o);\n        }, o));\n      }\n    }, {\n      key: \"selectionDrawn\",\n      value: function value(t) {\n        var e = t.context,\n            i = t.zoomtype,\n            a = this.w,\n            s = e,\n            r = this.xyRatios,\n            o = this.ctx.toolbar;\n\n        if (s.startX > s.endX) {\n          var n = s.startX;\n          s.startX = s.endX, s.endX = n;\n        }\n\n        if (s.startY > s.endY) {\n          var l = s.startY;\n          s.startY = s.endY, s.endY = l;\n        }\n\n        var h = void 0,\n            c = void 0;\n        a.globals.isRangeBar ? (h = a.globals.yAxisScale[0].niceMin + s.startX * r.invertedYRatio, c = a.globals.yAxisScale[0].niceMin + s.endX * r.invertedYRatio) : (h = a.globals.xAxisScale.niceMin + s.startX * r.xRatio, c = a.globals.xAxisScale.niceMin + s.endX * r.xRatio);\n        var d = [],\n            g = [];\n        if (a.config.yaxis.forEach(function (t, e) {\n          d.push(a.globals.yAxisScale[e].niceMax - r.yRatio[e] * s.startY), g.push(a.globals.yAxisScale[e].niceMax - r.yRatio[e] * s.endY);\n        }), s.dragged && (s.dragX > 10 || s.dragY > 10) && h !== c) if (a.globals.zoomEnabled) {\n          var u = x.clone(a.globals.initialConfig.yaxis),\n              f = x.clone(a.globals.initialConfig.xaxis);\n\n          if (a.globals.zoomed = !0, a.config.xaxis.convertedCatToNumeric && (h = Math.floor(h), c = Math.floor(c), h < 1 && (h = 1, c = a.globals.dataPoints), c - h < 2 && (c = h + 1)), \"xy\" !== i && \"x\" !== i || (f = {\n            min: h,\n            max: c\n          }), \"xy\" !== i && \"y\" !== i || u.forEach(function (t, e) {\n            u[e].min = g[e], u[e].max = d[e];\n          }), a.config.chart.zoom.autoScaleYaxis) {\n            var p = new q(s.ctx);\n            u = p.autoScaleY(s.ctx, u, {\n              xaxis: f\n            });\n          }\n\n          if (o) {\n            var b = o.getBeforeZoomRange(f, u);\n            b && (f = b.xaxis ? b.xaxis : f, u = b.yaxis ? b.yaxis : u);\n          }\n\n          var v = {\n            xaxis: f\n          };\n          a.config.chart.group || (v.yaxis = u), s.ctx.updateHelpers._updateOptions(v, !1, s.w.config.chart.animations.dynamicAnimation.enabled), \"function\" == typeof a.config.chart.events.zoomed && o.zoomCallback(f, u);\n        } else if (a.globals.selectionEnabled) {\n          var m,\n              y = null;\n          m = {\n            min: h,\n            max: c\n          }, \"xy\" !== i && \"y\" !== i || (y = x.clone(a.config.yaxis)).forEach(function (t, e) {\n            y[e].min = g[e], y[e].max = d[e];\n          }), a.globals.selection = s.selection, \"function\" == typeof a.config.chart.events.selection && a.config.chart.events.selection(s.ctx, {\n            xaxis: m,\n            yaxis: y\n          });\n        }\n      }\n    }, {\n      key: \"panDragging\",\n      value: function value(t) {\n        var e = t.context,\n            i = this.w,\n            a = e;\n\n        if (void 0 !== i.globals.lastClientPosition.x) {\n          var s = i.globals.lastClientPosition.x - a.clientX,\n              r = i.globals.lastClientPosition.y - a.clientY;\n          Math.abs(s) > Math.abs(r) && s > 0 ? this.moveDirection = \"left\" : Math.abs(s) > Math.abs(r) && s < 0 ? this.moveDirection = \"right\" : Math.abs(r) > Math.abs(s) && r > 0 ? this.moveDirection = \"up\" : Math.abs(r) > Math.abs(s) && r < 0 && (this.moveDirection = \"down\");\n        }\n\n        i.globals.lastClientPosition = {\n          x: a.clientX,\n          y: a.clientY\n        };\n        var o = i.globals.isRangeBar ? i.globals.minY : i.globals.minX,\n            n = i.globals.isRangeBar ? i.globals.maxY : i.globals.maxX;\n        i.config.xaxis.convertedCatToNumeric || a.panScrolled(o, n);\n      }\n    }, {\n      key: \"delayedPanScrolled\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals.minX,\n            i = t.globals.maxX,\n            a = (t.globals.maxX - t.globals.minX) / 2;\n        \"left\" === this.moveDirection ? (e = t.globals.minX + a, i = t.globals.maxX + a) : \"right\" === this.moveDirection && (e = t.globals.minX - a, i = t.globals.maxX - a), e = Math.floor(e), i = Math.floor(i), this.updateScrolledChart({\n          xaxis: {\n            min: e,\n            max: i\n          }\n        }, e, i);\n      }\n    }, {\n      key: \"panScrolled\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = this.xyRatios,\n            s = x.clone(i.globals.initialConfig.yaxis),\n            r = a.xRatio,\n            o = i.globals.minX,\n            n = i.globals.maxX;\n        i.globals.isRangeBar && (r = a.invertedYRatio, o = i.globals.minY, n = i.globals.maxY), \"left\" === this.moveDirection ? (t = o + i.globals.gridWidth / 15 * r, e = n + i.globals.gridWidth / 15 * r) : \"right\" === this.moveDirection && (t = o - i.globals.gridWidth / 15 * r, e = n - i.globals.gridWidth / 15 * r), i.globals.isRangeBar || (t < i.globals.initialMinX || e > i.globals.initialMaxX) && (t = o, e = n);\n        var l = {\n          min: t,\n          max: e\n        };\n        i.config.chart.zoom.autoScaleYaxis && (s = new q(this.ctx).autoScaleY(this.ctx, s, {\n          xaxis: l\n        }));\n        var h = {\n          xaxis: {\n            min: t,\n            max: e\n          }\n        };\n        i.config.chart.group || (h.yaxis = s), this.updateScrolledChart(h, t, e);\n      }\n    }, {\n      key: \"updateScrolledChart\",\n      value: function value(t, e, i) {\n        var a = this.w;\n        this.ctx.updateHelpers._updateOptions(t, !1, !1), \"function\" == typeof a.config.chart.events.scrolled && a.config.chart.events.scrolled(this.ctx, {\n          xaxis: {\n            min: e,\n            max: i\n          }\n        });\n      }\n    }]), i;\n  }(dt),\n      ut = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.ttCtx = e, this.ctx = e.ctx;\n    }\n\n    return r(t, [{\n      key: \"getNearestValues\",\n      value: function value(t) {\n        var e = t.hoverArea,\n            i = t.elGrid,\n            a = t.clientX,\n            s = t.clientY,\n            r = this.w,\n            o = i.getBoundingClientRect(),\n            n = o.width,\n            l = o.height,\n            h = n / (r.globals.dataPoints - 1),\n            c = l / r.globals.dataPoints,\n            d = this.hasBars();\n        !r.globals.comboCharts && !d || r.config.xaxis.convertedCatToNumeric || (h = n / r.globals.dataPoints);\n        var g = a - o.left - r.globals.barPadForNumericAxis,\n            u = s - o.top;\n        g < 0 || u < 0 || g > n || u > l ? (e.classList.remove(\"hovering-zoom\"), e.classList.remove(\"hovering-pan\")) : r.globals.zoomEnabled ? (e.classList.remove(\"hovering-pan\"), e.classList.add(\"hovering-zoom\")) : r.globals.panEnabled && (e.classList.remove(\"hovering-zoom\"), e.classList.add(\"hovering-pan\"));\n        var f = Math.round(g / h),\n            p = Math.floor(u / c);\n        d && !r.config.xaxis.convertedCatToNumeric && (f = Math.ceil(g / h), f -= 1);\n        var b = null,\n            v = null,\n            m = [],\n            y = [];\n\n        if (r.globals.seriesXvalues.forEach(function (t) {\n          m.push([t[0] + 1e-6].concat(t));\n        }), r.globals.seriesYvalues.forEach(function (t) {\n          y.push([t[0] + 1e-6].concat(t));\n        }), m = m.map(function (t) {\n          return t.filter(function (t) {\n            return x.isNumber(t);\n          });\n        }), y = y.map(function (t) {\n          return t.filter(function (t) {\n            return x.isNumber(t);\n          });\n        }), r.globals.isXNumeric) {\n          var w = this.ttCtx.getElGrid().getBoundingClientRect(),\n              k = g * (w.width / n),\n              A = u * (w.height / l);\n          b = (v = this.closestInMultiArray(k, A, m, y)).index, f = v.j, null !== b && (m = r.globals.seriesXvalues[b], f = (v = this.closestInArray(k, m)).index);\n        }\n\n        return r.globals.capturedSeriesIndex = null === b ? -1 : b, (!f || f < 1) && (f = 0), r.globals.isBarHorizontal ? r.globals.capturedDataPointIndex = p : r.globals.capturedDataPointIndex = f, {\n          capturedSeries: b,\n          j: r.globals.isBarHorizontal ? p : f,\n          hoverX: g,\n          hoverY: u\n        };\n      }\n    }, {\n      key: \"closestInMultiArray\",\n      value: function value(t, e, i, a) {\n        var s = this.w,\n            r = 0,\n            o = null,\n            n = -1;\n        s.globals.series.length > 1 ? r = this.getFirstActiveXArray(i) : o = 0;\n        var l = i[r][0],\n            h = Math.abs(t - l);\n\n        if (i.forEach(function (e) {\n          e.forEach(function (e, i) {\n            var a = Math.abs(t - e);\n            a < h && (h = a, n = i);\n          });\n        }), -1 !== n) {\n          var c = a[r][n],\n              d = Math.abs(e - c);\n          o = r, a.forEach(function (t, i) {\n            var a = Math.abs(e - t[n]);\n            a < d && (d = a, o = i);\n          });\n        }\n\n        return {\n          index: o,\n          j: n\n        };\n      }\n    }, {\n      key: \"getFirstActiveXArray\",\n      value: function value(t) {\n        for (var e = this.w, i = 0, a = t.map(function (t, e) {\n          return t.length > 0 ? e : -1;\n        }), s = 0; s < a.length; s++) {\n          if (-1 !== a[s] && -1 === e.globals.collapsedSeriesIndices.indexOf(s) && -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(s)) {\n            i = a[s];\n            break;\n          }\n        }\n\n        return i;\n      }\n    }, {\n      key: \"closestInArray\",\n      value: function value(t, e) {\n        for (var i = e[0], a = null, s = Math.abs(t - i), r = 0; r < e.length; r++) {\n          var o = Math.abs(t - e[r]);\n          o < s && (s = o, a = r);\n        }\n\n        return {\n          index: a\n        };\n      }\n    }, {\n      key: \"isXoverlap\",\n      value: function value(t) {\n        var e = [],\n            i = this.w.globals.seriesX.filter(function (t) {\n          return void 0 !== t[0];\n        });\n        if (i.length > 0) for (var a = 0; a < i.length - 1; a++) {\n          void 0 !== i[a][t] && void 0 !== i[a + 1][t] && i[a][t] !== i[a + 1][t] && e.push(\"unEqual\");\n        }\n        return 0 === e.length;\n      }\n    }, {\n      key: \"isInitialSeriesSameLen\",\n      value: function value() {\n        for (var t = !0, e = this.w.globals.initialSeries, i = 0; i < e.length - 1; i++) {\n          if (e[i].data.length !== e[i + 1].data.length) {\n            t = !1;\n            break;\n          }\n        }\n\n        return t;\n      }\n    }, {\n      key: \"getBarsHeight\",\n      value: function value(t) {\n        return u(t).reduce(function (t, e) {\n          return t + e.getBBox().height;\n        }, 0);\n      }\n    }, {\n      key: \"getElMarkers\",\n      value: function value() {\n        return this.w.globals.dom.baseEl.querySelectorAll(\" .apexcharts-series-markers\");\n      }\n    }, {\n      key: \"getAllMarkers\",\n      value: function value() {\n        var t = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers-wrap\");\n        (t = u(t)).sort(function (t, e) {\n          var i = Number(t.getAttribute(\"data:realIndex\")),\n              a = Number(e.getAttribute(\"data:realIndex\"));\n          return a < i ? 1 : a > i ? -1 : 0;\n        });\n        var e = [];\n        return t.forEach(function (t) {\n          e.push(t.querySelector(\".apexcharts-marker\"));\n        }), e;\n      }\n    }, {\n      key: \"hasMarkers\",\n      value: function value() {\n        return this.getElMarkers().length > 0;\n      }\n    }, {\n      key: \"getElBars\",\n      value: function value() {\n        return this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series\");\n      }\n    }, {\n      key: \"hasBars\",\n      value: function value() {\n        return this.getElBars().length > 0;\n      }\n    }, {\n      key: \"getHoverMarkerSize\",\n      value: function value(t) {\n        var e = this.w,\n            i = e.config.markers.hover.size;\n        return void 0 === i && (i = e.globals.markers.size[t] + e.config.markers.hover.sizeOffset), i;\n      }\n    }, {\n      key: \"toggleAllTooltipSeriesGroups\",\n      value: function value(t) {\n        var e = this.w,\n            i = this.ttCtx;\n        0 === i.allTooltipSeriesGroups.length && (i.allTooltipSeriesGroups = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-tooltip-series-group\"));\n\n        for (var a = i.allTooltipSeriesGroups, s = 0; s < a.length; s++) {\n          \"enable\" === t ? (a[s].classList.add(\"apexcharts-active\"), a[s].style.display = e.config.tooltip.items.display) : (a[s].classList.remove(\"apexcharts-active\"), a[s].style.display = \"none\");\n        }\n      }\n    }]), t;\n  }(),\n      ft = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.ctx = e.ctx, this.ttCtx = e, this.tooltipUtil = new ut(e);\n    }\n\n    return r(t, [{\n      key: \"drawSeriesTexts\",\n      value: function value(t) {\n        var e = t.shared,\n            i = void 0 === e || e,\n            a = t.ttItems,\n            s = t.i,\n            r = void 0 === s ? 0 : s,\n            o = t.j,\n            n = void 0 === o ? null : o,\n            l = t.y1,\n            h = t.y2,\n            c = t.e,\n            d = this.w;\n        void 0 !== d.config.tooltip.custom ? this.handleCustomTooltip({\n          i: r,\n          j: n,\n          y1: l,\n          y2: h,\n          w: d\n        }) : this.toggleActiveInactiveSeries(i);\n        var g = this.getValuesToPrint({\n          i: r,\n          j: n\n        });\n        this.printLabels({\n          i: r,\n          j: n,\n          values: g,\n          ttItems: a,\n          shared: i,\n          e: c\n        });\n        var u = this.ttCtx.getElTooltip();\n        this.ttCtx.tooltipRect.ttWidth = u.getBoundingClientRect().width, this.ttCtx.tooltipRect.ttHeight = u.getBoundingClientRect().height;\n      }\n    }, {\n      key: \"printLabels\",\n      value: function value(t) {\n        var i,\n            a = this,\n            s = t.i,\n            r = t.j,\n            o = t.values,\n            n = t.ttItems,\n            l = t.shared,\n            h = t.e,\n            c = this.w,\n            d = [],\n            g = function g(t) {\n          return c.globals.seriesGoals[t] && c.globals.seriesGoals[t][r] && Array.isArray(c.globals.seriesGoals[t][r]);\n        },\n            u = o.xVal,\n            f = o.zVal,\n            p = o.xAxisTTVal,\n            x = \"\",\n            b = c.globals.colors[s];\n\n        null !== r && c.config.plotOptions.bar.distributed && (b = c.globals.colors[r]);\n\n        for (var v = function v(t, o) {\n          var v = a.getFormatters(s);\n          x = a.getSeriesName({\n            fn: v.yLbTitleFormatter,\n            index: s,\n            seriesIndex: s,\n            j: r\n          }), \"treemap\" === c.config.chart.type && (x = v.yLbTitleFormatter(String(c.config.series[s].data[r].x), {\n            series: c.globals.series,\n            seriesIndex: s,\n            dataPointIndex: r,\n            w: c\n          }));\n          var m = c.config.tooltip.inverseOrder ? o : t;\n\n          if (c.globals.axisCharts) {\n            var y = function y(t) {\n              return v.yLbFormatter(c.globals.series[t][r], {\n                series: c.globals.series,\n                seriesIndex: t,\n                dataPointIndex: r,\n                w: c\n              });\n            };\n\n            if (l) v = a.getFormatters(m), x = a.getSeriesName({\n              fn: v.yLbTitleFormatter,\n              index: m,\n              seriesIndex: s,\n              j: r\n            }), b = c.globals.colors[m], i = y(m), g(m) && (d = c.globals.seriesGoals[m][r].map(function (t) {\n              return {\n                attrs: t,\n                val: v.yLbFormatter(t.value, {\n                  seriesIndex: m,\n                  dataPointIndex: r,\n                  w: c\n                })\n              };\n            }));else {\n              var w,\n                  k = null == h || null === (w = h.target) || void 0 === w ? void 0 : w.getAttribute(\"fill\");\n              k && (b = -1 !== k.indexOf(\"url\") ? document.querySelector(k.substr(4).slice(0, -1)).childNodes[0].getAttribute(\"stroke\") : k), i = y(s), g(s) && Array.isArray(c.globals.seriesGoals[s][r]) && (d = c.globals.seriesGoals[s][r].map(function (t) {\n                return {\n                  attrs: t,\n                  val: v.yLbFormatter(t.value, {\n                    seriesIndex: s,\n                    dataPointIndex: r,\n                    w: c\n                  })\n                };\n              }));\n            }\n          }\n\n          null === r && (i = v.yLbFormatter(c.globals.series[s], e(e({}, c), {}, {\n            seriesIndex: s,\n            dataPointIndex: s\n          }))), a.DOMHandling({\n            i: s,\n            t: m,\n            j: r,\n            ttItems: n,\n            values: {\n              val: i,\n              goalVals: d,\n              xVal: u,\n              xAxisTTVal: p,\n              zVal: f\n            },\n            seriesName: x,\n            shared: l,\n            pColor: b\n          });\n        }, m = 0, y = c.globals.series.length - 1; m < c.globals.series.length; m++, y--) {\n          v(m, y);\n        }\n      }\n    }, {\n      key: \"getFormatters\",\n      value: function value(t) {\n        var e,\n            i = this.w,\n            a = i.globals.yLabelFormatters[t];\n        return void 0 !== i.globals.ttVal ? Array.isArray(i.globals.ttVal) ? (a = i.globals.ttVal[t] && i.globals.ttVal[t].formatter, e = i.globals.ttVal[t] && i.globals.ttVal[t].title && i.globals.ttVal[t].title.formatter) : (a = i.globals.ttVal.formatter, \"function\" == typeof i.globals.ttVal.title.formatter && (e = i.globals.ttVal.title.formatter)) : e = i.config.tooltip.y.title.formatter, \"function\" != typeof a && (a = i.globals.yLabelFormatters[0] ? i.globals.yLabelFormatters[0] : function (t) {\n          return t;\n        }), \"function\" != typeof e && (e = function e(t) {\n          return t;\n        }), {\n          yLbFormatter: a,\n          yLbTitleFormatter: e\n        };\n      }\n    }, {\n      key: \"getSeriesName\",\n      value: function value(t) {\n        var e = t.fn,\n            i = t.index,\n            a = t.seriesIndex,\n            s = t.j,\n            r = this.w;\n        return e(String(r.globals.seriesNames[i]), {\n          series: r.globals.series,\n          seriesIndex: a,\n          dataPointIndex: s,\n          w: r\n        });\n      }\n    }, {\n      key: \"DOMHandling\",\n      value: function value(t) {\n        t.i;\n        var e = t.t,\n            i = t.j,\n            a = t.ttItems,\n            s = t.values,\n            r = t.seriesName,\n            o = t.shared,\n            n = t.pColor,\n            l = this.w,\n            h = this.ttCtx,\n            c = s.val,\n            d = s.goalVals,\n            g = s.xVal,\n            u = s.xAxisTTVal,\n            f = s.zVal,\n            p = null;\n        p = a[e].children, l.config.tooltip.fillSeriesColor && (a[e].style.backgroundColor = n, p[0].style.display = \"none\"), h.showTooltipTitle && (null === h.tooltipTitle && (h.tooltipTitle = l.globals.dom.baseEl.querySelector(\".apexcharts-tooltip-title\")), h.tooltipTitle.innerHTML = g), h.isXAxisTooltipEnabled && (h.xaxisTooltipText.innerHTML = \"\" !== u ? u : g);\n        var x = a[e].querySelector(\".apexcharts-tooltip-text-y-label\");\n        x && (x.innerHTML = r || \"\");\n        var b = a[e].querySelector(\".apexcharts-tooltip-text-y-value\");\n        b && (b.innerHTML = void 0 !== c ? c : \"\"), p[0] && p[0].classList.contains(\"apexcharts-tooltip-marker\") && (l.config.tooltip.marker.fillColors && Array.isArray(l.config.tooltip.marker.fillColors) && (n = l.config.tooltip.marker.fillColors[e]), p[0].style.backgroundColor = n), l.config.tooltip.marker.show || (p[0].style.display = \"none\");\n        var v = a[e].querySelector(\".apexcharts-tooltip-text-goals-label\"),\n            m = a[e].querySelector(\".apexcharts-tooltip-text-goals-value\");\n\n        if (d.length && l.globals.seriesGoals[e]) {\n          var y = function y() {\n            var t = \"<div >\",\n                e = \"<div>\";\n            d.forEach(function (i, a) {\n              t += ' <div style=\"display: flex\"><span class=\"apexcharts-tooltip-marker\" style=\"background-color: '.concat(i.attrs.strokeColor, '; height: 3px; border-radius: 0; top: 5px;\"></span> ').concat(i.attrs.name, \"</div>\"), e += \"<div>\".concat(i.val, \"</div>\");\n            }), v.innerHTML = t + \"</div>\", m.innerHTML = e + \"</div>\";\n          };\n\n          o ? l.globals.seriesGoals[e][i] && Array.isArray(l.globals.seriesGoals[e][i]) ? y() : (v.innerHTML = \"\", m.innerHTML = \"\") : y();\n        } else v.innerHTML = \"\", m.innerHTML = \"\";\n\n        null !== f && (a[e].querySelector(\".apexcharts-tooltip-text-z-label\").innerHTML = l.config.tooltip.z.title, a[e].querySelector(\".apexcharts-tooltip-text-z-value\").innerHTML = void 0 !== f ? f : \"\");\n        o && p[0] && (null == c || l.globals.ancillaryCollapsedSeriesIndices.indexOf(e) > -1 || l.globals.collapsedSeriesIndices.indexOf(e) > -1 ? p[0].parentNode.style.display = \"none\" : p[0].parentNode.style.display = l.config.tooltip.items.display);\n      }\n    }, {\n      key: \"toggleActiveInactiveSeries\",\n      value: function value(t) {\n        var e = this.w;\n        if (t) this.tooltipUtil.toggleAllTooltipSeriesGroups(\"enable\");else {\n          this.tooltipUtil.toggleAllTooltipSeriesGroups(\"disable\");\n          var i = e.globals.dom.baseEl.querySelector(\".apexcharts-tooltip-series-group\");\n          i && (i.classList.add(\"apexcharts-active\"), i.style.display = e.config.tooltip.items.display);\n        }\n      }\n    }, {\n      key: \"getValuesToPrint\",\n      value: function value(t) {\n        var e = t.i,\n            i = t.j,\n            a = this.w,\n            s = this.ctx.series.filteredSeriesX(),\n            r = \"\",\n            o = \"\",\n            n = null,\n            l = null,\n            h = {\n          series: a.globals.series,\n          seriesIndex: e,\n          dataPointIndex: i,\n          w: a\n        },\n            c = a.globals.ttZFormatter;\n        null === i ? l = a.globals.series[e] : a.globals.isXNumeric && \"treemap\" !== a.config.chart.type ? (r = s[e][i], 0 === s[e].length && (r = s[this.tooltipUtil.getFirstActiveXArray(s)][i])) : r = void 0 !== a.globals.labels[i] ? a.globals.labels[i] : \"\";\n        var d = r;\n        a.globals.isXNumeric && \"datetime\" === a.config.xaxis.type ? r = new V(this.ctx).xLabelFormat(a.globals.ttKeyFormatter, d, d, {\n          i: void 0,\n          dateFormatter: new R(this.ctx).formatDate,\n          w: this.w\n        }) : r = a.globals.isBarHorizontal ? a.globals.yLabelFormatters[0](d, h) : a.globals.xLabelFormatter(d, h);\n        return void 0 !== a.config.tooltip.x.formatter && (r = a.globals.ttKeyFormatter(d, h)), a.globals.seriesZ.length > 0 && a.globals.seriesZ[e].length > 0 && (n = c(a.globals.seriesZ[e][i], a)), o = \"function\" == typeof a.config.xaxis.tooltip.formatter ? a.globals.xaxisTooltipFormatter(d, h) : r, {\n          val: Array.isArray(l) ? l.join(\" \") : l,\n          xVal: Array.isArray(r) ? r.join(\" \") : r,\n          xAxisTTVal: Array.isArray(o) ? o.join(\" \") : o,\n          zVal: n\n        };\n      }\n    }, {\n      key: \"handleCustomTooltip\",\n      value: function value(t) {\n        var e = t.i,\n            i = t.j,\n            a = t.y1,\n            s = t.y2,\n            r = t.w,\n            o = this.ttCtx.getElTooltip(),\n            n = r.config.tooltip.custom;\n        Array.isArray(n) && n[e] && (n = n[e]), o.innerHTML = n({\n          ctx: this.ctx,\n          series: r.globals.series,\n          seriesIndex: e,\n          dataPointIndex: i,\n          y1: a,\n          y2: s,\n          w: r\n        });\n      }\n    }]), t;\n  }(),\n      pt = function () {\n    function t(e) {\n      a(this, t), this.ttCtx = e, this.ctx = e.ctx, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"moveXCrosshairs\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,\n            i = this.ttCtx,\n            a = this.w,\n            s = i.getElXCrosshairs(),\n            r = t - i.xcrosshairsWidth / 2,\n            o = a.globals.labels.slice().length;\n\n        if (null !== e && (r = a.globals.gridWidth / o * e), null === s || a.globals.isBarHorizontal || (s.setAttribute(\"x\", r), s.setAttribute(\"x1\", r), s.setAttribute(\"x2\", r), s.setAttribute(\"y2\", a.globals.gridHeight), s.classList.add(\"apexcharts-active\")), r < 0 && (r = 0), r > a.globals.gridWidth && (r = a.globals.gridWidth), i.isXAxisTooltipEnabled) {\n          var n = r;\n          \"tickWidth\" !== a.config.xaxis.crosshairs.width && \"barWidth\" !== a.config.xaxis.crosshairs.width || (n = r + i.xcrosshairsWidth / 2), this.moveXAxisTooltip(n);\n        }\n      }\n    }, {\n      key: \"moveYCrosshairs\",\n      value: function value(t) {\n        var e = this.ttCtx;\n        null !== e.ycrosshairs && m.setAttrs(e.ycrosshairs, {\n          y1: t,\n          y2: t\n        }), null !== e.ycrosshairsHidden && m.setAttrs(e.ycrosshairsHidden, {\n          y1: t,\n          y2: t\n        });\n      }\n    }, {\n      key: \"moveXAxisTooltip\",\n      value: function value(t) {\n        var e = this.w,\n            i = this.ttCtx;\n\n        if (null !== i.xaxisTooltip && 0 !== i.xcrosshairsWidth) {\n          i.xaxisTooltip.classList.add(\"apexcharts-active\");\n          var a = i.xaxisOffY + e.config.xaxis.tooltip.offsetY + e.globals.translateY + 1 + e.config.xaxis.offsetY;\n\n          if (t -= i.xaxisTooltip.getBoundingClientRect().width / 2, !isNaN(t)) {\n            t += e.globals.translateX;\n            var s;\n            s = new m(this.ctx).getTextRects(i.xaxisTooltipText.innerHTML), i.xaxisTooltipText.style.minWidth = s.width + \"px\", i.xaxisTooltip.style.left = t + \"px\", i.xaxisTooltip.style.top = a + \"px\";\n          }\n        }\n      }\n    }, {\n      key: \"moveYAxisTooltip\",\n      value: function value(t) {\n        var e = this.w,\n            i = this.ttCtx;\n        null === i.yaxisTTEls && (i.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxistooltip\"));\n        var a = parseInt(i.ycrosshairsHidden.getAttribute(\"y1\"), 10),\n            s = e.globals.translateY + a,\n            r = i.yaxisTTEls[t].getBoundingClientRect().height,\n            o = e.globals.translateYAxisX[t] - 2;\n        e.config.yaxis[t].opposite && (o -= 26), s -= r / 2, -1 === e.globals.ignoreYAxisIndexes.indexOf(t) ? (i.yaxisTTEls[t].classList.add(\"apexcharts-active\"), i.yaxisTTEls[t].style.top = s + \"px\", i.yaxisTTEls[t].style.left = o + e.config.yaxis[t].tooltip.offsetX + \"px\") : i.yaxisTTEls[t].classList.remove(\"apexcharts-active\");\n      }\n    }, {\n      key: \"moveTooltip\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n            a = this.w,\n            s = this.ttCtx,\n            r = s.getElTooltip(),\n            o = s.tooltipRect,\n            n = null !== i ? parseFloat(i) : 1,\n            l = parseFloat(t) + n + 5,\n            h = parseFloat(e) + n / 2;\n\n        if (l > a.globals.gridWidth / 2 && (l = l - o.ttWidth - n - 10), l > a.globals.gridWidth - o.ttWidth - 10 && (l = a.globals.gridWidth - o.ttWidth), l < -20 && (l = -20), a.config.tooltip.followCursor) {\n          var c = s.getElGrid(),\n              d = c.getBoundingClientRect();\n          h = s.e.clientY + a.globals.translateY - d.top - o.ttHeight / 2;\n        } else a.globals.isBarHorizontal || (o.ttHeight / 2 + h > a.globals.gridHeight && (h = a.globals.gridHeight - o.ttHeight + a.globals.translateY), h < 0 && (h = 0));\n\n        isNaN(l) || (l += a.globals.translateX, r.style.left = l + \"px\", r.style.top = h + \"px\");\n      }\n    }, {\n      key: \"moveMarkers\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = this.ttCtx;\n        if (i.globals.markers.size[t] > 0) for (var s = i.globals.dom.baseEl.querySelectorAll(\" .apexcharts-series[data\\\\:realIndex='\".concat(t, \"'] .apexcharts-marker\")), r = 0; r < s.length; r++) {\n          parseInt(s[r].getAttribute(\"rel\"), 10) === e && (a.marker.resetPointsSize(), a.marker.enlargeCurrentPoint(e, s[r]));\n        } else a.marker.resetPointsSize(), this.moveDynamicPointOnHover(e, t);\n      }\n    }, {\n      key: \"moveDynamicPointOnHover\",\n      value: function value(t, e) {\n        var i,\n            a,\n            s = this.w,\n            r = this.ttCtx,\n            o = s.globals.pointsArray,\n            n = r.tooltipUtil.getHoverMarkerSize(e),\n            l = s.config.series[e].type;\n\n        if (!l || \"column\" !== l && \"candlestick\" !== l && \"boxPlot\" !== l) {\n          i = o[e][t][0], a = o[e][t][1] ? o[e][t][1] : 0;\n          var h = s.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(e, \"'] .apexcharts-series-markers circle\"));\n          h && a < s.globals.gridHeight && a > 0 && (h.setAttribute(\"r\", n), h.setAttribute(\"cx\", i), h.setAttribute(\"cy\", a)), this.moveXCrosshairs(i), r.fixedTooltip || this.moveTooltip(i, a, n);\n        }\n      }\n    }, {\n      key: \"moveDynamicPointsOnHover\",\n      value: function value(t) {\n        var e,\n            i = this.ttCtx,\n            a = i.w,\n            s = 0,\n            r = 0,\n            o = a.globals.pointsArray;\n        e = new E(this.ctx).getActiveConfigSeriesIndex(!0);\n        var n = i.tooltipUtil.getHoverMarkerSize(e);\n        o[e] && (s = o[e][t][0], r = o[e][t][1]);\n        var l = i.tooltipUtil.getAllMarkers();\n        if (null !== l) for (var h = 0; h < a.globals.series.length; h++) {\n          var c = o[h];\n\n          if (a.globals.comboCharts && void 0 === c && l.splice(h, 0, null), c && c.length) {\n            var d = o[h][t][1];\n            l[h].setAttribute(\"cx\", s), null !== d && !isNaN(d) && d < a.globals.gridHeight + n && d + n > 0 ? (l[h] && l[h].setAttribute(\"r\", n), l[h] && l[h].setAttribute(\"cy\", d)) : l[h] && l[h].setAttribute(\"r\", 0);\n          }\n        }\n\n        if (this.moveXCrosshairs(s), !i.fixedTooltip) {\n          var g = r || a.globals.gridHeight;\n          this.moveTooltip(s, g, n);\n        }\n      }\n    }, {\n      key: \"moveStickyTooltipOverBars\",\n      value: function value(t) {\n        var e = this.w,\n            i = this.ttCtx,\n            a = e.globals.columnSeries ? e.globals.columnSeries.length : e.globals.series.length,\n            s = a >= 2 && a % 2 == 0 ? Math.floor(a / 2) : Math.floor(a / 2) + 1;\n        e.globals.isBarHorizontal && (s = new E(this.ctx).getActiveConfigSeriesIndex(!1, \"desc\") + 1);\n        var r = e.globals.dom.baseEl.querySelector(\".apexcharts-bar-series .apexcharts-series[rel='\".concat(s, \"'] path[j='\").concat(t, \"'], .apexcharts-candlestick-series .apexcharts-series[rel='\").concat(s, \"'] path[j='\").concat(t, \"'], .apexcharts-boxPlot-series .apexcharts-series[rel='\").concat(s, \"'] path[j='\").concat(t, \"'], .apexcharts-rangebar-series .apexcharts-series[rel='\").concat(s, \"'] path[j='\").concat(t, \"']\")),\n            o = r ? parseFloat(r.getAttribute(\"cx\")) : 0,\n            n = r ? parseFloat(r.getAttribute(\"cy\")) : 0,\n            l = r ? parseFloat(r.getAttribute(\"barWidth\")) : 0,\n            h = r ? parseFloat(r.getAttribute(\"barHeight\")) : 0,\n            c = i.getElGrid().getBoundingClientRect(),\n            d = r.classList.contains(\"apexcharts-candlestick-area\") || r.classList.contains(\"apexcharts-boxPlot-area\");\n\n        if (e.globals.isXNumeric ? (r && !d && (o -= a % 2 != 0 ? l / 2 : 0), r && d && e.globals.comboCharts && (o -= l / 2)) : e.globals.isBarHorizontal || (o = i.xAxisTicksPositions[t - 1] + i.dataPointsDividedWidth / 2, isNaN(o) && (o = i.xAxisTicksPositions[t] - i.dataPointsDividedWidth / 2)), e.globals.isBarHorizontal ? (n > e.globals.gridHeight / 2 && (n -= i.tooltipRect.ttHeight), (n = n + e.config.grid.padding.top + h / 3) + h > e.globals.gridHeight && (n = e.globals.gridHeight - h)) : e.config.tooltip.followCursor ? n = i.e.clientY - c.top - i.tooltipRect.ttHeight / 2 : n + i.tooltipRect.ttHeight + 15 > e.globals.gridHeight && (n = e.globals.gridHeight), n < -10 && (n = -10), e.globals.isBarHorizontal || this.moveXCrosshairs(o), !i.fixedTooltip) {\n          var g = n || e.globals.gridHeight;\n          this.moveTooltip(o, g);\n        }\n      }\n    }]), t;\n  }(),\n      xt = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.ttCtx = e, this.ctx = e.ctx, this.tooltipPosition = new pt(e);\n    }\n\n    return r(t, [{\n      key: \"drawDynamicPoints\",\n      value: function value() {\n        var t = this.w,\n            e = new m(this.ctx),\n            i = new T(this.ctx),\n            a = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\");\n        a = u(a), t.config.chart.stacked && a.sort(function (t, e) {\n          return parseFloat(t.getAttribute(\"data:realIndex\")) - parseFloat(e.getAttribute(\"data:realIndex\"));\n        });\n\n        for (var s = 0; s < a.length; s++) {\n          var r = a[s].querySelector(\".apexcharts-series-markers-wrap\");\n\n          if (null !== r) {\n            var o = void 0,\n                n = \"apexcharts-marker w\".concat((Math.random() + 1).toString(36).substring(4));\n            \"line\" !== t.config.chart.type && \"area\" !== t.config.chart.type || t.globals.comboCharts || t.config.tooltip.intersect || (n += \" no-pointer-events\");\n            var l = i.getMarkerConfig({\n              cssClass: n,\n              seriesIndex: Number(r.getAttribute(\"data:realIndex\"))\n            });\n            (o = e.drawMarker(0, 0, l)).node.setAttribute(\"default-marker-size\", 0);\n            var h = document.createElementNS(t.globals.SVGNS, \"g\");\n            h.classList.add(\"apexcharts-series-markers\"), h.appendChild(o.node), r.appendChild(h);\n          }\n        }\n      }\n    }, {\n      key: \"enlargeCurrentPoint\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,\n            a = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,\n            s = this.w;\n        \"bubble\" !== s.config.chart.type && this.newPointSize(t, e);\n        var r = e.getAttribute(\"cx\"),\n            o = e.getAttribute(\"cy\");\n\n        if (null !== i && null !== a && (r = i, o = a), this.tooltipPosition.moveXCrosshairs(r), !this.fixedTooltip) {\n          if (\"radar\" === s.config.chart.type) {\n            var n = this.ttCtx.getElGrid(),\n                l = n.getBoundingClientRect();\n            r = this.ttCtx.e.clientX - l.left;\n          }\n\n          this.tooltipPosition.moveTooltip(r, o, s.config.markers.hover.size);\n        }\n      }\n    }, {\n      key: \"enlargePoints\",\n      value: function value(t) {\n        for (var e = this.w, i = this, a = this.ttCtx, s = t, r = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker\"), o = e.config.markers.hover.size, n = 0; n < r.length; n++) {\n          var l = r[n].getAttribute(\"rel\"),\n              h = r[n].getAttribute(\"index\");\n\n          if (void 0 === o && (o = e.globals.markers.size[h] + e.config.markers.hover.sizeOffset), s === parseInt(l, 10)) {\n            i.newPointSize(s, r[n]);\n            var c = r[n].getAttribute(\"cx\"),\n                d = r[n].getAttribute(\"cy\");\n            i.tooltipPosition.moveXCrosshairs(c), a.fixedTooltip || i.tooltipPosition.moveTooltip(c, d, o);\n          } else i.oldPointSize(r[n]);\n        }\n      }\n    }, {\n      key: \"newPointSize\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = i.config.markers.hover.size,\n            s = 0 === t ? e.parentNode.firstChild : e.parentNode.lastChild;\n\n        if (\"0\" !== s.getAttribute(\"default-marker-size\")) {\n          var r = parseInt(s.getAttribute(\"index\"), 10);\n          void 0 === a && (a = i.globals.markers.size[r] + i.config.markers.hover.sizeOffset), a < 0 && (a = 0), s.setAttribute(\"r\", a);\n        }\n      }\n    }, {\n      key: \"oldPointSize\",\n      value: function value(t) {\n        var e = parseFloat(t.getAttribute(\"default-marker-size\"));\n        t.setAttribute(\"r\", e);\n      }\n    }, {\n      key: \"resetPointsSize\",\n      value: function value() {\n        for (var t = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker\"), e = 0; e < t.length; e++) {\n          var i = parseFloat(t[e].getAttribute(\"default-marker-size\"));\n          x.isNumber(i) && i >= 0 ? t[e].setAttribute(\"r\", i) : t[e].setAttribute(\"r\", 0);\n        }\n      }\n    }]), t;\n  }(),\n      bt = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.ttCtx = e;\n    }\n\n    return r(t, [{\n      key: \"getAttr\",\n      value: function value(t, e) {\n        return parseFloat(t.target.getAttribute(e));\n      }\n    }, {\n      key: \"handleHeatTreeTooltip\",\n      value: function value(t) {\n        var e = t.e,\n            i = t.opt,\n            a = t.x,\n            s = t.y,\n            r = t.type,\n            o = this.ttCtx,\n            n = this.w;\n\n        if (e.target.classList.contains(\"apexcharts-\".concat(r, \"-rect\"))) {\n          var l = this.getAttr(e, \"i\"),\n              h = this.getAttr(e, \"j\"),\n              c = this.getAttr(e, \"cx\"),\n              d = this.getAttr(e, \"cy\"),\n              g = this.getAttr(e, \"width\"),\n              u = this.getAttr(e, \"height\");\n\n          if (o.tooltipLabels.drawSeriesTexts({\n            ttItems: i.ttItems,\n            i: l,\n            j: h,\n            shared: !1,\n            e: e\n          }), n.globals.capturedSeriesIndex = l, n.globals.capturedDataPointIndex = h, a = c + o.tooltipRect.ttWidth / 2 + g, s = d + o.tooltipRect.ttHeight / 2 - u / 2, o.tooltipPosition.moveXCrosshairs(c + g / 2), a > n.globals.gridWidth / 2 && (a = c - o.tooltipRect.ttWidth / 2 + g), o.w.config.tooltip.followCursor) {\n            var f = n.globals.dom.elWrap.getBoundingClientRect();\n            a = n.globals.clientX - f.left - (a > n.globals.gridWidth / 2 ? o.tooltipRect.ttWidth : 0), s = n.globals.clientY - f.top - (s > n.globals.gridHeight / 2 ? o.tooltipRect.ttHeight : 0);\n          }\n        }\n\n        return {\n          x: a,\n          y: s\n        };\n      }\n    }, {\n      key: \"handleMarkerTooltip\",\n      value: function value(t) {\n        var e,\n            i,\n            a = t.e,\n            s = t.opt,\n            r = t.x,\n            o = t.y,\n            n = this.w,\n            l = this.ttCtx;\n\n        if (a.target.classList.contains(\"apexcharts-marker\")) {\n          var h = parseInt(s.paths.getAttribute(\"cx\"), 10),\n              c = parseInt(s.paths.getAttribute(\"cy\"), 10),\n              d = parseFloat(s.paths.getAttribute(\"val\"));\n\n          if (i = parseInt(s.paths.getAttribute(\"rel\"), 10), e = parseInt(s.paths.parentNode.parentNode.parentNode.getAttribute(\"rel\"), 10) - 1, l.intersect) {\n            var g = x.findAncestor(s.paths, \"apexcharts-series\");\n            g && (e = parseInt(g.getAttribute(\"data:realIndex\"), 10));\n          }\n\n          if (l.tooltipLabels.drawSeriesTexts({\n            ttItems: s.ttItems,\n            i: e,\n            j: i,\n            shared: !l.showOnIntersect && n.config.tooltip.shared,\n            e: a\n          }), \"mouseup\" === a.type && l.markerClick(a, e, i), n.globals.capturedSeriesIndex = e, n.globals.capturedDataPointIndex = i, r = h, o = c + n.globals.translateY - 1.4 * l.tooltipRect.ttHeight, l.w.config.tooltip.followCursor) {\n            var u = l.getElGrid().getBoundingClientRect();\n            o = l.e.clientY + n.globals.translateY - u.top;\n          }\n\n          d < 0 && (o = c), l.marker.enlargeCurrentPoint(i, s.paths, r, o);\n        }\n\n        return {\n          x: r,\n          y: o\n        };\n      }\n    }, {\n      key: \"handleBarTooltip\",\n      value: function value(t) {\n        var e,\n            i,\n            a = t.e,\n            s = t.opt,\n            r = this.w,\n            o = this.ttCtx,\n            n = o.getElTooltip(),\n            l = 0,\n            h = 0,\n            c = 0,\n            d = this.getBarTooltipXY({\n          e: a,\n          opt: s\n        });\n        e = d.i;\n        var g = d.barHeight,\n            u = d.j;\n        r.globals.capturedSeriesIndex = e, r.globals.capturedDataPointIndex = u, r.globals.isBarHorizontal && o.tooltipUtil.hasBars() || !r.config.tooltip.shared ? (h = d.x, c = d.y, i = Array.isArray(r.config.stroke.width) ? r.config.stroke.width[e] : r.config.stroke.width, l = h) : r.globals.comboCharts || r.config.tooltip.shared || (l /= 2), isNaN(c) ? c = r.globals.svgHeight - o.tooltipRect.ttHeight : c < 0 && (c = 0);\n        var f = parseInt(s.paths.parentNode.getAttribute(\"data:realIndex\"), 10),\n            p = r.globals.isMultipleYAxis ? r.config.yaxis[f] && r.config.yaxis[f].reversed : r.config.yaxis[0].reversed;\n\n        if (h + o.tooltipRect.ttWidth > r.globals.gridWidth && !p ? h -= o.tooltipRect.ttWidth : h < 0 && (h = 0), o.w.config.tooltip.followCursor) {\n          var x = o.getElGrid().getBoundingClientRect();\n          c = o.e.clientY - x.top;\n        }\n\n        null === o.tooltip && (o.tooltip = r.globals.dom.baseEl.querySelector(\".apexcharts-tooltip\")), r.config.tooltip.shared || (r.globals.comboBarCount > 0 ? o.tooltipPosition.moveXCrosshairs(l + i / 2) : o.tooltipPosition.moveXCrosshairs(l)), !o.fixedTooltip && (!r.config.tooltip.shared || r.globals.isBarHorizontal && o.tooltipUtil.hasBars()) && (p && (h -= o.tooltipRect.ttWidth) < 0 && (h = 0), !p || r.globals.isBarHorizontal && o.tooltipUtil.hasBars() || (c = c + g - 2 * (r.globals.series[e][u] < 0 ? g : 0)), o.tooltipRect.ttHeight + c > r.globals.gridHeight ? c = r.globals.gridHeight - o.tooltipRect.ttHeight + r.globals.translateY : (c = c + r.globals.translateY - o.tooltipRect.ttHeight / 2) < 0 && (c = 0), n.style.left = h + r.globals.translateX + \"px\", n.style.top = c + \"px\");\n      }\n    }, {\n      key: \"getBarTooltipXY\",\n      value: function value(t) {\n        var e = t.e,\n            i = t.opt,\n            a = this.w,\n            s = null,\n            r = this.ttCtx,\n            o = 0,\n            n = 0,\n            l = 0,\n            h = 0,\n            c = 0,\n            d = e.target.classList;\n\n        if (d.contains(\"apexcharts-bar-area\") || d.contains(\"apexcharts-candlestick-area\") || d.contains(\"apexcharts-boxPlot-area\") || d.contains(\"apexcharts-rangebar-area\")) {\n          var g = e.target,\n              u = g.getBoundingClientRect(),\n              f = i.elGrid.getBoundingClientRect(),\n              p = u.height;\n          c = u.height;\n          var x = u.width,\n              b = parseInt(g.getAttribute(\"cx\"), 10),\n              v = parseInt(g.getAttribute(\"cy\"), 10);\n          h = parseFloat(g.getAttribute(\"barWidth\"));\n          var m = \"touchmove\" === e.type ? e.touches[0].clientX : e.clientX;\n          s = parseInt(g.getAttribute(\"j\"), 10), o = parseInt(g.parentNode.getAttribute(\"rel\"), 10) - 1;\n          var y = g.getAttribute(\"data-range-y1\"),\n              w = g.getAttribute(\"data-range-y2\");\n          a.globals.comboCharts && (o = parseInt(g.parentNode.getAttribute(\"data:realIndex\"), 10)), r.tooltipLabels.drawSeriesTexts({\n            ttItems: i.ttItems,\n            i: o,\n            j: s,\n            y1: y ? parseInt(y, 10) : null,\n            y2: w ? parseInt(w, 10) : null,\n            shared: !r.showOnIntersect && a.config.tooltip.shared,\n            e: e\n          }), a.config.tooltip.followCursor ? a.globals.isBarHorizontal ? (n = m - f.left + 15, l = v - r.dataPointsDividedHeight + p / 2 - r.tooltipRect.ttHeight / 2) : (n = a.globals.isXNumeric ? b - x / 2 : b - r.dataPointsDividedWidth + x / 2, l = e.clientY - f.top - r.tooltipRect.ttHeight / 2 - 15) : a.globals.isBarHorizontal ? ((n = b) < r.xyRatios.baseLineInvertedY && (n = b - r.tooltipRect.ttWidth), l = v - r.dataPointsDividedHeight + p / 2 - r.tooltipRect.ttHeight / 2) : (n = a.globals.isXNumeric ? b - x / 2 : b - r.dataPointsDividedWidth + x / 2, l = v);\n        }\n\n        return {\n          x: n,\n          y: l,\n          barHeight: c,\n          barWidth: h,\n          i: o,\n          j: s\n        };\n      }\n    }]), t;\n  }(),\n      vt = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.ttCtx = e;\n    }\n\n    return r(t, [{\n      key: \"drawXaxisTooltip\",\n      value: function value() {\n        var t = this.w,\n            e = this.ttCtx,\n            i = \"bottom\" === t.config.xaxis.position;\n        e.xaxisOffY = i ? t.globals.gridHeight + 1 : -t.globals.xAxisHeight - t.config.xaxis.axisTicks.height + 3;\n        var a = i ? \"apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom\" : \"apexcharts-xaxistooltip apexcharts-xaxistooltip-top\",\n            s = t.globals.dom.elWrap;\n        e.isXAxisTooltipEnabled && null === t.globals.dom.baseEl.querySelector(\".apexcharts-xaxistooltip\") && (e.xaxisTooltip = document.createElement(\"div\"), e.xaxisTooltip.setAttribute(\"class\", a + \" apexcharts-theme-\" + t.config.tooltip.theme), s.appendChild(e.xaxisTooltip), e.xaxisTooltipText = document.createElement(\"div\"), e.xaxisTooltipText.classList.add(\"apexcharts-xaxistooltip-text\"), e.xaxisTooltipText.style.fontFamily = t.config.xaxis.tooltip.style.fontFamily || t.config.chart.fontFamily, e.xaxisTooltipText.style.fontSize = t.config.xaxis.tooltip.style.fontSize, e.xaxisTooltip.appendChild(e.xaxisTooltipText));\n      }\n    }, {\n      key: \"drawYaxisTooltip\",\n      value: function value() {\n        for (var t = this.w, e = this.ttCtx, i = function i(_i2) {\n          var a = t.config.yaxis[_i2].opposite || t.config.yaxis[_i2].crosshairs.opposite;\n          e.yaxisOffX = a ? t.globals.gridWidth + 1 : 1;\n          var s = \"apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(_i2, a ? \" apexcharts-yaxistooltip-right\" : \" apexcharts-yaxistooltip-left\");\n          t.globals.yAxisSameScaleIndices.map(function (e, a) {\n            e.map(function (e, a) {\n              a === _i2 && (s += t.config.yaxis[a].show ? \" \" : \" apexcharts-yaxistooltip-hidden\");\n            });\n          });\n          var r = t.globals.dom.elWrap;\n          null === t.globals.dom.baseEl.querySelector(\".apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(_i2)) && (e.yaxisTooltip = document.createElement(\"div\"), e.yaxisTooltip.setAttribute(\"class\", s + \" apexcharts-theme-\" + t.config.tooltip.theme), r.appendChild(e.yaxisTooltip), 0 === _i2 && (e.yaxisTooltipText = []), e.yaxisTooltipText[_i2] = document.createElement(\"div\"), e.yaxisTooltipText[_i2].classList.add(\"apexcharts-yaxistooltip-text\"), e.yaxisTooltip.appendChild(e.yaxisTooltipText[_i2]));\n        }, a = 0; a < t.config.yaxis.length; a++) {\n          i(a);\n        }\n      }\n    }, {\n      key: \"setXCrosshairWidth\",\n      value: function value() {\n        var t = this.w,\n            e = this.ttCtx,\n            i = e.getElXCrosshairs();\n\n        if (e.xcrosshairsWidth = parseInt(t.config.xaxis.crosshairs.width, 10), t.globals.comboCharts) {\n          var a = t.globals.dom.baseEl.querySelector(\".apexcharts-bar-area\");\n\n          if (null !== a && \"barWidth\" === t.config.xaxis.crosshairs.width) {\n            var s = parseFloat(a.getAttribute(\"barWidth\"));\n            e.xcrosshairsWidth = s;\n          } else if (\"tickWidth\" === t.config.xaxis.crosshairs.width) {\n            var r = t.globals.labels.length;\n            e.xcrosshairsWidth = t.globals.gridWidth / r;\n          }\n        } else if (\"tickWidth\" === t.config.xaxis.crosshairs.width) {\n          var o = t.globals.labels.length;\n          e.xcrosshairsWidth = t.globals.gridWidth / o;\n        } else if (\"barWidth\" === t.config.xaxis.crosshairs.width) {\n          var n = t.globals.dom.baseEl.querySelector(\".apexcharts-bar-area\");\n\n          if (null !== n) {\n            var l = parseFloat(n.getAttribute(\"barWidth\"));\n            e.xcrosshairsWidth = l;\n          } else e.xcrosshairsWidth = 1;\n        }\n\n        t.globals.isBarHorizontal && (e.xcrosshairsWidth = 0), null !== i && e.xcrosshairsWidth > 0 && i.setAttribute(\"width\", e.xcrosshairsWidth);\n      }\n    }, {\n      key: \"handleYCrosshair\",\n      value: function value() {\n        var t = this.w,\n            e = this.ttCtx;\n        e.ycrosshairs = t.globals.dom.baseEl.querySelector(\".apexcharts-ycrosshairs\"), e.ycrosshairsHidden = t.globals.dom.baseEl.querySelector(\".apexcharts-ycrosshairs-hidden\");\n      }\n    }, {\n      key: \"drawYaxisTooltipText\",\n      value: function value(t, e, i) {\n        var a = this.ttCtx,\n            s = this.w,\n            r = s.globals.yLabelFormatters[t];\n\n        if (a.yaxisTooltips[t]) {\n          var o = a.getElGrid().getBoundingClientRect(),\n              n = (e - o.top) * i.yRatio[t],\n              l = s.globals.maxYArr[t] - s.globals.minYArr[t],\n              h = s.globals.minYArr[t] + (l - n);\n          a.tooltipPosition.moveYCrosshairs(e - o.top), a.yaxisTooltipText[t].innerHTML = r(h), a.tooltipPosition.moveYAxisTooltip(t);\n        }\n      }\n    }]), t;\n  }(),\n      mt = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n      var i = this.w;\n      this.tConfig = i.config.tooltip, this.tooltipUtil = new ut(this), this.tooltipLabels = new ft(this), this.tooltipPosition = new pt(this), this.marker = new xt(this), this.intersect = new bt(this), this.axesTooltip = new vt(this), this.showOnIntersect = this.tConfig.intersect, this.showTooltipTitle = this.tConfig.x.show, this.fixedTooltip = this.tConfig.fixed.enabled, this.xaxisTooltip = null, this.yaxisTTEls = null, this.isBarShared = !i.globals.isBarHorizontal && this.tConfig.shared, this.lastHoverTime = Date.now();\n    }\n\n    return r(t, [{\n      key: \"getElTooltip\",\n      value: function value(t) {\n        return t || (t = this), t.w.globals.dom.baseEl ? t.w.globals.dom.baseEl.querySelector(\".apexcharts-tooltip\") : null;\n      }\n    }, {\n      key: \"getElXCrosshairs\",\n      value: function value() {\n        return this.w.globals.dom.baseEl.querySelector(\".apexcharts-xcrosshairs\");\n      }\n    }, {\n      key: \"getElGrid\",\n      value: function value() {\n        return this.w.globals.dom.baseEl.querySelector(\".apexcharts-grid\");\n      }\n    }, {\n      key: \"drawTooltip\",\n      value: function value(t) {\n        var e = this.w;\n        this.xyRatios = t, this.isXAxisTooltipEnabled = e.config.xaxis.tooltip.enabled && e.globals.axisCharts, this.yaxisTooltips = e.config.yaxis.map(function (t, i) {\n          return !!(t.show && t.tooltip.enabled && e.globals.axisCharts);\n        }), this.allTooltipSeriesGroups = [], e.globals.axisCharts || (this.showTooltipTitle = !1);\n        var i = document.createElement(\"div\");\n\n        if (i.classList.add(\"apexcharts-tooltip\"), e.config.tooltip.cssClass && i.classList.add(e.config.tooltip.cssClass), i.classList.add(\"apexcharts-theme-\".concat(this.tConfig.theme)), e.globals.dom.elWrap.appendChild(i), e.globals.axisCharts) {\n          this.axesTooltip.drawXaxisTooltip(), this.axesTooltip.drawYaxisTooltip(), this.axesTooltip.setXCrosshairWidth(), this.axesTooltip.handleYCrosshair();\n          var a = new _(this.ctx);\n          this.xAxisTicksPositions = a.getXAxisTicksPositions();\n        }\n\n        if (!e.globals.comboCharts && !this.tConfig.intersect && \"rangeBar\" !== e.config.chart.type || this.tConfig.shared || (this.showOnIntersect = !0), 0 !== e.config.markers.size && 0 !== e.globals.markers.largestSize || this.marker.drawDynamicPoints(this), e.globals.collapsedSeries.length !== e.globals.series.length) {\n          this.dataPointsDividedHeight = e.globals.gridHeight / e.globals.dataPoints, this.dataPointsDividedWidth = e.globals.gridWidth / e.globals.dataPoints, this.showTooltipTitle && (this.tooltipTitle = document.createElement(\"div\"), this.tooltipTitle.classList.add(\"apexcharts-tooltip-title\"), this.tooltipTitle.style.fontFamily = this.tConfig.style.fontFamily || e.config.chart.fontFamily, this.tooltipTitle.style.fontSize = this.tConfig.style.fontSize, i.appendChild(this.tooltipTitle));\n          var s = e.globals.series.length;\n          (e.globals.xyCharts || e.globals.comboCharts) && this.tConfig.shared && (s = this.showOnIntersect ? 1 : e.globals.series.length), this.legendLabels = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-legend-text\"), this.ttItems = this.createTTElements(s), this.addSVGEvents();\n        }\n      }\n    }, {\n      key: \"createTTElements\",\n      value: function value(t) {\n        for (var e = this, i = this.w, a = [], s = this.getElTooltip(), r = function r(_r) {\n          var o = document.createElement(\"div\");\n          o.classList.add(\"apexcharts-tooltip-series-group\"), o.style.order = i.config.tooltip.inverseOrder ? t - _r : _r + 1, e.tConfig.shared && e.tConfig.enabledOnSeries && Array.isArray(e.tConfig.enabledOnSeries) && e.tConfig.enabledOnSeries.indexOf(_r) < 0 && o.classList.add(\"apexcharts-tooltip-series-group-hidden\");\n          var n = document.createElement(\"span\");\n          n.classList.add(\"apexcharts-tooltip-marker\"), n.style.backgroundColor = i.globals.colors[_r], o.appendChild(n);\n          var l = document.createElement(\"div\");\n          l.classList.add(\"apexcharts-tooltip-text\"), l.style.fontFamily = e.tConfig.style.fontFamily || i.config.chart.fontFamily, l.style.fontSize = e.tConfig.style.fontSize, [\"y\", \"goals\", \"z\"].forEach(function (t) {\n            var e = document.createElement(\"div\");\n            e.classList.add(\"apexcharts-tooltip-\".concat(t, \"-group\"));\n            var i = document.createElement(\"span\");\n            i.classList.add(\"apexcharts-tooltip-text-\".concat(t, \"-label\")), e.appendChild(i);\n            var a = document.createElement(\"span\");\n            a.classList.add(\"apexcharts-tooltip-text-\".concat(t, \"-value\")), e.appendChild(a), l.appendChild(e);\n          }), o.appendChild(l), s.appendChild(o), a.push(o);\n        }, o = 0; o < t; o++) {\n          r(o);\n        }\n\n        return a;\n      }\n    }, {\n      key: \"addSVGEvents\",\n      value: function value() {\n        var t = this.w,\n            e = t.config.chart.type,\n            i = this.getElTooltip(),\n            a = !(\"bar\" !== e && \"candlestick\" !== e && \"boxPlot\" !== e && \"rangeBar\" !== e),\n            s = \"area\" === e || \"line\" === e || \"scatter\" === e || \"bubble\" === e || \"radar\" === e,\n            r = t.globals.dom.Paper.node,\n            o = this.getElGrid();\n        o && (this.seriesBound = o.getBoundingClientRect());\n        var n,\n            l = [],\n            h = [],\n            c = {\n          hoverArea: r,\n          elGrid: o,\n          tooltipEl: i,\n          tooltipY: l,\n          tooltipX: h,\n          ttItems: this.ttItems\n        };\n        if (t.globals.axisCharts && (s ? n = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series[data\\\\:longestSeries='true'] .apexcharts-marker\") : a ? n = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area\") : \"heatmap\" !== e && \"treemap\" !== e || (n = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap\")), n && n.length)) for (var d = 0; d < n.length; d++) {\n          l.push(n[d].getAttribute(\"cy\")), h.push(n[d].getAttribute(\"cx\"));\n        }\n        if (t.globals.xyCharts && !this.showOnIntersect || t.globals.comboCharts && !this.showOnIntersect || a && this.tooltipUtil.hasBars() && this.tConfig.shared) this.addPathsEventListeners([r], c);else if (a && !t.globals.comboCharts || s && this.showOnIntersect) this.addDatapointEventsListeners(c);else if (!t.globals.axisCharts || \"heatmap\" === e || \"treemap\" === e) {\n          var g = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\");\n          this.addPathsEventListeners(g, c);\n        }\n\n        if (this.showOnIntersect) {\n          var u = t.globals.dom.baseEl.querySelectorAll(\".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker\");\n          u.length > 0 && this.addPathsEventListeners(u, c), this.tooltipUtil.hasBars() && !this.tConfig.shared && this.addDatapointEventsListeners(c);\n        }\n      }\n    }, {\n      key: \"drawFixedTooltipRect\",\n      value: function value() {\n        var t = this.w,\n            e = this.getElTooltip(),\n            i = e.getBoundingClientRect(),\n            a = i.width + 10,\n            s = i.height + 10,\n            r = this.tConfig.fixed.offsetX,\n            o = this.tConfig.fixed.offsetY,\n            n = this.tConfig.fixed.position.toLowerCase();\n        return n.indexOf(\"right\") > -1 && (r = r + t.globals.svgWidth - a + 10), n.indexOf(\"bottom\") > -1 && (o = o + t.globals.svgHeight - s - 10), e.style.left = r + \"px\", e.style.top = o + \"px\", {\n          x: r,\n          y: o,\n          ttWidth: a,\n          ttHeight: s\n        };\n      }\n    }, {\n      key: \"addDatapointEventsListeners\",\n      value: function value(t) {\n        var e = this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area\");\n        this.addPathsEventListeners(e, t);\n      }\n    }, {\n      key: \"addPathsEventListeners\",\n      value: function value(t, e) {\n        for (var i = this, a = function a(_a) {\n          var s = {\n            paths: t[_a],\n            tooltipEl: e.tooltipEl,\n            tooltipY: e.tooltipY,\n            tooltipX: e.tooltipX,\n            elGrid: e.elGrid,\n            hoverArea: e.hoverArea,\n            ttItems: e.ttItems\n          };\n          [\"mousemove\", \"mouseup\", \"touchmove\", \"mouseout\", \"touchend\"].map(function (e) {\n            return t[_a].addEventListener(e, i.onSeriesHover.bind(i, s), {\n              capture: !1,\n              passive: !0\n            });\n          });\n        }, s = 0; s < t.length; s++) {\n          a(s);\n        }\n      }\n    }, {\n      key: \"onSeriesHover\",\n      value: function value(t, e) {\n        var i = this,\n            a = Date.now() - this.lastHoverTime;\n        a >= 100 ? this.seriesHover(t, e) : (clearTimeout(this.seriesHoverTimeout), this.seriesHoverTimeout = setTimeout(function () {\n          i.seriesHover(t, e);\n        }, 100 - a));\n      }\n    }, {\n      key: \"seriesHover\",\n      value: function value(t, e) {\n        var i = this;\n        this.lastHoverTime = Date.now();\n        var a = [],\n            s = this.w;\n        s.config.chart.group && (a = this.ctx.getGroupedCharts()), s.globals.axisCharts && (s.globals.minX === -1 / 0 && s.globals.maxX === 1 / 0 || 0 === s.globals.dataPoints) || (a.length ? a.forEach(function (a) {\n          var s = i.getElTooltip(a),\n              r = {\n            paths: t.paths,\n            tooltipEl: s,\n            tooltipY: t.tooltipY,\n            tooltipX: t.tooltipX,\n            elGrid: t.elGrid,\n            hoverArea: t.hoverArea,\n            ttItems: a.w.globals.tooltip.ttItems\n          };\n          a.w.globals.minX === i.w.globals.minX && a.w.globals.maxX === i.w.globals.maxX && a.w.globals.tooltip.seriesHoverByContext({\n            chartCtx: a,\n            ttCtx: a.w.globals.tooltip,\n            opt: r,\n            e: e\n          });\n        }) : this.seriesHoverByContext({\n          chartCtx: this.ctx,\n          ttCtx: this.w.globals.tooltip,\n          opt: t,\n          e: e\n        }));\n      }\n    }, {\n      key: \"seriesHoverByContext\",\n      value: function value(t) {\n        var e = t.chartCtx,\n            i = t.ttCtx,\n            a = t.opt,\n            s = t.e,\n            r = e.w,\n            o = this.getElTooltip();\n\n        if (o) {\n          if (i.tooltipRect = {\n            x: 0,\n            y: 0,\n            ttWidth: o.getBoundingClientRect().width,\n            ttHeight: o.getBoundingClientRect().height\n          }, i.e = s, i.tooltipUtil.hasBars() && !r.globals.comboCharts && !i.isBarShared) if (this.tConfig.onDatasetHover.highlightDataSeries) new E(e).toggleSeriesOnHover(s, s.target.parentNode);\n          i.fixedTooltip && i.drawFixedTooltipRect(), r.globals.axisCharts ? i.axisChartsTooltips({\n            e: s,\n            opt: a,\n            tooltipRect: i.tooltipRect\n          }) : i.nonAxisChartsTooltips({\n            e: s,\n            opt: a,\n            tooltipRect: i.tooltipRect\n          });\n        }\n      }\n    }, {\n      key: \"axisChartsTooltips\",\n      value: function value(t) {\n        var e,\n            i,\n            a = t.e,\n            s = t.opt,\n            r = this.w,\n            o = s.elGrid.getBoundingClientRect(),\n            n = \"touchmove\" === a.type ? a.touches[0].clientX : a.clientX,\n            l = \"touchmove\" === a.type ? a.touches[0].clientY : a.clientY;\n        if (this.clientY = l, this.clientX = n, r.globals.capturedSeriesIndex = -1, r.globals.capturedDataPointIndex = -1, l < o.top || l > o.top + o.height) this.handleMouseOut(s);else {\n          if (Array.isArray(this.tConfig.enabledOnSeries) && !r.config.tooltip.shared) {\n            var h = parseInt(s.paths.getAttribute(\"index\"), 10);\n            if (this.tConfig.enabledOnSeries.indexOf(h) < 0) return void this.handleMouseOut(s);\n          }\n\n          var c = this.getElTooltip(),\n              d = this.getElXCrosshairs(),\n              g = r.globals.xyCharts || \"bar\" === r.config.chart.type && !r.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || r.globals.comboCharts && this.tooltipUtil.hasBars();\n\n          if (\"mousemove\" === a.type || \"touchmove\" === a.type || \"mouseup\" === a.type) {\n            if (r.globals.collapsedSeries.length + r.globals.ancillaryCollapsedSeries.length === r.globals.series.length) return;\n            null !== d && d.classList.add(\"apexcharts-active\");\n            var u = this.yaxisTooltips.filter(function (t) {\n              return !0 === t;\n            });\n            if (null !== this.ycrosshairs && u.length && this.ycrosshairs.classList.add(\"apexcharts-active\"), g && !this.showOnIntersect) this.handleStickyTooltip(a, n, l, s);else if (\"heatmap\" === r.config.chart.type || \"treemap\" === r.config.chart.type) {\n              var f = this.intersect.handleHeatTreeTooltip({\n                e: a,\n                opt: s,\n                x: e,\n                y: i,\n                type: r.config.chart.type\n              });\n              e = f.x, i = f.y, c.style.left = e + \"px\", c.style.top = i + \"px\";\n            } else this.tooltipUtil.hasBars() && this.intersect.handleBarTooltip({\n              e: a,\n              opt: s\n            }), this.tooltipUtil.hasMarkers() && this.intersect.handleMarkerTooltip({\n              e: a,\n              opt: s,\n              x: e,\n              y: i\n            });\n            if (this.yaxisTooltips.length) for (var p = 0; p < r.config.yaxis.length; p++) {\n              this.axesTooltip.drawYaxisTooltipText(p, l, this.xyRatios);\n            }\n            s.tooltipEl.classList.add(\"apexcharts-active\");\n          } else \"mouseout\" !== a.type && \"touchend\" !== a.type || this.handleMouseOut(s);\n        }\n      }\n    }, {\n      key: \"nonAxisChartsTooltips\",\n      value: function value(t) {\n        var e = t.e,\n            i = t.opt,\n            a = t.tooltipRect,\n            s = this.w,\n            r = i.paths.getAttribute(\"rel\"),\n            o = this.getElTooltip(),\n            n = s.globals.dom.elWrap.getBoundingClientRect();\n\n        if (\"mousemove\" === e.type || \"touchmove\" === e.type) {\n          o.classList.add(\"apexcharts-active\"), this.tooltipLabels.drawSeriesTexts({\n            ttItems: i.ttItems,\n            i: parseInt(r, 10) - 1,\n            shared: !1\n          });\n          var l = s.globals.clientX - n.left - a.ttWidth / 2,\n              h = s.globals.clientY - n.top - a.ttHeight - 10;\n\n          if (o.style.left = l + \"px\", o.style.top = h + \"px\", s.config.legend.tooltipHoverFormatter) {\n            var c = r - 1,\n                d = (0, s.config.legend.tooltipHoverFormatter)(this.legendLabels[c].getAttribute(\"data:default-text\"), {\n              seriesIndex: c,\n              dataPointIndex: c,\n              w: s\n            });\n            this.legendLabels[c].innerHTML = d;\n          }\n        } else \"mouseout\" !== e.type && \"touchend\" !== e.type || (o.classList.remove(\"apexcharts-active\"), s.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function (t) {\n          var e = t.getAttribute(\"data:default-text\");\n          t.innerHTML = decodeURIComponent(e);\n        }));\n      }\n    }, {\n      key: \"handleStickyTooltip\",\n      value: function value(t, e, i, a) {\n        var s = this.w,\n            r = this.tooltipUtil.getNearestValues({\n          context: this,\n          hoverArea: a.hoverArea,\n          elGrid: a.elGrid,\n          clientX: e,\n          clientY: i\n        }),\n            o = r.j,\n            n = r.capturedSeries,\n            l = a.elGrid.getBoundingClientRect();\n        r.hoverX < 0 || r.hoverX > l.width ? this.handleMouseOut(a) : null !== n ? this.handleStickyCapturedSeries(t, n, a, o) : (this.tooltipUtil.isXoverlap(o) || s.globals.isBarHorizontal) && this.create(t, this, 0, o, a.ttItems);\n      }\n    }, {\n      key: \"handleStickyCapturedSeries\",\n      value: function value(t, e, i, a) {\n        var s = this.w;\n        if (!this.tConfig.shared && null === s.globals.series[e][a]) return void this.handleMouseOut(i);\n        void 0 !== s.globals.series[e][a] ? this.tConfig.shared && this.tooltipUtil.isXoverlap(a) && this.tooltipUtil.isInitialSeriesSameLen() ? this.create(t, this, e, a, i.ttItems) : this.create(t, this, e, a, i.ttItems, !1) : this.tooltipUtil.isXoverlap(a) && this.create(t, this, 0, a, i.ttItems);\n      }\n    }, {\n      key: \"deactivateHoverFilter\",\n      value: function value() {\n        for (var t = this.w, e = new m(this.ctx), i = t.globals.dom.Paper.select(\".apexcharts-bar-area\"), a = 0; a < i.length; a++) {\n          e.pathMouseLeave(i[a]);\n        }\n      }\n    }, {\n      key: \"handleMouseOut\",\n      value: function value(t) {\n        var e = this.w,\n            i = this.getElXCrosshairs();\n\n        if (t.tooltipEl.classList.remove(\"apexcharts-active\"), this.deactivateHoverFilter(), \"bubble\" !== e.config.chart.type && this.marker.resetPointsSize(), null !== i && i.classList.remove(\"apexcharts-active\"), null !== this.ycrosshairs && this.ycrosshairs.classList.remove(\"apexcharts-active\"), this.isXAxisTooltipEnabled && this.xaxisTooltip.classList.remove(\"apexcharts-active\"), this.yaxisTooltips.length) {\n          null === this.yaxisTTEls && (this.yaxisTTEls = e.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxistooltip\"));\n\n          for (var a = 0; a < this.yaxisTTEls.length; a++) {\n            this.yaxisTTEls[a].classList.remove(\"apexcharts-active\");\n          }\n        }\n\n        e.config.legend.tooltipHoverFormatter && this.legendLabels.forEach(function (t) {\n          var e = t.getAttribute(\"data:default-text\");\n          t.innerHTML = decodeURIComponent(e);\n        });\n      }\n    }, {\n      key: \"markerClick\",\n      value: function value(t, e, i) {\n        var a = this.w;\n        \"function\" == typeof a.config.chart.events.markerClick && a.config.chart.events.markerClick(t, this.ctx, {\n          seriesIndex: e,\n          dataPointIndex: i,\n          w: a\n        }), this.ctx.events.fireEvent(\"markerClick\", [t, this.ctx, {\n          seriesIndex: e,\n          dataPointIndex: i,\n          w: a\n        }]);\n      }\n    }, {\n      key: \"create\",\n      value: function value(t, e, i, a, s) {\n        var r = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,\n            o = this.w,\n            n = e;\n        \"mouseup\" === t.type && this.markerClick(t, i, a), null === r && (r = this.tConfig.shared);\n        var l = this.tooltipUtil.hasMarkers(),\n            h = this.tooltipUtil.getElBars();\n\n        if (o.config.legend.tooltipHoverFormatter) {\n          var c = o.config.legend.tooltipHoverFormatter,\n              d = Array.from(this.legendLabels);\n          d.forEach(function (t) {\n            var e = t.getAttribute(\"data:default-text\");\n            t.innerHTML = decodeURIComponent(e);\n          });\n\n          for (var g = 0; g < d.length; g++) {\n            var u = d[g],\n                f = parseInt(u.getAttribute(\"i\"), 10),\n                p = decodeURIComponent(u.getAttribute(\"data:default-text\")),\n                x = c(p, {\n              seriesIndex: r ? f : i,\n              dataPointIndex: a,\n              w: o\n            });\n            if (r) u.innerHTML = o.globals.collapsedSeriesIndices.indexOf(f) < 0 ? x : p;else if (u.innerHTML = f === i ? x : p, i === f) break;\n          }\n        }\n\n        if (r) {\n          if (n.tooltipLabels.drawSeriesTexts({\n            ttItems: s,\n            i: i,\n            j: a,\n            shared: !this.showOnIntersect && this.tConfig.shared\n          }), l && (o.globals.markers.largestSize > 0 ? n.marker.enlargePoints(a) : n.tooltipPosition.moveDynamicPointsOnHover(a)), this.tooltipUtil.hasBars() && (this.barSeriesHeight = this.tooltipUtil.getBarsHeight(h), this.barSeriesHeight > 0)) {\n            var b = new m(this.ctx),\n                v = o.globals.dom.Paper.select(\".apexcharts-bar-area[j='\".concat(a, \"']\"));\n            this.deactivateHoverFilter(), this.tooltipPosition.moveStickyTooltipOverBars(a);\n\n            for (var y = 0; y < v.length; y++) {\n              b.pathMouseEnter(v[y]);\n            }\n          }\n        } else n.tooltipLabels.drawSeriesTexts({\n          shared: !1,\n          ttItems: s,\n          i: i,\n          j: a\n        }), this.tooltipUtil.hasBars() && n.tooltipPosition.moveStickyTooltipOverBars(a), l && n.tooltipPosition.moveMarkers(i, a);\n      }\n    }]), t;\n  }(),\n      yt = function (t) {\n    n(s, t);\n    var i = d(s);\n\n    function s() {\n      return a(this, s), i.apply(this, arguments);\n    }\n\n    return r(s, [{\n      key: \"draw\",\n      value: function value(t, i) {\n        var a = this,\n            s = this.w;\n        this.graphics = new m(this.ctx), this.bar = new F(this.ctx, this.xyRatios);\n        var r = new y(this.ctx, s);\n        t = r.getLogSeries(t), this.yRatio = r.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t), \"100%\" === s.config.chart.stackType && (t = s.globals.seriesPercent.slice()), this.series = t, this.totalItems = 0, this.prevY = [], this.prevX = [], this.prevYF = [], this.prevXF = [], this.prevYVal = [], this.prevXVal = [], this.xArrj = [], this.xArrjF = [], this.xArrjVal = [], this.yArrj = [], this.yArrjF = [], this.yArrjVal = [];\n\n        for (var o = 0; o < t.length; o++) {\n          t[o].length > 0 && (this.totalItems += t[o].length);\n        }\n\n        for (var n = this.graphics.group({\n          \"class\": \"apexcharts-bar-series apexcharts-plot-series\"\n        }), l = 0, h = 0, c = function c(r, o) {\n          var c = void 0,\n              d = void 0,\n              g = void 0,\n              u = void 0,\n              f = [],\n              p = [],\n              b = s.globals.comboCharts ? i[r] : r;\n          a.yRatio.length > 1 && (a.yaxisIndex = b), a.isReversed = s.config.yaxis[a.yaxisIndex] && s.config.yaxis[a.yaxisIndex].reversed;\n          var v = a.graphics.group({\n            \"class\": \"apexcharts-series\",\n            seriesName: x.escapeString(s.globals.seriesNames[b]),\n            rel: r + 1,\n            \"data:realIndex\": b\n          });\n          a.ctx.series.addCollapsedClassToSeries(v, b);\n          var m = a.graphics.group({\n            \"class\": \"apexcharts-datalabels\",\n            \"data:realIndex\": b\n          }),\n              y = 0,\n              w = 0,\n              k = a.initialPositions(l, h, c, d, g, u);\n          h = k.y, y = k.barHeight, d = k.yDivision, u = k.zeroW, l = k.x, w = k.barWidth, c = k.xDivision, g = k.zeroH, a.yArrj = [], a.yArrjF = [], a.yArrjVal = [], a.xArrj = [], a.xArrjF = [], a.xArrjVal = [], 1 === a.prevY.length && a.prevY[0].every(function (t) {\n            return isNaN(t);\n          }) && (a.prevY[0] = a.prevY[0].map(function (t) {\n            return g;\n          }), a.prevYF[0] = a.prevYF[0].map(function (t) {\n            return 0;\n          }));\n\n          for (var A = 0; A < s.globals.dataPoints; A++) {\n            var S = a.barHelpers.getStrokeWidth(r, A, b),\n                C = {\n              indexes: {\n                i: r,\n                j: A,\n                realIndex: b,\n                bc: o\n              },\n              strokeWidth: S,\n              x: l,\n              y: h,\n              elSeries: v\n            },\n                L = null;\n            a.isHorizontal ? (L = a.drawStackedBarPaths(e(e({}, C), {}, {\n              zeroW: u,\n              barHeight: y,\n              yDivision: d\n            })), w = a.series[r][A] / a.invertedYRatio) : (L = a.drawStackedColumnPaths(e(e({}, C), {}, {\n              xDivision: c,\n              barWidth: w,\n              zeroH: g\n            })), y = a.series[r][A] / a.yRatio[a.yaxisIndex]), h = L.y, l = L.x, f.push(l), p.push(h);\n            var P = a.barHelpers.getPathFillColor(t, r, A, b);\n            v = a.renderSeries({\n              realIndex: b,\n              pathFill: P,\n              j: A,\n              i: r,\n              pathFrom: L.pathFrom,\n              pathTo: L.pathTo,\n              strokeWidth: S,\n              elSeries: v,\n              x: l,\n              y: h,\n              series: t,\n              barHeight: y,\n              barWidth: w,\n              elDataLabelsWrap: m,\n              type: \"bar\",\n              visibleSeries: 0\n            });\n          }\n\n          s.globals.seriesXvalues[b] = f, s.globals.seriesYvalues[b] = p, a.prevY.push(a.yArrj), a.prevYF.push(a.yArrjF), a.prevYVal.push(a.yArrjVal), a.prevX.push(a.xArrj), a.prevXF.push(a.xArrjF), a.prevXVal.push(a.xArrjVal), n.add(v);\n        }, d = 0, g = 0; d < t.length; d++, g++) {\n          c(d, g);\n        }\n\n        return n;\n      }\n    }, {\n      key: \"initialPositions\",\n      value: function value(t, e, i, a, s, r) {\n        var o,\n            n,\n            l = this.w;\n        return this.isHorizontal ? (o = (o = a = l.globals.gridHeight / l.globals.dataPoints) * parseInt(l.config.plotOptions.bar.barHeight, 10) / 100, r = this.baseLineInvertedY + l.globals.padHorizontal + (this.isReversed ? l.globals.gridWidth : 0) - (this.isReversed ? 2 * this.baseLineInvertedY : 0), e = (a - o) / 2) : (n = i = l.globals.gridWidth / l.globals.dataPoints, n = l.globals.isXNumeric && l.globals.dataPoints > 1 ? (i = l.globals.minXDiff / this.xRatio) * parseInt(this.barOptions.columnWidth, 10) / 100 : n * parseInt(l.config.plotOptions.bar.columnWidth, 10) / 100, s = this.baseLineY[this.yaxisIndex] + (this.isReversed ? l.globals.gridHeight : 0) - (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), t = l.globals.padHorizontal + (i - n) / 2), {\n          x: t,\n          y: e,\n          yDivision: a,\n          xDivision: i,\n          barHeight: o,\n          barWidth: n,\n          zeroH: s,\n          zeroW: r\n        };\n      }\n    }, {\n      key: \"drawStackedBarPaths\",\n      value: function value(t) {\n        for (var e, i = t.indexes, a = t.barHeight, s = t.strokeWidth, r = t.zeroW, o = t.x, n = t.y, l = t.yDivision, h = t.elSeries, c = this.w, d = n, g = i.i, u = i.j, f = 0, p = 0; p < this.prevXF.length; p++) {\n          f += this.prevXF[p][u];\n        }\n\n        if (g > 0) {\n          var x = r;\n          this.prevXVal[g - 1][u] < 0 ? x = this.series[g][u] >= 0 ? this.prevX[g - 1][u] + f - 2 * (this.isReversed ? f : 0) : this.prevX[g - 1][u] : this.prevXVal[g - 1][u] >= 0 && (x = this.series[g][u] >= 0 ? this.prevX[g - 1][u] : this.prevX[g - 1][u] - f + 2 * (this.isReversed ? f : 0)), e = x;\n        } else e = r;\n\n        o = null === this.series[g][u] ? e : e + this.series[g][u] / this.invertedYRatio - 2 * (this.isReversed ? this.series[g][u] / this.invertedYRatio : 0);\n        var b = this.barHelpers.getBarpaths({\n          barYPosition: d,\n          barHeight: a,\n          x1: e,\n          x2: o,\n          strokeWidth: s,\n          series: this.series,\n          realIndex: i.realIndex,\n          i: g,\n          j: u,\n          w: c\n        });\n        return this.barHelpers.barBackground({\n          j: u,\n          i: g,\n          y1: d,\n          y2: a,\n          elSeries: h\n        }), n += l, {\n          pathTo: b.pathTo,\n          pathFrom: b.pathFrom,\n          x: o,\n          y: n\n        };\n      }\n    }, {\n      key: \"drawStackedColumnPaths\",\n      value: function value(t) {\n        var e = t.indexes,\n            i = t.x,\n            a = t.y,\n            s = t.xDivision,\n            r = t.barWidth,\n            o = t.zeroH;\n        t.strokeWidth;\n        var n = t.elSeries,\n            l = this.w,\n            h = e.i,\n            c = e.j,\n            d = e.bc;\n\n        if (l.globals.isXNumeric) {\n          var g = l.globals.seriesX[h][c];\n          g || (g = 0), i = (g - l.globals.minX) / this.xRatio - r / 2;\n        }\n\n        for (var u, f = i, p = 0, x = 0; x < this.prevYF.length; x++) {\n          p += isNaN(this.prevYF[x][c]) ? 0 : this.prevYF[x][c];\n        }\n\n        if (h > 0 && !l.globals.isXNumeric || h > 0 && l.globals.isXNumeric && l.globals.seriesX[h - 1][c] === l.globals.seriesX[h][c]) {\n          var b,\n              v,\n              m = Math.min(this.yRatio.length + 1, h + 1);\n          if (void 0 !== this.prevY[h - 1]) for (var y = 1; y < m; y++) {\n            if (!isNaN(this.prevY[h - y][c])) {\n              v = this.prevY[h - y][c];\n              break;\n            }\n          }\n\n          for (var w = 1; w < m; w++) {\n            if (this.prevYVal[h - w][c] < 0) {\n              b = this.series[h][c] >= 0 ? v - p + 2 * (this.isReversed ? p : 0) : v;\n              break;\n            }\n\n            if (this.prevYVal[h - w][c] >= 0) {\n              b = this.series[h][c] >= 0 ? v : v + p - 2 * (this.isReversed ? p : 0);\n              break;\n            }\n          }\n\n          void 0 === b && (b = l.globals.gridHeight), u = this.prevYF[0].every(function (t) {\n            return 0 === t;\n          }) && this.prevYF.slice(1, h).every(function (t) {\n            return t.every(function (t) {\n              return isNaN(t);\n            });\n          }) ? l.globals.gridHeight - o : b;\n        } else u = l.globals.gridHeight - o;\n\n        a = u - this.series[h][c] / this.yRatio[this.yaxisIndex] + 2 * (this.isReversed ? this.series[h][c] / this.yRatio[this.yaxisIndex] : 0);\n        var k = this.barHelpers.getColumnPaths({\n          barXPosition: f,\n          barWidth: r,\n          y1: u,\n          y2: a,\n          yRatio: this.yRatio[this.yaxisIndex],\n          strokeWidth: this.strokeWidth,\n          series: this.series,\n          realIndex: e.realIndex,\n          i: h,\n          j: c,\n          w: l\n        });\n        return this.barHelpers.barBackground({\n          bc: d,\n          j: c,\n          i: h,\n          x1: f,\n          x2: r,\n          elSeries: n\n        }), i += s, {\n          pathTo: k.pathTo,\n          pathFrom: k.pathFrom,\n          x: l.globals.isXNumeric ? i - s : i,\n          y: a\n        };\n      }\n    }]), s;\n  }(F),\n      wt = function (t) {\n    n(s, t);\n    var i = d(s);\n\n    function s() {\n      return a(this, s), i.apply(this, arguments);\n    }\n\n    return r(s, [{\n      key: \"draw\",\n      value: function value(t, i) {\n        var a = this,\n            s = this.w,\n            r = new m(this.ctx),\n            o = new M(this.ctx);\n        this.candlestickOptions = this.w.config.plotOptions.candlestick, this.boxOptions = this.w.config.plotOptions.boxPlot, this.isHorizontal = s.config.plotOptions.bar.horizontal;\n        var n = new y(this.ctx, s);\n        t = n.getLogSeries(t), this.series = t, this.yRatio = n.getLogYRatios(this.yRatio), this.barHelpers.initVariables(t);\n\n        for (var l = r.group({\n          \"class\": \"apexcharts-\".concat(s.config.chart.type, \"-series apexcharts-plot-series\")\n        }), h = function h(n) {\n          a.isBoxPlot = \"boxPlot\" === s.config.chart.type || \"boxPlot\" === s.config.series[n].type;\n          var h,\n              c,\n              d,\n              g,\n              u = void 0,\n              f = void 0,\n              p = [],\n              b = [],\n              v = s.globals.comboCharts ? i[n] : n,\n              m = r.group({\n            \"class\": \"apexcharts-series\",\n            seriesName: x.escapeString(s.globals.seriesNames[v]),\n            rel: n + 1,\n            \"data:realIndex\": v\n          });\n          a.ctx.series.addCollapsedClassToSeries(m, v), t[n].length > 0 && (a.visibleI = a.visibleI + 1);\n          var y, w;\n          a.yRatio.length > 1 && (a.yaxisIndex = v);\n          var k = a.barHelpers.initialPositions();\n          f = k.y, y = k.barHeight, c = k.yDivision, g = k.zeroW, u = k.x, w = k.barWidth, h = k.xDivision, d = k.zeroH, b.push(u + w / 2);\n\n          for (var A = r.group({\n            \"class\": \"apexcharts-datalabels\",\n            \"data:realIndex\": v\n          }), S = function S(i) {\n            var r = a.barHelpers.getStrokeWidth(n, i, v),\n                l = null,\n                x = {\n              indexes: {\n                i: n,\n                j: i,\n                realIndex: v\n              },\n              x: u,\n              y: f,\n              strokeWidth: r,\n              elSeries: m\n            };\n            l = a.isHorizontal ? a.drawHorizontalBoxPaths(e(e({}, x), {}, {\n              yDivision: c,\n              barHeight: y,\n              zeroW: g\n            })) : a.drawVerticalBoxPaths(e(e({}, x), {}, {\n              xDivision: h,\n              barWidth: w,\n              zeroH: d\n            })), f = l.y, u = l.x, i > 0 && b.push(u + w / 2), p.push(f), l.pathTo.forEach(function (e, h) {\n              var c = !a.isBoxPlot && a.candlestickOptions.wick.useFillColor ? l.color[h] : s.globals.stroke.colors[n],\n                  d = o.fillPath({\n                seriesNumber: v,\n                dataPointIndex: i,\n                color: l.color[h],\n                value: t[n][i]\n              });\n              a.renderSeries({\n                realIndex: v,\n                pathFill: d,\n                lineFill: c,\n                j: i,\n                i: n,\n                pathFrom: l.pathFrom,\n                pathTo: e,\n                strokeWidth: r,\n                elSeries: m,\n                x: u,\n                y: f,\n                series: t,\n                barHeight: y,\n                barWidth: w,\n                elDataLabelsWrap: A,\n                visibleSeries: a.visibleI,\n                type: s.config.chart.type\n              });\n            });\n          }, C = 0; C < s.globals.dataPoints; C++) {\n            S(C);\n          }\n\n          s.globals.seriesXvalues[v] = b, s.globals.seriesYvalues[v] = p, l.add(m);\n        }, c = 0; c < t.length; c++) {\n          h(c);\n        }\n\n        return l;\n      }\n    }, {\n      key: \"drawVerticalBoxPaths\",\n      value: function value(t) {\n        var e = t.indexes,\n            i = t.x;\n        t.y;\n        var a = t.xDivision,\n            s = t.barWidth,\n            r = t.zeroH,\n            o = t.strokeWidth,\n            n = this.w,\n            l = new m(this.ctx),\n            h = e.i,\n            c = e.j,\n            d = !0,\n            g = n.config.plotOptions.candlestick.colors.upward,\n            u = n.config.plotOptions.candlestick.colors.downward,\n            f = \"\";\n        this.isBoxPlot && (f = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);\n        var p = this.yRatio[this.yaxisIndex],\n            x = e.realIndex,\n            b = this.getOHLCValue(x, c),\n            v = r,\n            y = r;\n        b.o > b.c && (d = !1);\n        var w = Math.min(b.o, b.c),\n            k = Math.max(b.o, b.c),\n            A = b.m;\n        n.globals.isXNumeric && (i = (n.globals.seriesX[x][c] - n.globals.minX) / this.xRatio - s / 2);\n        var S = i + s * this.visibleI;\n        void 0 === this.series[h][c] || null === this.series[h][c] ? (w = r, k = r) : (w = r - w / p, k = r - k / p, v = r - b.h / p, y = r - b.l / p, A = r - b.m / p);\n        var C = l.move(S, r),\n            L = l.move(S + s / 2, w);\n        return n.globals.previousPaths.length > 0 && (L = this.getPreviousPath(x, c, !0)), C = this.isBoxPlot ? [l.move(S, w) + l.line(S + s / 2, w) + l.line(S + s / 2, v) + l.line(S + s / 4, v) + l.line(S + s - s / 4, v) + l.line(S + s / 2, v) + l.line(S + s / 2, w) + l.line(S + s, w) + l.line(S + s, A) + l.line(S, A) + l.line(S, w + o / 2), l.move(S, A) + l.line(S + s, A) + l.line(S + s, k) + l.line(S + s / 2, k) + l.line(S + s / 2, y) + l.line(S + s - s / 4, y) + l.line(S + s / 4, y) + l.line(S + s / 2, y) + l.line(S + s / 2, k) + l.line(S, k) + l.line(S, A) + \"z\"] : [l.move(S, k) + l.line(S + s / 2, k) + l.line(S + s / 2, v) + l.line(S + s / 2, k) + l.line(S + s, k) + l.line(S + s, w) + l.line(S + s / 2, w) + l.line(S + s / 2, y) + l.line(S + s / 2, w) + l.line(S, w) + l.line(S, k - o / 2)], L += l.move(S, w), n.globals.isXNumeric || (i += a), {\n          pathTo: C,\n          pathFrom: L,\n          x: i,\n          y: k,\n          barXPosition: S,\n          color: this.isBoxPlot ? f : d ? [g] : [u]\n        };\n      }\n    }, {\n      key: \"drawHorizontalBoxPaths\",\n      value: function value(t) {\n        var e = t.indexes;\n        t.x;\n        var i = t.y,\n            a = t.yDivision,\n            s = t.barHeight,\n            r = t.zeroW,\n            o = t.strokeWidth,\n            n = this.w,\n            l = new m(this.ctx),\n            h = e.i,\n            c = e.j,\n            d = this.boxOptions.colors.lower;\n        this.isBoxPlot && (d = [this.boxOptions.colors.lower, this.boxOptions.colors.upper]);\n        var g = this.invertedYRatio,\n            u = e.realIndex,\n            f = this.getOHLCValue(u, c),\n            p = r,\n            x = r,\n            b = Math.min(f.o, f.c),\n            v = Math.max(f.o, f.c),\n            y = f.m;\n        n.globals.isXNumeric && (i = (n.globals.seriesX[u][c] - n.globals.minX) / this.invertedXRatio - s / 2);\n        var w = i + s * this.visibleI;\n        void 0 === this.series[h][c] || null === this.series[h][c] ? (b = r, v = r) : (b = r + b / g, v = r + v / g, p = r + f.h / g, x = r + f.l / g, y = r + f.m / g);\n        var k = l.move(r, w),\n            A = l.move(b, w + s / 2);\n        return n.globals.previousPaths.length > 0 && (A = this.getPreviousPath(u, c, !0)), k = [l.move(b, w) + l.line(b, w + s / 2) + l.line(p, w + s / 2) + l.line(p, w + s / 2 - s / 4) + l.line(p, w + s / 2 + s / 4) + l.line(p, w + s / 2) + l.line(b, w + s / 2) + l.line(b, w + s) + l.line(y, w + s) + l.line(y, w) + l.line(b + o / 2, w), l.move(y, w) + l.line(y, w + s) + l.line(v, w + s) + l.line(v, w + s / 2) + l.line(x, w + s / 2) + l.line(x, w + s - s / 4) + l.line(x, w + s / 4) + l.line(x, w + s / 2) + l.line(v, w + s / 2) + l.line(v, w) + l.line(y, w) + \"z\"], A += l.move(b, w), n.globals.isXNumeric || (i += a), {\n          pathTo: k,\n          pathFrom: A,\n          x: v,\n          y: i,\n          barYPosition: w,\n          color: d\n        };\n      }\n    }, {\n      key: \"getOHLCValue\",\n      value: function value(t, e) {\n        var i = this.w;\n        return {\n          o: this.isBoxPlot ? i.globals.seriesCandleH[t][e] : i.globals.seriesCandleO[t][e],\n          h: this.isBoxPlot ? i.globals.seriesCandleO[t][e] : i.globals.seriesCandleH[t][e],\n          m: i.globals.seriesCandleM[t][e],\n          l: this.isBoxPlot ? i.globals.seriesCandleC[t][e] : i.globals.seriesCandleL[t][e],\n          c: this.isBoxPlot ? i.globals.seriesCandleL[t][e] : i.globals.seriesCandleC[t][e]\n        };\n      }\n    }]), s;\n  }(F),\n      kt = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"checkColorRange\",\n      value: function value() {\n        var t = this.w,\n            e = !1,\n            i = t.config.plotOptions[t.config.chart.type];\n        return i.colorScale.ranges.length > 0 && i.colorScale.ranges.map(function (t, i) {\n          t.from <= 0 && (e = !0);\n        }), e;\n      }\n    }, {\n      key: \"getShadeColor\",\n      value: function value(t, e, i, a) {\n        var s = this.w,\n            r = 1,\n            o = s.config.plotOptions[t].shadeIntensity,\n            n = this.determineColor(t, e, i);\n        s.globals.hasNegs || a ? r = s.config.plotOptions[t].reverseNegativeShade ? n.percent < 0 ? n.percent / 100 * (1.25 * o) : (1 - n.percent / 100) * (1.25 * o) : n.percent <= 0 ? 1 - (1 + n.percent / 100) * o : (1 - n.percent / 100) * o : (r = 1 - n.percent / 100, \"treemap\" === t && (r = (1 - n.percent / 100) * (1.25 * o)));\n        var l = n.color,\n            h = new x();\n        return s.config.plotOptions[t].enableShades && (l = \"dark\" === this.w.config.theme.mode ? x.hexToRgba(h.shadeColor(-1 * r, n.color), s.config.fill.opacity) : x.hexToRgba(h.shadeColor(r, n.color), s.config.fill.opacity)), {\n          color: l,\n          colorProps: n\n        };\n      }\n    }, {\n      key: \"determineColor\",\n      value: function value(t, e, i) {\n        var a = this.w,\n            s = a.globals.series[e][i],\n            r = a.config.plotOptions[t],\n            o = r.colorScale.inverse ? i : e;\n        r.distributed && \"treemap\" === a.config.chart.type && (o = i);\n        var n = a.globals.colors[o],\n            l = null,\n            h = Math.min.apply(Math, u(a.globals.series[e])),\n            c = Math.max.apply(Math, u(a.globals.series[e]));\n        r.distributed || \"heatmap\" !== t || (h = a.globals.minY, c = a.globals.maxY), void 0 !== r.colorScale.min && (h = r.colorScale.min < a.globals.minY ? r.colorScale.min : a.globals.minY, c = r.colorScale.max > a.globals.maxY ? r.colorScale.max : a.globals.maxY);\n        var d = Math.abs(c) + Math.abs(h),\n            g = 100 * s / (0 === d ? d - 1e-6 : d);\n        r.colorScale.ranges.length > 0 && r.colorScale.ranges.map(function (t, e) {\n          if (s >= t.from && s <= t.to) {\n            n = t.color, l = t.foreColor ? t.foreColor : null, h = t.from, c = t.to;\n            var i = Math.abs(c) + Math.abs(h);\n            g = 100 * s / (0 === i ? i - 1e-6 : i);\n          }\n        });\n        return {\n          color: n,\n          foreColor: l,\n          percent: g\n        };\n      }\n    }, {\n      key: \"calculateDataLabels\",\n      value: function value(t) {\n        var e = t.text,\n            i = t.x,\n            a = t.y,\n            s = t.i,\n            r = t.j,\n            o = t.colorProps,\n            n = t.fontSize,\n            l = this.w.config.dataLabels,\n            h = new m(this.ctx),\n            c = new z(this.ctx),\n            d = null;\n\n        if (l.enabled) {\n          d = h.group({\n            \"class\": \"apexcharts-data-labels\"\n          });\n          var g = l.offsetX,\n              u = l.offsetY,\n              f = i + g,\n              p = a + parseFloat(l.style.fontSize) / 3 + u;\n          c.plotDataLabelsText({\n            x: f,\n            y: p,\n            text: e,\n            i: s,\n            j: r,\n            color: o.foreColor,\n            parent: d,\n            fontSize: n,\n            dataLabelsConfig: l\n          });\n        }\n\n        return d;\n      }\n    }, {\n      key: \"addListeners\",\n      value: function value(t) {\n        var e = new m(this.ctx);\n        t.node.addEventListener(\"mouseenter\", e.pathMouseEnter.bind(this, t)), t.node.addEventListener(\"mouseleave\", e.pathMouseLeave.bind(this, t)), t.node.addEventListener(\"mousedown\", e.pathMouseDown.bind(this, t));\n      }\n    }]), t;\n  }(),\n      At = function () {\n    function t(e, i) {\n      a(this, t), this.ctx = e, this.w = e.w, this.xRatio = i.xRatio, this.yRatio = i.yRatio, this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.helpers = new kt(e), this.rectRadius = this.w.config.plotOptions.heatmap.radius, this.strokeWidth = this.w.config.stroke.show ? this.w.config.stroke.width : 0;\n    }\n\n    return r(t, [{\n      key: \"draw\",\n      value: function value(t) {\n        var e = this.w,\n            i = new m(this.ctx),\n            a = i.group({\n          \"class\": \"apexcharts-heatmap\"\n        });\n        a.attr(\"clip-path\", \"url(#gridRectMask\".concat(e.globals.cuid, \")\"));\n        var s = e.globals.gridWidth / e.globals.dataPoints,\n            r = e.globals.gridHeight / e.globals.series.length,\n            o = 0,\n            n = !1;\n        this.negRange = this.helpers.checkColorRange();\n        var l = t.slice();\n        e.config.yaxis[0].reversed && (n = !0, l.reverse());\n\n        for (var h = n ? 0 : l.length - 1; n ? h < l.length : h >= 0; n ? h++ : h--) {\n          var c = i.group({\n            \"class\": \"apexcharts-series apexcharts-heatmap-series\",\n            seriesName: x.escapeString(e.globals.seriesNames[h]),\n            rel: h + 1,\n            \"data:realIndex\": h\n          });\n\n          if (this.ctx.series.addCollapsedClassToSeries(c, h), e.config.chart.dropShadow.enabled) {\n            var d = e.config.chart.dropShadow;\n            new v(this.ctx).dropShadow(c, d, h);\n          }\n\n          for (var g = 0, u = e.config.plotOptions.heatmap.shadeIntensity, f = 0; f < l[h].length; f++) {\n            var p = this.helpers.getShadeColor(e.config.chart.type, h, f, this.negRange),\n                b = p.color,\n                y = p.colorProps;\n            if (\"image\" === e.config.fill.type) b = new M(this.ctx).fillPath({\n              seriesNumber: h,\n              dataPointIndex: f,\n              opacity: e.globals.hasNegs ? y.percent < 0 ? 1 - (1 + y.percent / 100) : u + y.percent / 100 : y.percent / 100,\n              patternID: x.randomId(),\n              width: e.config.fill.image.width ? e.config.fill.image.width : s,\n              height: e.config.fill.image.height ? e.config.fill.image.height : r\n            });\n            var w = this.rectRadius,\n                k = i.drawRect(g, o, s, r, w);\n\n            if (k.attr({\n              cx: g,\n              cy: o\n            }), k.node.classList.add(\"apexcharts-heatmap-rect\"), c.add(k), k.attr({\n              fill: b,\n              i: h,\n              index: h,\n              j: f,\n              val: l[h][f],\n              \"stroke-width\": this.strokeWidth,\n              stroke: e.config.plotOptions.heatmap.useFillColorAsStroke ? b : e.globals.stroke.colors[0],\n              color: b\n            }), this.helpers.addListeners(k), e.config.chart.animations.enabled && !e.globals.dataChanged) {\n              var A = 1;\n              e.globals.resized || (A = e.config.chart.animations.speed), this.animateHeatMap(k, g, o, s, r, A);\n            }\n\n            if (e.globals.dataChanged) {\n              var S = 1;\n\n              if (this.dynamicAnim.enabled && e.globals.shouldAnimate) {\n                S = this.dynamicAnim.speed;\n                var C = e.globals.previousPaths[h] && e.globals.previousPaths[h][f] && e.globals.previousPaths[h][f].color;\n                C || (C = \"rgba(255, 255, 255, 0)\"), this.animateHeatColor(k, x.isColorHex(C) ? C : x.rgb2hex(C), x.isColorHex(b) ? b : x.rgb2hex(b), S);\n              }\n            }\n\n            var L = (0, e.config.dataLabels.formatter)(e.globals.series[h][f], {\n              value: e.globals.series[h][f],\n              seriesIndex: h,\n              dataPointIndex: f,\n              w: e\n            }),\n                P = this.helpers.calculateDataLabels({\n              text: L,\n              x: g + s / 2,\n              y: o + r / 2,\n              i: h,\n              j: f,\n              colorProps: y,\n              series: l\n            });\n            null !== P && c.add(P), g += s;\n          }\n\n          o += r, a.add(c);\n        }\n\n        var T = e.globals.yAxisScale[0].result.slice();\n        e.config.yaxis[0].reversed ? T.unshift(\"\") : T.push(\"\"), e.globals.yAxisScale[0].result = T;\n        var I = e.globals.gridHeight / e.globals.series.length;\n        return e.config.yaxis[0].labels.offsetY = -I / 2, a;\n      }\n    }, {\n      key: \"animateHeatMap\",\n      value: function value(t, e, i, a, s, r) {\n        var o = new b(this.ctx);\n        o.animateRect(t, {\n          x: e + a / 2,\n          y: i + s / 2,\n          width: 0,\n          height: 0\n        }, {\n          x: e,\n          y: i,\n          width: a,\n          height: s\n        }, r, function () {\n          o.animationCompleted(t);\n        });\n      }\n    }, {\n      key: \"animateHeatColor\",\n      value: function value(t, e, i, a) {\n        t.attr({\n          fill: e\n        }).animate(a).attr({\n          fill: i\n        });\n      }\n    }]), t;\n  }(),\n      St = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"drawYAxisTexts\",\n      value: function value(t, e, i, a) {\n        var s = this.w,\n            r = s.config.yaxis[0],\n            o = s.globals.yLabelFormatters[0];\n        return new m(this.ctx).drawText({\n          x: t + r.labels.offsetX,\n          y: e + r.labels.offsetY,\n          text: o(a, i),\n          textAnchor: \"middle\",\n          fontSize: r.labels.style.fontSize,\n          fontFamily: r.labels.style.fontFamily,\n          foreColor: Array.isArray(r.labels.style.colors) ? r.labels.style.colors[i] : r.labels.style.colors\n        });\n      }\n    }]), t;\n  }(),\n      Ct = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n      var i = this.w;\n      this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animBeginArr = [0], this.animDur = 0, this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels, this.lineColorArr = void 0 !== i.globals.stroke.colors ? i.globals.stroke.colors : i.globals.colors, this.defaultSize = Math.min(i.globals.gridWidth, i.globals.gridHeight), this.centerY = this.defaultSize / 2, this.centerX = i.globals.gridWidth / 2, \"radialBar\" === i.config.chart.type ? this.fullAngle = 360 : this.fullAngle = Math.abs(i.config.plotOptions.pie.endAngle - i.config.plotOptions.pie.startAngle), this.initialAngle = i.config.plotOptions.pie.startAngle % this.fullAngle, i.globals.radialSize = this.defaultSize / 2.05 - i.config.stroke.width - (i.config.chart.sparkline.enabled ? 0 : i.config.chart.dropShadow.blur), this.donutSize = i.globals.radialSize * parseInt(i.config.plotOptions.pie.donut.size, 10) / 100, this.maxY = 0, this.sliceLabels = [], this.sliceSizes = [], this.prevSectorAngleArr = [];\n    }\n\n    return r(t, [{\n      key: \"draw\",\n      value: function value(t) {\n        var e = this,\n            i = this.w,\n            a = new m(this.ctx);\n        if (this.ret = a.group({\n          \"class\": \"apexcharts-pie\"\n        }), i.globals.noData) return this.ret;\n\n        for (var s = 0, r = 0; r < t.length; r++) {\n          s += x.negToZero(t[r]);\n        }\n\n        var o = [],\n            n = a.group();\n        0 === s && (s = 1e-5), t.forEach(function (t) {\n          e.maxY = Math.max(e.maxY, t);\n        }), i.config.yaxis[0].max && (this.maxY = i.config.yaxis[0].max), \"back\" === i.config.grid.position && \"polarArea\" === this.chartType && this.drawPolarElements(this.ret);\n\n        for (var l = 0; l < t.length; l++) {\n          var h = this.fullAngle * x.negToZero(t[l]) / s;\n          o.push(h), \"polarArea\" === this.chartType ? (o[l] = this.fullAngle / t.length, this.sliceSizes.push(i.globals.radialSize * t[l] / this.maxY)) : this.sliceSizes.push(i.globals.radialSize);\n        }\n\n        if (i.globals.dataChanged) {\n          for (var c, d = 0, g = 0; g < i.globals.previousPaths.length; g++) {\n            d += x.negToZero(i.globals.previousPaths[g]);\n          }\n\n          for (var u = 0; u < i.globals.previousPaths.length; u++) {\n            c = this.fullAngle * x.negToZero(i.globals.previousPaths[u]) / d, this.prevSectorAngleArr.push(c);\n          }\n        }\n\n        this.donutSize < 0 && (this.donutSize = 0);\n        var f = i.config.plotOptions.pie.customScale,\n            p = i.globals.gridWidth / 2,\n            b = i.globals.gridHeight / 2,\n            v = p - i.globals.gridWidth / 2 * f,\n            y = b - i.globals.gridHeight / 2 * f;\n\n        if (\"donut\" === this.chartType) {\n          var w = a.drawCircle(this.donutSize);\n          w.attr({\n            cx: this.centerX,\n            cy: this.centerY,\n            fill: i.config.plotOptions.pie.donut.background ? i.config.plotOptions.pie.donut.background : \"transparent\"\n          }), n.add(w);\n        }\n\n        var k = this.drawArcs(o, t);\n\n        if (this.sliceLabels.forEach(function (t) {\n          k.add(t);\n        }), n.attr({\n          transform: \"translate(\".concat(v, \", \").concat(y, \") scale(\").concat(f, \")\")\n        }), n.add(k), this.ret.add(n), this.donutDataLabels.show) {\n          var A = this.renderInnerDataLabels(this.donutDataLabels, {\n            hollowSize: this.donutSize,\n            centerX: this.centerX,\n            centerY: this.centerY,\n            opacity: this.donutDataLabels.show,\n            translateX: v,\n            translateY: y\n          });\n          this.ret.add(A);\n        }\n\n        return \"front\" === i.config.grid.position && \"polarArea\" === this.chartType && this.drawPolarElements(this.ret), this.ret;\n      }\n    }, {\n      key: \"drawArcs\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = new v(this.ctx),\n            s = new m(this.ctx),\n            r = new M(this.ctx),\n            o = s.group({\n          \"class\": \"apexcharts-slices\"\n        }),\n            n = this.initialAngle,\n            l = this.initialAngle,\n            h = this.initialAngle,\n            c = this.initialAngle;\n        this.strokeWidth = i.config.stroke.show ? i.config.stroke.width : 0;\n\n        for (var d = 0; d < t.length; d++) {\n          var g = s.group({\n            \"class\": \"apexcharts-series apexcharts-pie-series\",\n            seriesName: x.escapeString(i.globals.seriesNames[d]),\n            rel: d + 1,\n            \"data:realIndex\": d\n          });\n          o.add(g), l = c, h = (n = h) + t[d], c = l + this.prevSectorAngleArr[d];\n          var u = h < n ? this.fullAngle + h - n : h - n,\n              f = r.fillPath({\n            seriesNumber: d,\n            size: this.sliceSizes[d],\n            value: e[d]\n          }),\n              p = this.getChangedPath(l, c),\n              b = s.drawPath({\n            d: p,\n            stroke: Array.isArray(this.lineColorArr) ? this.lineColorArr[d] : this.lineColorArr,\n            strokeWidth: 0,\n            fill: f,\n            fillOpacity: i.config.fill.opacity,\n            classes: \"apexcharts-pie-area apexcharts-\".concat(this.chartType.toLowerCase(), \"-slice-\").concat(d)\n          });\n\n          if (b.attr({\n            index: 0,\n            j: d\n          }), a.setSelectionFilter(b, 0, d), i.config.chart.dropShadow.enabled) {\n            var y = i.config.chart.dropShadow;\n            a.dropShadow(b, y, d);\n          }\n\n          this.addListeners(b, this.donutDataLabels), m.setAttrs(b.node, {\n            \"data:angle\": u,\n            \"data:startAngle\": n,\n            \"data:strokeWidth\": this.strokeWidth,\n            \"data:value\": e[d]\n          });\n          var w = {\n            x: 0,\n            y: 0\n          };\n          \"pie\" === this.chartType || \"polarArea\" === this.chartType ? w = x.polarToCartesian(this.centerX, this.centerY, i.globals.radialSize / 1.25 + i.config.plotOptions.pie.dataLabels.offset, (n + u / 2) % this.fullAngle) : \"donut\" === this.chartType && (w = x.polarToCartesian(this.centerX, this.centerY, (i.globals.radialSize + this.donutSize) / 2 + i.config.plotOptions.pie.dataLabels.offset, (n + u / 2) % this.fullAngle)), g.add(b);\n          var k = 0;\n\n          if (!this.initialAnim || i.globals.resized || i.globals.dataChanged ? this.animBeginArr.push(0) : (0 === (k = u / this.fullAngle * i.config.chart.animations.speed) && (k = 1), this.animDur = k + this.animDur, this.animBeginArr.push(this.animDur)), this.dynamicAnim && i.globals.dataChanged ? this.animatePaths(b, {\n            size: this.sliceSizes[d],\n            endAngle: h,\n            startAngle: n,\n            prevStartAngle: l,\n            prevEndAngle: c,\n            animateStartingPos: !0,\n            i: d,\n            animBeginArr: this.animBeginArr,\n            shouldSetPrevPaths: !0,\n            dur: i.config.chart.animations.dynamicAnimation.speed\n          }) : this.animatePaths(b, {\n            size: this.sliceSizes[d],\n            endAngle: h,\n            startAngle: n,\n            i: d,\n            totalItems: t.length - 1,\n            animBeginArr: this.animBeginArr,\n            dur: k\n          }), i.config.plotOptions.pie.expandOnClick && \"polarArea\" !== this.chartType && b.click(this.pieClicked.bind(this, d)), void 0 !== i.globals.selectedDataPoints[0] && i.globals.selectedDataPoints[0].indexOf(d) > -1 && this.pieClicked(d), i.config.dataLabels.enabled) {\n            var A = w.x,\n                S = w.y,\n                C = 100 * u / this.fullAngle + \"%\";\n\n            if (0 !== u && i.config.plotOptions.pie.dataLabels.minAngleToShowLabel < t[d]) {\n              var L = i.config.dataLabels.formatter;\n              void 0 !== L && (C = L(i.globals.seriesPercent[d][0], {\n                seriesIndex: d,\n                w: i\n              }));\n              var P = i.globals.dataLabels.style.colors[d],\n                  T = s.group({\n                \"class\": \"apexcharts-datalabels\"\n              }),\n                  I = s.drawText({\n                x: A,\n                y: S,\n                text: C,\n                textAnchor: \"middle\",\n                fontSize: i.config.dataLabels.style.fontSize,\n                fontFamily: i.config.dataLabels.style.fontFamily,\n                fontWeight: i.config.dataLabels.style.fontWeight,\n                foreColor: P\n              });\n\n              if (T.add(I), i.config.dataLabels.dropShadow.enabled) {\n                var z = i.config.dataLabels.dropShadow;\n                a.dropShadow(I, z);\n              }\n\n              I.node.classList.add(\"apexcharts-pie-label\"), i.config.chart.animations.animate && !1 === i.globals.resized && (I.node.classList.add(\"apexcharts-pie-label-delay\"), I.node.style.animationDelay = i.config.chart.animations.speed / 940 + \"s\"), this.sliceLabels.push(T);\n            }\n          }\n        }\n\n        return o;\n      }\n    }, {\n      key: \"addListeners\",\n      value: function value(t, e) {\n        var i = new m(this.ctx);\n        t.node.addEventListener(\"mouseenter\", i.pathMouseEnter.bind(this, t)), t.node.addEventListener(\"mouseleave\", i.pathMouseLeave.bind(this, t)), t.node.addEventListener(\"mouseleave\", this.revertDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener(\"mousedown\", i.pathMouseDown.bind(this, t)), this.donutDataLabels.total.showAlways || (t.node.addEventListener(\"mouseenter\", this.printDataLabelsInner.bind(this, t.node, e)), t.node.addEventListener(\"mousedown\", this.printDataLabelsInner.bind(this, t.node, e)));\n      }\n    }, {\n      key: \"animatePaths\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = e.endAngle < e.startAngle ? this.fullAngle + e.endAngle - e.startAngle : e.endAngle - e.startAngle,\n            s = a,\n            r = e.startAngle,\n            o = e.startAngle;\n        void 0 !== e.prevStartAngle && void 0 !== e.prevEndAngle && (r = e.prevEndAngle, s = e.prevEndAngle < e.prevStartAngle ? this.fullAngle + e.prevEndAngle - e.prevStartAngle : e.prevEndAngle - e.prevStartAngle), e.i === i.config.series.length - 1 && (a + o > this.fullAngle ? e.endAngle = e.endAngle - (a + o) : a + o < this.fullAngle && (e.endAngle = e.endAngle + (this.fullAngle - (a + o)))), a === this.fullAngle && (a = this.fullAngle - .01), this.animateArc(t, r, o, a, s, e);\n      }\n    }, {\n      key: \"animateArc\",\n      value: function value(t, e, i, a, s, r) {\n        var o,\n            n = this,\n            l = this.w,\n            h = new b(this.ctx),\n            c = r.size;\n        (isNaN(e) || isNaN(s)) && (e = i, s = a, r.dur = 0);\n        var d = a,\n            g = i,\n            u = e < i ? this.fullAngle + e - i : e - i;\n        l.globals.dataChanged && r.shouldSetPrevPaths && r.prevEndAngle && (o = n.getPiePath({\n          me: n,\n          startAngle: r.prevStartAngle,\n          angle: r.prevEndAngle < r.prevStartAngle ? this.fullAngle + r.prevEndAngle - r.prevStartAngle : r.prevEndAngle - r.prevStartAngle,\n          size: c\n        }), t.attr({\n          d: o\n        })), 0 !== r.dur ? t.animate(r.dur, l.globals.easing, r.animBeginArr[r.i]).afterAll(function () {\n          \"pie\" !== n.chartType && \"donut\" !== n.chartType && \"polarArea\" !== n.chartType || this.animate(l.config.chart.animations.dynamicAnimation.speed).attr({\n            \"stroke-width\": n.strokeWidth\n          }), r.i === l.config.series.length - 1 && h.animationCompleted(t);\n        }).during(function (l) {\n          d = u + (a - u) * l, r.animateStartingPos && (d = s + (a - s) * l, g = e - s + (i - (e - s)) * l), o = n.getPiePath({\n            me: n,\n            startAngle: g,\n            angle: d,\n            size: c\n          }), t.node.setAttribute(\"data:pathOrig\", o), t.attr({\n            d: o\n          });\n        }) : (o = n.getPiePath({\n          me: n,\n          startAngle: g,\n          angle: a,\n          size: c\n        }), r.isTrack || (l.globals.animationEnded = !0), t.node.setAttribute(\"data:pathOrig\", o), t.attr({\n          d: o,\n          \"stroke-width\": n.strokeWidth\n        }));\n      }\n    }, {\n      key: \"pieClicked\",\n      value: function value(t) {\n        var e,\n            i = this.w,\n            a = this,\n            s = a.sliceSizes[t] + (i.config.plotOptions.pie.expandOnClick ? 4 : 0),\n            r = i.globals.dom.Paper.select(\".apexcharts-\".concat(a.chartType.toLowerCase(), \"-slice-\").concat(t)).members[0];\n\n        if (\"true\" !== r.attr(\"data:pieClicked\")) {\n          var o = i.globals.dom.baseEl.getElementsByClassName(\"apexcharts-pie-area\");\n          Array.prototype.forEach.call(o, function (t) {\n            t.setAttribute(\"data:pieClicked\", \"false\");\n            var e = t.getAttribute(\"data:pathOrig\");\n            t.setAttribute(\"d\", e);\n          }), r.attr(\"data:pieClicked\", \"true\");\n          var n = parseInt(r.attr(\"data:startAngle\"), 10),\n              l = parseInt(r.attr(\"data:angle\"), 10);\n          e = a.getPiePath({\n            me: a,\n            startAngle: n,\n            angle: l,\n            size: s\n          }), 360 !== l && r.plot(e);\n        } else {\n          r.attr({\n            \"data:pieClicked\": \"false\"\n          }), this.revertDataLabelsInner(r.node, this.donutDataLabels);\n          var h = r.attr(\"data:pathOrig\");\n          r.attr({\n            d: h\n          });\n        }\n      }\n    }, {\n      key: \"getChangedPath\",\n      value: function value(t, e) {\n        var i = \"\";\n        return this.dynamicAnim && this.w.globals.dataChanged && (i = this.getPiePath({\n          me: this,\n          startAngle: t,\n          angle: e - t,\n          size: this.size\n        })), i;\n      }\n    }, {\n      key: \"getPiePath\",\n      value: function value(t) {\n        var e = t.me,\n            i = t.startAngle,\n            a = t.angle,\n            s = t.size,\n            r = i,\n            o = Math.PI * (r - 90) / 180,\n            n = a + i;\n        Math.ceil(n) >= this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle && (n = this.fullAngle + this.w.config.plotOptions.pie.startAngle % this.fullAngle - .01), Math.ceil(n) > this.fullAngle && (n -= this.fullAngle);\n        var l = Math.PI * (n - 90) / 180,\n            h = e.centerX + s * Math.cos(o),\n            c = e.centerY + s * Math.sin(o),\n            d = e.centerX + s * Math.cos(l),\n            g = e.centerY + s * Math.sin(l),\n            u = x.polarToCartesian(e.centerX, e.centerY, e.donutSize, n),\n            f = x.polarToCartesian(e.centerX, e.centerY, e.donutSize, r),\n            p = a > 180 ? 1 : 0,\n            b = [\"M\", h, c, \"A\", s, s, 0, p, 1, d, g];\n        return \"donut\" === e.chartType ? [].concat(b, [\"L\", u.x, u.y, \"A\", e.donutSize, e.donutSize, 0, p, 0, f.x, f.y, \"L\", h, c, \"z\"]).join(\" \") : \"pie\" === e.chartType || \"polarArea\" === e.chartType ? [].concat(b, [\"L\", e.centerX, e.centerY, \"L\", h, c]).join(\" \") : [].concat(b).join(\" \");\n      }\n    }, {\n      key: \"drawPolarElements\",\n      value: function value(t) {\n        var e = this.w,\n            i = new q(this.ctx),\n            a = new m(this.ctx),\n            s = new St(this.ctx),\n            r = a.group(),\n            o = a.group(),\n            n = i.niceScale(0, Math.ceil(this.maxY), e.config.yaxis[0].tickAmount, 0, !0),\n            l = n.result.reverse(),\n            h = n.result.length;\n        this.maxY = n.niceMax;\n\n        for (var c = e.globals.radialSize, d = c / (h - 1), g = 0; g < h - 1; g++) {\n          var u = a.drawCircle(c);\n\n          if (u.attr({\n            cx: this.centerX,\n            cy: this.centerY,\n            fill: \"none\",\n            \"stroke-width\": e.config.plotOptions.polarArea.rings.strokeWidth,\n            stroke: e.config.plotOptions.polarArea.rings.strokeColor\n          }), e.config.yaxis[0].show) {\n            var f = s.drawYAxisTexts(this.centerX, this.centerY - c + parseInt(e.config.yaxis[0].labels.style.fontSize, 10) / 2, g, l[g]);\n            o.add(f);\n          }\n\n          r.add(u), c -= d;\n        }\n\n        this.drawSpokes(t), t.add(r), t.add(o);\n      }\n    }, {\n      key: \"renderInnerDataLabels\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = new m(this.ctx),\n            s = a.group({\n          \"class\": \"apexcharts-datalabels-group\",\n          transform: \"translate(\".concat(e.translateX ? e.translateX : 0, \", \").concat(e.translateY ? e.translateY : 0, \") scale(\").concat(i.config.plotOptions.pie.customScale, \")\")\n        }),\n            r = t.total.show;\n        s.node.style.opacity = e.opacity;\n        var o,\n            n,\n            l = e.centerX,\n            h = e.centerY;\n        o = void 0 === t.name.color ? i.globals.colors[0] : t.name.color;\n        var c = t.name.fontSize,\n            d = t.name.fontFamily,\n            g = t.name.fontWeight;\n        n = void 0 === t.value.color ? i.config.chart.foreColor : t.value.color;\n        var u = t.value.formatter,\n            f = \"\",\n            p = \"\";\n\n        if (r ? (o = t.total.color, c = t.total.fontSize, d = t.total.fontFamily, g = t.total.fontWeight, p = t.total.label, f = t.total.formatter(i)) : 1 === i.globals.series.length && (f = u(i.globals.series[0], i), p = i.globals.seriesNames[0]), p && (p = t.name.formatter(p, t.total.show, i)), t.name.show) {\n          var x = a.drawText({\n            x: l,\n            y: h + parseFloat(t.name.offsetY),\n            text: p,\n            textAnchor: \"middle\",\n            foreColor: o,\n            fontSize: c,\n            fontWeight: g,\n            fontFamily: d\n          });\n          x.node.classList.add(\"apexcharts-datalabel-label\"), s.add(x);\n        }\n\n        if (t.value.show) {\n          var b = t.name.show ? parseFloat(t.value.offsetY) + 16 : t.value.offsetY,\n              v = a.drawText({\n            x: l,\n            y: h + b,\n            text: f,\n            textAnchor: \"middle\",\n            foreColor: n,\n            fontWeight: t.value.fontWeight,\n            fontSize: t.value.fontSize,\n            fontFamily: t.value.fontFamily\n          });\n          v.node.classList.add(\"apexcharts-datalabel-value\"), s.add(v);\n        }\n\n        return s;\n      }\n    }, {\n      key: \"printInnerLabels\",\n      value: function value(t, e, i, a) {\n        var s,\n            r = this.w;\n        a ? s = void 0 === t.name.color ? r.globals.colors[parseInt(a.parentNode.getAttribute(\"rel\"), 10) - 1] : t.name.color : r.globals.series.length > 1 && t.total.show && (s = t.total.color);\n        var o = r.globals.dom.baseEl.querySelector(\".apexcharts-datalabel-label\"),\n            n = r.globals.dom.baseEl.querySelector(\".apexcharts-datalabel-value\");\n        i = (0, t.value.formatter)(i, r), a || \"function\" != typeof t.total.formatter || (i = t.total.formatter(r));\n        var l = e === t.total.label;\n        e = t.name.formatter(e, l, r), null !== o && (o.textContent = e), null !== n && (n.textContent = i), null !== o && (o.style.fill = s);\n      }\n    }, {\n      key: \"printDataLabelsInner\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = t.getAttribute(\"data:value\"),\n            s = i.globals.seriesNames[parseInt(t.parentNode.getAttribute(\"rel\"), 10) - 1];\n        i.globals.series.length > 1 && this.printInnerLabels(e, s, a, t);\n        var r = i.globals.dom.baseEl.querySelector(\".apexcharts-datalabels-group\");\n        null !== r && (r.style.opacity = 1);\n      }\n    }, {\n      key: \"drawSpokes\",\n      value: function value(t) {\n        var e = this,\n            i = this.w,\n            a = new m(this.ctx),\n            s = i.config.plotOptions.polarArea.spokes;\n\n        if (0 !== s.strokeWidth) {\n          for (var r = [], o = 360 / i.globals.series.length, n = 0; n < i.globals.series.length; n++) {\n            r.push(x.polarToCartesian(this.centerX, this.centerY, i.globals.radialSize, i.config.plotOptions.pie.startAngle + o * n));\n          }\n\n          r.forEach(function (i, r) {\n            var o = a.drawLine(i.x, i.y, e.centerX, e.centerY, Array.isArray(s.connectorColors) ? s.connectorColors[r] : s.connectorColors);\n            t.add(o);\n          });\n        }\n      }\n    }, {\n      key: \"revertDataLabelsInner\",\n      value: function value(t, e, i) {\n        var a = this,\n            s = this.w,\n            r = s.globals.dom.baseEl.querySelector(\".apexcharts-datalabels-group\"),\n            o = !1,\n            n = s.globals.dom.baseEl.getElementsByClassName(\"apexcharts-pie-area\"),\n            l = function l(t) {\n          var i = t.makeSliceOut,\n              s = t.printLabel;\n          Array.prototype.forEach.call(n, function (t) {\n            \"true\" === t.getAttribute(\"data:pieClicked\") && (i && (o = !0), s && a.printDataLabelsInner(t, e));\n          });\n        };\n\n        if (l({\n          makeSliceOut: !0,\n          printLabel: !1\n        }), e.total.show && s.globals.series.length > 1) o && !e.total.showAlways ? l({\n          makeSliceOut: !1,\n          printLabel: !0\n        }) : this.printInnerLabels(e, e.total.label, e.total.formatter(s));else if (l({\n          makeSliceOut: !1,\n          printLabel: !0\n        }), !o) if (s.globals.selectedDataPoints.length && s.globals.series.length > 1) {\n          if (s.globals.selectedDataPoints[0].length > 0) {\n            var h = s.globals.selectedDataPoints[0],\n                c = s.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(this.chartType.toLowerCase(), \"-slice-\").concat(h));\n            this.printDataLabelsInner(c, e);\n          } else r && s.globals.selectedDataPoints.length && 0 === s.globals.selectedDataPoints[0].length && (r.style.opacity = 0);\n        } else r && s.globals.series.length > 1 && (r.style.opacity = 0);\n      }\n    }]), t;\n  }(),\n      Lt = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w, this.chartType = this.w.config.chart.type, this.initialAnim = this.w.config.chart.animations.enabled, this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled, this.animDur = 0;\n      var i = this.w;\n      this.graphics = new m(this.ctx), this.lineColorArr = void 0 !== i.globals.stroke.colors ? i.globals.stroke.colors : i.globals.colors, this.defaultSize = i.globals.svgHeight < i.globals.svgWidth ? i.globals.gridHeight + 1.5 * i.globals.goldenPadding : i.globals.gridWidth, this.isLog = i.config.yaxis[0].logarithmic, this.coreUtils = new y(this.ctx), this.maxValue = this.isLog ? this.coreUtils.getLogVal(i.globals.maxY, 0) : i.globals.maxY, this.minValue = this.isLog ? this.coreUtils.getLogVal(this.w.globals.minY, 0) : i.globals.minY, this.polygons = i.config.plotOptions.radar.polygons, this.strokeWidth = i.config.stroke.show ? i.config.stroke.width : 0, this.size = this.defaultSize / 2.1 - this.strokeWidth - i.config.chart.dropShadow.blur, i.config.xaxis.labels.show && (this.size = this.size - i.globals.xAxisLabelsWidth / 1.75), void 0 !== i.config.plotOptions.radar.size && (this.size = i.config.plotOptions.radar.size), this.dataRadiusOfPercent = [], this.dataRadius = [], this.angleArr = [], this.yaxisLabelsTextsPos = [];\n    }\n\n    return r(t, [{\n      key: \"draw\",\n      value: function value(t) {\n        var i = this,\n            a = this.w,\n            s = new M(this.ctx),\n            r = [],\n            o = new z(this.ctx);\n        t.length && (this.dataPointsLen = t[a.globals.maxValsInArrayIndex].length), this.disAngle = 2 * Math.PI / this.dataPointsLen;\n        var n = a.globals.gridWidth / 2,\n            l = a.globals.gridHeight / 2,\n            h = n + a.config.plotOptions.radar.offsetX,\n            c = l + a.config.plotOptions.radar.offsetY,\n            d = this.graphics.group({\n          \"class\": \"apexcharts-radar-series apexcharts-plot-series\",\n          transform: \"translate(\".concat(h || 0, \", \").concat(c || 0, \")\")\n        }),\n            g = [],\n            u = null,\n            f = null;\n\n        if (this.yaxisLabels = this.graphics.group({\n          \"class\": \"apexcharts-yaxis\"\n        }), t.forEach(function (t, n) {\n          var l = t.length === a.globals.dataPoints,\n              h = i.graphics.group().attr({\n            \"class\": \"apexcharts-series\",\n            \"data:longestSeries\": l,\n            seriesName: x.escapeString(a.globals.seriesNames[n]),\n            rel: n + 1,\n            \"data:realIndex\": n\n          });\n          i.dataRadiusOfPercent[n] = [], i.dataRadius[n] = [], i.angleArr[n] = [], t.forEach(function (t, e) {\n            var a = Math.abs(i.maxValue - i.minValue);\n            t += Math.abs(i.minValue), i.isLog && (t = i.coreUtils.getLogVal(t, 0)), i.dataRadiusOfPercent[n][e] = t / a, i.dataRadius[n][e] = i.dataRadiusOfPercent[n][e] * i.size, i.angleArr[n][e] = e * i.disAngle;\n          }), g = i.getDataPointsPos(i.dataRadius[n], i.angleArr[n]);\n          var c = i.createPaths(g, {\n            x: 0,\n            y: 0\n          });\n          u = i.graphics.group({\n            \"class\": \"apexcharts-series-markers-wrap apexcharts-element-hidden\"\n          }), f = i.graphics.group({\n            \"class\": \"apexcharts-datalabels\",\n            \"data:realIndex\": n\n          }), a.globals.delayedElements.push({\n            el: u.node,\n            index: n\n          });\n          var d = {\n            i: n,\n            realIndex: n,\n            animationDelay: n,\n            initialSpeed: a.config.chart.animations.speed,\n            dataChangeSpeed: a.config.chart.animations.dynamicAnimation.speed,\n            className: \"apexcharts-radar\",\n            shouldClipToGrid: !1,\n            bindEventsOnPaths: !1,\n            stroke: a.globals.stroke.colors[n],\n            strokeLineCap: a.config.stroke.lineCap\n          },\n              p = null;\n          a.globals.previousPaths.length > 0 && (p = i.getPreviousPath(n));\n\n          for (var b = 0; b < c.linePathsTo.length; b++) {\n            var m = i.graphics.renderPaths(e(e({}, d), {}, {\n              pathFrom: null === p ? c.linePathsFrom[b] : p,\n              pathTo: c.linePathsTo[b],\n              strokeWidth: Array.isArray(i.strokeWidth) ? i.strokeWidth[n] : i.strokeWidth,\n              fill: \"none\",\n              drawShadow: !1\n            }));\n            h.add(m);\n            var y = s.fillPath({\n              seriesNumber: n\n            }),\n                w = i.graphics.renderPaths(e(e({}, d), {}, {\n              pathFrom: null === p ? c.areaPathsFrom[b] : p,\n              pathTo: c.areaPathsTo[b],\n              strokeWidth: 0,\n              fill: y,\n              drawShadow: !1\n            }));\n\n            if (a.config.chart.dropShadow.enabled) {\n              var k = new v(i.ctx),\n                  A = a.config.chart.dropShadow;\n              k.dropShadow(w, Object.assign({}, A, {\n                noUserSpaceOnUse: !0\n              }), n);\n            }\n\n            h.add(w);\n          }\n\n          t.forEach(function (t, s) {\n            var r = new T(i.ctx).getMarkerConfig({\n              cssClass: \"apexcharts-marker\",\n              seriesIndex: n,\n              dataPointIndex: s\n            }),\n                l = i.graphics.drawMarker(g[s].x, g[s].y, r);\n            l.attr(\"rel\", s), l.attr(\"j\", s), l.attr(\"index\", n), l.node.setAttribute(\"default-marker-size\", r.pSize);\n            var c = i.graphics.group({\n              \"class\": \"apexcharts-series-markers\"\n            });\n            c && c.add(l), u.add(c), h.add(u);\n            var d = a.config.dataLabels;\n\n            if (d.enabled) {\n              var p = d.formatter(a.globals.series[n][s], {\n                seriesIndex: n,\n                dataPointIndex: s,\n                w: a\n              });\n              o.plotDataLabelsText({\n                x: g[s].x,\n                y: g[s].y,\n                text: p,\n                textAnchor: \"middle\",\n                i: n,\n                j: n,\n                parent: f,\n                offsetCorrection: !1,\n                dataLabelsConfig: e({}, d)\n              });\n            }\n\n            h.add(f);\n          }), r.push(h);\n        }), this.drawPolygons({\n          parent: d\n        }), a.config.xaxis.labels.show) {\n          var p = this.drawXAxisTexts();\n          d.add(p);\n        }\n\n        return r.forEach(function (t) {\n          d.add(t);\n        }), d.add(this.yaxisLabels), d;\n      }\n    }, {\n      key: \"drawPolygons\",\n      value: function value(t) {\n        for (var e = this, i = this.w, a = t.parent, s = new St(this.ctx), r = i.globals.yAxisScale[0].result.reverse(), o = r.length, n = [], l = this.size / (o - 1), h = 0; h < o; h++) {\n          n[h] = l * h;\n        }\n\n        n.reverse();\n        var c = [],\n            d = [];\n        n.forEach(function (t, i) {\n          var a = x.getPolygonPos(t, e.dataPointsLen),\n              s = \"\";\n          a.forEach(function (t, a) {\n            if (0 === i) {\n              var r = e.graphics.drawLine(t.x, t.y, 0, 0, Array.isArray(e.polygons.connectorColors) ? e.polygons.connectorColors[a] : e.polygons.connectorColors);\n              d.push(r);\n            }\n\n            0 === a && e.yaxisLabelsTextsPos.push({\n              x: t.x,\n              y: t.y\n            }), s += t.x + \",\" + t.y + \" \";\n          }), c.push(s);\n        }), c.forEach(function (t, s) {\n          var r = e.polygons.strokeColors,\n              o = e.polygons.strokeWidth,\n              n = e.graphics.drawPolygon(t, Array.isArray(r) ? r[s] : r, Array.isArray(o) ? o[s] : o, i.globals.radarPolygons.fill.colors[s]);\n          a.add(n);\n        }), d.forEach(function (t) {\n          a.add(t);\n        }), i.config.yaxis[0].show && this.yaxisLabelsTextsPos.forEach(function (t, i) {\n          var a = s.drawYAxisTexts(t.x, t.y, i, r[i]);\n          e.yaxisLabels.add(a);\n        });\n      }\n    }, {\n      key: \"drawXAxisTexts\",\n      value: function value() {\n        var t = this,\n            i = this.w,\n            a = i.config.xaxis.labels,\n            s = this.graphics.group({\n          \"class\": \"apexcharts-xaxis\"\n        }),\n            r = x.getPolygonPos(this.size, this.dataPointsLen);\n        return i.globals.labels.forEach(function (o, n) {\n          var l = i.config.xaxis.labels.formatter,\n              h = new z(t.ctx);\n\n          if (r[n]) {\n            var c = t.getTextPos(r[n], t.size),\n                d = l(o, {\n              seriesIndex: -1,\n              dataPointIndex: n,\n              w: i\n            });\n            h.plotDataLabelsText({\n              x: c.newX,\n              y: c.newY,\n              text: d,\n              textAnchor: c.textAnchor,\n              i: n,\n              j: n,\n              parent: s,\n              color: Array.isArray(a.style.colors) && a.style.colors[n] ? a.style.colors[n] : \"#a8a8a8\",\n              dataLabelsConfig: e({\n                textAnchor: c.textAnchor,\n                dropShadow: {\n                  enabled: !1\n                }\n              }, a),\n              offsetCorrection: !1\n            });\n          }\n        }), s;\n      }\n    }, {\n      key: \"createPaths\",\n      value: function value(t, e) {\n        var i = this,\n            a = [],\n            s = [],\n            r = [],\n            o = [];\n\n        if (t.length) {\n          s = [this.graphics.move(e.x, e.y)], o = [this.graphics.move(e.x, e.y)];\n          var n = this.graphics.move(t[0].x, t[0].y),\n              l = this.graphics.move(t[0].x, t[0].y);\n          t.forEach(function (e, a) {\n            n += i.graphics.line(e.x, e.y), l += i.graphics.line(e.x, e.y), a === t.length - 1 && (n += \"Z\", l += \"Z\");\n          }), a.push(n), r.push(l);\n        }\n\n        return {\n          linePathsFrom: s,\n          linePathsTo: a,\n          areaPathsFrom: o,\n          areaPathsTo: r\n        };\n      }\n    }, {\n      key: \"getTextPos\",\n      value: function value(t, e) {\n        var i = \"middle\",\n            a = t.x,\n            s = t.y;\n        return Math.abs(t.x) >= 10 ? t.x > 0 ? (i = \"start\", a += 10) : t.x < 0 && (i = \"end\", a -= 10) : i = \"middle\", Math.abs(t.y) >= e - 10 && (t.y < 0 ? s -= 10 : t.y > 0 && (s += 10)), {\n          textAnchor: i,\n          newX: a,\n          newY: s\n        };\n      }\n    }, {\n      key: \"getPreviousPath\",\n      value: function value(t) {\n        for (var e = this.w, i = null, a = 0; a < e.globals.previousPaths.length; a++) {\n          var s = e.globals.previousPaths[a];\n          s.paths.length > 0 && parseInt(s.realIndex, 10) === parseInt(t, 10) && void 0 !== e.globals.previousPaths[a].paths[0] && (i = e.globals.previousPaths[a].paths[0].d);\n        }\n\n        return i;\n      }\n    }, {\n      key: \"getDataPointsPos\",\n      value: function value(t, e) {\n        var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : this.dataPointsLen;\n        t = t || [], e = e || [];\n\n        for (var a = [], s = 0; s < i; s++) {\n          var r = {};\n          r.x = t[s] * Math.sin(e[s]), r.y = -t[s] * Math.cos(e[s]), a.push(r);\n        }\n\n        return a;\n      }\n    }]), t;\n  }(),\n      Pt = function (t) {\n    n(i, t);\n    var e = d(i);\n\n    function i(t) {\n      var s;\n      a(this, i), (s = e.call(this, t)).ctx = t, s.w = t.w, s.animBeginArr = [0], s.animDur = 0;\n      var r = s.w;\n      return s.startAngle = r.config.plotOptions.radialBar.startAngle, s.endAngle = r.config.plotOptions.radialBar.endAngle, s.totalAngle = Math.abs(r.config.plotOptions.radialBar.endAngle - r.config.plotOptions.radialBar.startAngle), s.trackStartAngle = r.config.plotOptions.radialBar.track.startAngle, s.trackEndAngle = r.config.plotOptions.radialBar.track.endAngle, s.donutDataLabels = s.w.config.plotOptions.radialBar.dataLabels, s.radialDataLabels = s.donutDataLabels, s.trackStartAngle || (s.trackStartAngle = s.startAngle), s.trackEndAngle || (s.trackEndAngle = s.endAngle), 360 === s.endAngle && (s.endAngle = 359.99), s.margin = parseInt(r.config.plotOptions.radialBar.track.margin, 10), s;\n    }\n\n    return r(i, [{\n      key: \"draw\",\n      value: function value(t) {\n        var e = this.w,\n            i = new m(this.ctx),\n            a = i.group({\n          \"class\": \"apexcharts-radialbar\"\n        });\n        if (e.globals.noData) return a;\n        var s = i.group(),\n            r = this.defaultSize / 2,\n            o = e.globals.gridWidth / 2,\n            n = this.defaultSize / 2.05;\n        e.config.chart.sparkline.enabled || (n = n - e.config.stroke.width - e.config.chart.dropShadow.blur);\n        var l = e.globals.fill.colors;\n\n        if (e.config.plotOptions.radialBar.track.show) {\n          var h = this.drawTracks({\n            size: n,\n            centerX: o,\n            centerY: r,\n            colorArr: l,\n            series: t\n          });\n          s.add(h);\n        }\n\n        var c = this.drawArcs({\n          size: n,\n          centerX: o,\n          centerY: r,\n          colorArr: l,\n          series: t\n        }),\n            d = 360;\n        e.config.plotOptions.radialBar.startAngle < 0 && (d = this.totalAngle);\n        var g = (360 - d) / 360;\n\n        if (e.globals.radialSize = n - n * g, this.radialDataLabels.value.show) {\n          var u = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);\n          e.globals.radialSize += u * g;\n        }\n\n        return s.add(c.g), \"front\" === e.config.plotOptions.radialBar.hollow.position && (c.g.add(c.elHollow), c.dataLabels && c.g.add(c.dataLabels)), a.add(s), a;\n      }\n    }, {\n      key: \"drawTracks\",\n      value: function value(t) {\n        var e = this.w,\n            i = new m(this.ctx),\n            a = i.group({\n          \"class\": \"apexcharts-tracks\"\n        }),\n            s = new v(this.ctx),\n            r = new M(this.ctx),\n            o = this.getStrokeWidth(t);\n        t.size = t.size - o / 2;\n\n        for (var n = 0; n < t.series.length; n++) {\n          var l = i.group({\n            \"class\": \"apexcharts-radialbar-track apexcharts-track\"\n          });\n          a.add(l), l.attr({\n            rel: n + 1\n          }), t.size = t.size - o - this.margin;\n          var h = e.config.plotOptions.radialBar.track,\n              c = r.fillPath({\n            seriesNumber: 0,\n            size: t.size,\n            fillColors: Array.isArray(h.background) ? h.background[n] : h.background,\n            solid: !0\n          }),\n              d = this.trackStartAngle,\n              g = this.trackEndAngle;\n          Math.abs(g) + Math.abs(d) >= 360 && (g = 360 - Math.abs(this.startAngle) - .1);\n          var u = i.drawPath({\n            d: \"\",\n            stroke: c,\n            strokeWidth: o * parseInt(h.strokeWidth, 10) / 100,\n            fill: \"none\",\n            strokeOpacity: h.opacity,\n            classes: \"apexcharts-radialbar-area\"\n          });\n\n          if (h.dropShadow.enabled) {\n            var f = h.dropShadow;\n            s.dropShadow(u, f);\n          }\n\n          l.add(u), u.attr(\"id\", \"apexcharts-radialbarTrack-\" + n), this.animatePaths(u, {\n            centerX: t.centerX,\n            centerY: t.centerY,\n            endAngle: g,\n            startAngle: d,\n            size: t.size,\n            i: n,\n            totalItems: 2,\n            animBeginArr: 0,\n            dur: 0,\n            isTrack: !0,\n            easing: e.globals.easing\n          });\n        }\n\n        return a;\n      }\n    }, {\n      key: \"drawArcs\",\n      value: function value(t) {\n        var e = this.w,\n            i = new m(this.ctx),\n            a = new M(this.ctx),\n            s = new v(this.ctx),\n            r = i.group(),\n            o = this.getStrokeWidth(t);\n        t.size = t.size - o / 2;\n        var n = e.config.plotOptions.radialBar.hollow.background,\n            l = t.size - o * t.series.length - this.margin * t.series.length - o * parseInt(e.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2,\n            h = l - e.config.plotOptions.radialBar.hollow.margin;\n        void 0 !== e.config.plotOptions.radialBar.hollow.image && (n = this.drawHollowImage(t, r, l, n));\n        var c = this.drawHollow({\n          size: h,\n          centerX: t.centerX,\n          centerY: t.centerY,\n          fill: n || \"transparent\"\n        });\n\n        if (e.config.plotOptions.radialBar.hollow.dropShadow.enabled) {\n          var d = e.config.plotOptions.radialBar.hollow.dropShadow;\n          s.dropShadow(c, d);\n        }\n\n        var g = 1;\n        !this.radialDataLabels.total.show && e.globals.series.length > 1 && (g = 0);\n        var u = null;\n        this.radialDataLabels.show && (u = this.renderInnerDataLabels(this.radialDataLabels, {\n          hollowSize: l,\n          centerX: t.centerX,\n          centerY: t.centerY,\n          opacity: g\n        })), \"back\" === e.config.plotOptions.radialBar.hollow.position && (r.add(c), u && r.add(u));\n        var f = !1;\n        e.config.plotOptions.radialBar.inverseOrder && (f = !0);\n\n        for (var p = f ? t.series.length - 1 : 0; f ? p >= 0 : p < t.series.length; f ? p-- : p++) {\n          var b = i.group({\n            \"class\": \"apexcharts-series apexcharts-radial-series\",\n            seriesName: x.escapeString(e.globals.seriesNames[p])\n          });\n          r.add(b), b.attr({\n            rel: p + 1,\n            \"data:realIndex\": p\n          }), this.ctx.series.addCollapsedClassToSeries(b, p), t.size = t.size - o - this.margin;\n          var y = a.fillPath({\n            seriesNumber: p,\n            size: t.size,\n            value: t.series[p]\n          }),\n              w = this.startAngle,\n              k = void 0,\n              A = x.negToZero(t.series[p] > 100 ? 100 : t.series[p]) / 100,\n              S = Math.round(this.totalAngle * A) + this.startAngle,\n              C = void 0;\n          e.globals.dataChanged && (k = this.startAngle, C = Math.round(this.totalAngle * x.negToZero(e.globals.previousPaths[p]) / 100) + k), Math.abs(S) + Math.abs(w) >= 360 && (S -= .01), Math.abs(C) + Math.abs(k) >= 360 && (C -= .01);\n          var L = S - w,\n              P = Array.isArray(e.config.stroke.dashArray) ? e.config.stroke.dashArray[p] : e.config.stroke.dashArray,\n              T = i.drawPath({\n            d: \"\",\n            stroke: y,\n            strokeWidth: o,\n            fill: \"none\",\n            fillOpacity: e.config.fill.opacity,\n            classes: \"apexcharts-radialbar-area apexcharts-radialbar-slice-\" + p,\n            strokeDashArray: P\n          });\n\n          if (m.setAttrs(T.node, {\n            \"data:angle\": L,\n            \"data:value\": t.series[p]\n          }), e.config.chart.dropShadow.enabled) {\n            var I = e.config.chart.dropShadow;\n            s.dropShadow(T, I, p);\n          }\n\n          s.setSelectionFilter(T, 0, p), this.addListeners(T, this.radialDataLabels), b.add(T), T.attr({\n            index: 0,\n            j: p\n          });\n          var z = 0;\n          !this.initialAnim || e.globals.resized || e.globals.dataChanged || (z = e.config.chart.animations.speed), e.globals.dataChanged && (z = e.config.chart.animations.dynamicAnimation.speed), this.animDur = z / (1.2 * t.series.length) + this.animDur, this.animBeginArr.push(this.animDur), this.animatePaths(T, {\n            centerX: t.centerX,\n            centerY: t.centerY,\n            endAngle: S,\n            startAngle: w,\n            prevEndAngle: C,\n            prevStartAngle: k,\n            size: t.size,\n            i: p,\n            totalItems: 2,\n            animBeginArr: this.animBeginArr,\n            dur: z,\n            shouldSetPrevPaths: !0,\n            easing: e.globals.easing\n          });\n        }\n\n        return {\n          g: r,\n          elHollow: c,\n          dataLabels: u\n        };\n      }\n    }, {\n      key: \"drawHollow\",\n      value: function value(t) {\n        var e = new m(this.ctx).drawCircle(2 * t.size);\n        return e.attr({\n          \"class\": \"apexcharts-radialbar-hollow\",\n          cx: t.centerX,\n          cy: t.centerY,\n          r: t.size,\n          fill: t.fill\n        }), e;\n      }\n    }, {\n      key: \"drawHollowImage\",\n      value: function value(t, e, i, a) {\n        var s = this.w,\n            r = new M(this.ctx),\n            o = x.randomId(),\n            n = s.config.plotOptions.radialBar.hollow.image;\n        if (s.config.plotOptions.radialBar.hollow.imageClipped) r.clippedImgArea({\n          width: i,\n          height: i,\n          image: n,\n          patternID: \"pattern\".concat(s.globals.cuid).concat(o)\n        }), a = \"url(#pattern\".concat(s.globals.cuid).concat(o, \")\");else {\n          var l = s.config.plotOptions.radialBar.hollow.imageWidth,\n              h = s.config.plotOptions.radialBar.hollow.imageHeight;\n\n          if (void 0 === l && void 0 === h) {\n            var c = s.globals.dom.Paper.image(n).loaded(function (e) {\n              this.move(t.centerX - e.width / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - e.height / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetY);\n            });\n            e.add(c);\n          } else {\n            var d = s.globals.dom.Paper.image(n).loaded(function (e) {\n              this.move(t.centerX - l / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetX, t.centerY - h / 2 + s.config.plotOptions.radialBar.hollow.imageOffsetY), this.size(l, h);\n            });\n            e.add(d);\n          }\n        }\n        return a;\n      }\n    }, {\n      key: \"getStrokeWidth\",\n      value: function value(t) {\n        var e = this.w;\n        return t.size * (100 - parseInt(e.config.plotOptions.radialBar.hollow.size, 10)) / 100 / (t.series.length + 1) - this.margin;\n      }\n    }]), i;\n  }(Ct),\n      Mt = function () {\n    function t(e) {\n      a(this, t), this.w = e.w, this.lineCtx = e;\n    }\n\n    return r(t, [{\n      key: \"sameValueSeriesFix\",\n      value: function value(t, e) {\n        var i = this.w;\n\n        if (\"line\" === i.config.chart.type && (\"gradient\" === i.config.fill.type || \"gradient\" === i.config.fill.type[t]) && new y(this.lineCtx.ctx, i).seriesHaveSameValues(t)) {\n          var a = e[t].slice();\n          a[a.length - 1] = a[a.length - 1] + 1e-6, e[t] = a;\n        }\n\n        return e;\n      }\n    }, {\n      key: \"calculatePoints\",\n      value: function value(t) {\n        var e = t.series,\n            i = t.realIndex,\n            a = t.x,\n            s = t.y,\n            r = t.i,\n            o = t.j,\n            n = t.prevY,\n            l = this.w,\n            h = [],\n            c = [];\n\n        if (0 === o) {\n          var d = this.lineCtx.categoryAxisCorrection + l.config.markers.offsetX;\n          l.globals.isXNumeric && (d = (l.globals.seriesX[i][0] - l.globals.minX) / this.lineCtx.xRatio + l.config.markers.offsetX), h.push(d), c.push(x.isNumber(e[r][0]) ? n + l.config.markers.offsetY : null), h.push(a + l.config.markers.offsetX), c.push(x.isNumber(e[r][o + 1]) ? s + l.config.markers.offsetY : null);\n        } else h.push(a + l.config.markers.offsetX), c.push(x.isNumber(e[r][o + 1]) ? s + l.config.markers.offsetY : null);\n\n        return {\n          x: h,\n          y: c\n        };\n      }\n    }, {\n      key: \"checkPreviousPaths\",\n      value: function value(t) {\n        for (var e = t.pathFromLine, i = t.pathFromArea, a = t.realIndex, s = this.w, r = 0; r < s.globals.previousPaths.length; r++) {\n          var o = s.globals.previousPaths[r];\n          (\"line\" === o.type || \"area\" === o.type) && o.paths.length > 0 && parseInt(o.realIndex, 10) === parseInt(a, 10) && (\"line\" === o.type ? (this.lineCtx.appendPathFrom = !1, e = s.globals.previousPaths[r].paths[0].d) : \"area\" === o.type && (this.lineCtx.appendPathFrom = !1, i = s.globals.previousPaths[r].paths[0].d, s.config.stroke.show && s.globals.previousPaths[r].paths[1] && (e = s.globals.previousPaths[r].paths[1].d)));\n        }\n\n        return {\n          pathFromLine: e,\n          pathFromArea: i\n        };\n      }\n    }, {\n      key: \"determineFirstPrevY\",\n      value: function value(t) {\n        var e = t.i,\n            i = t.series,\n            a = t.prevY,\n            s = t.lineYPosition,\n            r = this.w;\n        if (void 0 !== i[e][0]) a = (s = r.config.chart.stacked && e > 0 ? this.lineCtx.prevSeriesY[e - 1][0] : this.lineCtx.zeroY) - i[e][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] + 2 * (this.lineCtx.isReversed ? i[e][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] : 0);else if (r.config.chart.stacked && e > 0 && void 0 === i[e][0]) for (var o = e - 1; o >= 0; o--) {\n          if (null !== i[o][0] && void 0 !== i[o][0]) {\n            a = s = this.lineCtx.prevSeriesY[o][0];\n            break;\n          }\n        }\n        return {\n          prevY: a,\n          lineYPosition: s\n        };\n      }\n    }]), t;\n  }(),\n      Tt = function () {\n    function t(e, i, s) {\n      a(this, t), this.ctx = e, this.w = e.w, this.xyRatios = i, this.pointsChart = !(\"bubble\" !== this.w.config.chart.type && \"scatter\" !== this.w.config.chart.type) || s, this.scatter = new I(this.ctx), this.noNegatives = this.w.globals.minX === Number.MAX_VALUE, this.lineHelpers = new Mt(this), this.markers = new T(this.ctx), this.prevSeriesY = [], this.categoryAxisCorrection = 0, this.yaxisIndex = 0;\n    }\n\n    return r(t, [{\n      key: \"draw\",\n      value: function value(t, e, i) {\n        var a = this.w,\n            s = new m(this.ctx),\n            r = a.globals.comboCharts ? e : a.config.chart.type,\n            o = s.group({\n          \"class\": \"apexcharts-\".concat(r, \"-series apexcharts-plot-series\")\n        }),\n            n = new y(this.ctx, a);\n        this.yRatio = this.xyRatios.yRatio, this.zRatio = this.xyRatios.zRatio, this.xRatio = this.xyRatios.xRatio, this.baseLineY = this.xyRatios.baseLineY, t = n.getLogSeries(t), this.yRatio = n.getLogYRatios(this.yRatio);\n\n        for (var l = [], h = 0; h < t.length; h++) {\n          t = this.lineHelpers.sameValueSeriesFix(h, t);\n          var c = a.globals.comboCharts ? i[h] : h;\n\n          this._initSerieVariables(t, h, c);\n\n          var d = [],\n              g = [],\n              u = a.globals.padHorizontal + this.categoryAxisCorrection;\n          this.ctx.series.addCollapsedClassToSeries(this.elSeries, c), a.globals.isXNumeric && a.globals.seriesX.length > 0 && (u = (a.globals.seriesX[c][0] - a.globals.minX) / this.xRatio), g.push(u);\n          var f,\n              p = u,\n              x = p,\n              b = this.zeroY;\n          b = this.lineHelpers.determineFirstPrevY({\n            i: h,\n            series: t,\n            prevY: b,\n            lineYPosition: 0\n          }).prevY, d.push(b), f = b;\n\n          var v = this._calculatePathsFrom({\n            series: t,\n            i: h,\n            realIndex: c,\n            prevX: x,\n            prevY: b\n          }),\n              w = this._iterateOverDataPoints({\n            series: t,\n            realIndex: c,\n            i: h,\n            x: u,\n            y: 1,\n            pX: p,\n            pY: f,\n            pathsFrom: v,\n            linePaths: [],\n            areaPaths: [],\n            seriesIndex: i,\n            lineYPosition: 0,\n            xArrj: g,\n            yArrj: d\n          });\n\n          this._handlePaths({\n            type: r,\n            realIndex: c,\n            i: h,\n            paths: w\n          }), this.elSeries.add(this.elPointsMain), this.elSeries.add(this.elDataLabelsWrap), l.push(this.elSeries);\n        }\n\n        if (a.config.chart.stacked) for (var k = l.length; k > 0; k--) {\n          o.add(l[k - 1]);\n        } else for (var A = 0; A < l.length; A++) {\n          o.add(l[A]);\n        }\n        return o;\n      }\n    }, {\n      key: \"_initSerieVariables\",\n      value: function value(t, e, i) {\n        var a = this.w,\n            s = new m(this.ctx);\n        this.xDivision = a.globals.gridWidth / (a.globals.dataPoints - (\"on\" === a.config.xaxis.tickPlacement ? 1 : 0)), this.strokeWidth = Array.isArray(a.config.stroke.width) ? a.config.stroke.width[i] : a.config.stroke.width, this.yRatio.length > 1 && (this.yaxisIndex = i), this.isReversed = a.config.yaxis[this.yaxisIndex] && a.config.yaxis[this.yaxisIndex].reversed, this.zeroY = a.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? a.globals.gridHeight : 0) + (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0), this.areaBottomY = this.zeroY, (this.zeroY > a.globals.gridHeight || \"end\" === a.config.plotOptions.area.fillTo) && (this.areaBottomY = a.globals.gridHeight), this.categoryAxisCorrection = this.xDivision / 2, this.elSeries = s.group({\n          \"class\": \"apexcharts-series\",\n          seriesName: x.escapeString(a.globals.seriesNames[i])\n        }), this.elPointsMain = s.group({\n          \"class\": \"apexcharts-series-markers-wrap\",\n          \"data:realIndex\": i\n        }), this.elDataLabelsWrap = s.group({\n          \"class\": \"apexcharts-datalabels\",\n          \"data:realIndex\": i\n        });\n        var r = t[e].length === a.globals.dataPoints;\n        this.elSeries.attr({\n          \"data:longestSeries\": r,\n          rel: e + 1,\n          \"data:realIndex\": i\n        }), this.appendPathFrom = !0;\n      }\n    }, {\n      key: \"_calculatePathsFrom\",\n      value: function value(t) {\n        var e,\n            i,\n            a,\n            s,\n            r = t.series,\n            o = t.i,\n            n = t.realIndex,\n            l = t.prevX,\n            h = t.prevY,\n            c = this.w,\n            d = new m(this.ctx);\n\n        if (null === r[o][0]) {\n          for (var g = 0; g < r[o].length; g++) {\n            if (null !== r[o][g]) {\n              l = this.xDivision * g, h = this.zeroY - r[o][g] / this.yRatio[this.yaxisIndex], e = d.move(l, h), i = d.move(l, this.areaBottomY);\n              break;\n            }\n          }\n        } else e = d.move(l, h), i = d.move(l, this.areaBottomY) + d.line(l, h);\n\n        if (a = d.move(-1, this.zeroY) + d.line(-1, this.zeroY), s = d.move(-1, this.zeroY) + d.line(-1, this.zeroY), c.globals.previousPaths.length > 0) {\n          var u = this.lineHelpers.checkPreviousPaths({\n            pathFromLine: a,\n            pathFromArea: s,\n            realIndex: n\n          });\n          a = u.pathFromLine, s = u.pathFromArea;\n        }\n\n        return {\n          prevX: l,\n          prevY: h,\n          linePath: e,\n          areaPath: i,\n          pathFromLine: a,\n          pathFromArea: s\n        };\n      }\n    }, {\n      key: \"_handlePaths\",\n      value: function value(t) {\n        var i = t.type,\n            a = t.realIndex,\n            s = t.i,\n            r = t.paths,\n            o = this.w,\n            n = new m(this.ctx),\n            l = new M(this.ctx);\n        this.prevSeriesY.push(r.yArrj), o.globals.seriesXvalues[a] = r.xArrj, o.globals.seriesYvalues[a] = r.yArrj;\n        var h = o.config.forecastDataPoints;\n\n        if (h.count > 0) {\n          var c = o.globals.seriesXvalues[a][o.globals.seriesXvalues[a].length - h.count - 1],\n              d = n.drawRect(c, 0, o.globals.gridWidth, o.globals.gridHeight, 0);\n          o.globals.dom.elForecastMask.appendChild(d.node);\n          var g = n.drawRect(0, 0, c, o.globals.gridHeight, 0);\n          o.globals.dom.elNonForecastMask.appendChild(g.node);\n        }\n\n        this.pointsChart || o.globals.delayedElements.push({\n          el: this.elPointsMain.node,\n          index: a\n        });\n        var u = {\n          i: s,\n          realIndex: a,\n          animationDelay: s,\n          initialSpeed: o.config.chart.animations.speed,\n          dataChangeSpeed: o.config.chart.animations.dynamicAnimation.speed,\n          className: \"apexcharts-\".concat(i)\n        };\n        if (\"area\" === i) for (var f = l.fillPath({\n          seriesNumber: a\n        }), p = 0; p < r.areaPaths.length; p++) {\n          var x = n.renderPaths(e(e({}, u), {}, {\n            pathFrom: r.pathFromArea,\n            pathTo: r.areaPaths[p],\n            stroke: \"none\",\n            strokeWidth: 0,\n            strokeLineCap: null,\n            fill: f\n          }));\n          this.elSeries.add(x);\n        }\n\n        if (o.config.stroke.show && !this.pointsChart) {\n          var b = null;\n          if (\"line\" === i) b = l.fillPath({\n            seriesNumber: a,\n            i: s\n          });else if (\"solid\" === o.config.stroke.fill.type) b = o.globals.stroke.colors[a];else {\n            var v = o.config.fill;\n            o.config.fill = o.config.stroke.fill, b = l.fillPath({\n              seriesNumber: a,\n              i: s\n            }), o.config.fill = v;\n          }\n\n          for (var y = 0; y < r.linePaths.length; y++) {\n            var w = e(e({}, u), {}, {\n              pathFrom: r.pathFromLine,\n              pathTo: r.linePaths[y],\n              stroke: b,\n              strokeWidth: this.strokeWidth,\n              strokeLineCap: o.config.stroke.lineCap,\n              fill: \"none\"\n            }),\n                k = n.renderPaths(w);\n\n            if (this.elSeries.add(k), h.count > 0) {\n              var A = n.renderPaths(w);\n              A.node.setAttribute(\"stroke-dasharray\", h.dashArray), h.strokeWidth && A.node.setAttribute(\"stroke-width\", h.strokeWidth), this.elSeries.add(A), A.attr(\"clip-path\", \"url(#forecastMask\".concat(o.globals.cuid, \")\")), k.attr(\"clip-path\", \"url(#nonForecastMask\".concat(o.globals.cuid, \")\"));\n            }\n          }\n        }\n      }\n    }, {\n      key: \"_iterateOverDataPoints\",\n      value: function value(t) {\n        for (var e = t.series, i = t.realIndex, a = t.i, s = t.x, r = t.y, o = t.pX, n = t.pY, l = t.pathsFrom, h = t.linePaths, c = t.areaPaths, d = t.seriesIndex, g = t.lineYPosition, u = t.xArrj, f = t.yArrj, p = this.w, b = new m(this.ctx), v = this.yRatio, y = l.prevY, w = l.linePath, k = l.areaPath, A = l.pathFromLine, S = l.pathFromArea, C = x.isNumber(p.globals.minYArr[i]) ? p.globals.minYArr[i] : p.globals.minY, L = p.globals.dataPoints > 1 ? p.globals.dataPoints - 1 : p.globals.dataPoints, P = 0; P < L; P++) {\n          var M = void 0 === e[a][P + 1] || null === e[a][P + 1];\n\n          if (p.globals.isXNumeric) {\n            var T = p.globals.seriesX[i][P + 1];\n            void 0 === p.globals.seriesX[i][P + 1] && (T = p.globals.seriesX[i][L - 1]), s = (T - p.globals.minX) / this.xRatio;\n          } else s += this.xDivision;\n\n          if (p.config.chart.stacked) {\n            if (a > 0 && p.globals.collapsedSeries.length < p.config.series.length - 1) {\n              g = this.prevSeriesY[function (t) {\n                for (var e = t, i = 0; i < p.globals.series.length; i++) {\n                  if (p.globals.collapsedSeriesIndices.indexOf(t) > -1) {\n                    e--;\n                    break;\n                  }\n                }\n\n                return e >= 0 ? e : 0;\n              }(a - 1)][P + 1];\n            } else g = this.zeroY;\n          } else g = this.zeroY;\n          r = M ? g - C / v[this.yaxisIndex] + 2 * (this.isReversed ? C / v[this.yaxisIndex] : 0) : g - e[a][P + 1] / v[this.yaxisIndex] + 2 * (this.isReversed ? e[a][P + 1] / v[this.yaxisIndex] : 0), u.push(s), f.push(r);\n\n          var I = this.lineHelpers.calculatePoints({\n            series: e,\n            x: s,\n            y: r,\n            realIndex: i,\n            i: a,\n            j: P,\n            prevY: y\n          }),\n              z = this._createPaths({\n            series: e,\n            i: a,\n            realIndex: i,\n            j: P,\n            x: s,\n            y: r,\n            pX: o,\n            pY: n,\n            linePath: w,\n            areaPath: k,\n            linePaths: h,\n            areaPaths: c,\n            seriesIndex: d\n          });\n\n          c = z.areaPaths, h = z.linePaths, o = z.pX, n = z.pY, k = z.areaPath, w = z.linePath, this.appendPathFrom && (A += b.line(s, this.zeroY), S += b.line(s, this.zeroY)), this.handleNullDataPoints(e, I, a, P, i), this._handleMarkersAndLabels({\n            pointsPos: I,\n            series: e,\n            x: s,\n            y: r,\n            prevY: y,\n            i: a,\n            j: P,\n            realIndex: i\n          });\n        }\n\n        return {\n          yArrj: f,\n          xArrj: u,\n          pathFromArea: S,\n          areaPaths: c,\n          pathFromLine: A,\n          linePaths: h\n        };\n      }\n    }, {\n      key: \"_handleMarkersAndLabels\",\n      value: function value(t) {\n        var e = t.pointsPos;\n        t.series, t.x, t.y, t.prevY;\n        var i = t.i,\n            a = t.j,\n            s = t.realIndex,\n            r = this.w,\n            o = new z(this.ctx);\n        if (this.pointsChart) this.scatter.draw(this.elSeries, a, {\n          realIndex: s,\n          pointsPos: e,\n          zRatio: this.zRatio,\n          elParent: this.elPointsMain\n        });else {\n          r.globals.series[i].length > 1 && this.elPointsMain.node.classList.add(\"apexcharts-element-hidden\");\n          var n = this.markers.plotChartMarkers(e, s, a + 1);\n          null !== n && this.elPointsMain.add(n);\n        }\n        var l = o.drawDataLabel(e, s, a + 1, null);\n        null !== l && this.elDataLabelsWrap.add(l);\n      }\n    }, {\n      key: \"_createPaths\",\n      value: function value(t) {\n        var e = t.series,\n            i = t.i,\n            a = t.realIndex,\n            s = t.j,\n            r = t.x,\n            o = t.y,\n            n = t.pX,\n            l = t.pY,\n            h = t.linePath,\n            c = t.areaPath,\n            d = t.linePaths,\n            g = t.areaPaths,\n            u = t.seriesIndex,\n            f = this.w,\n            p = new m(this.ctx),\n            x = f.config.stroke.curve,\n            b = this.areaBottomY;\n\n        if (Array.isArray(f.config.stroke.curve) && (x = Array.isArray(u) ? f.config.stroke.curve[u[i]] : f.config.stroke.curve[i]), \"smooth\" === x) {\n          var v = .35 * (r - n);\n          f.globals.hasNullValues ? (null !== e[i][s] && (null !== e[i][s + 1] ? (h = p.move(n, l) + p.curve(n + v, l, r - v, o, r + 1, o), c = p.move(n + 1, l) + p.curve(n + v, l, r - v, o, r + 1, o) + p.line(r, b) + p.line(n, b) + \"z\") : (h = p.move(n, l), c = p.move(n, l) + \"z\")), d.push(h), g.push(c)) : (h += p.curve(n + v, l, r - v, o, r, o), c += p.curve(n + v, l, r - v, o, r, o)), n = r, l = o, s === e[i].length - 2 && (c = c + p.curve(n, l, r, o, r, b) + p.move(r, o) + \"z\", f.globals.hasNullValues || (d.push(h), g.push(c)));\n        } else {\n          if (null === e[i][s + 1]) {\n            h += p.move(r, o);\n            var y = f.globals.isXNumeric ? (f.globals.seriesX[a][s] - f.globals.minX) / this.xRatio : r - this.xDivision;\n            c = c + p.line(y, b) + p.move(r, o) + \"z\";\n          }\n\n          null === e[i][s] && (h += p.move(r, o), c += p.move(r, b)), \"stepline\" === x ? (h = h + p.line(r, null, \"H\") + p.line(null, o, \"V\"), c = c + p.line(r, null, \"H\") + p.line(null, o, \"V\")) : \"straight\" === x && (h += p.line(r, o), c += p.line(r, o)), s === e[i].length - 2 && (c = c + p.line(r, b) + p.move(r, o) + \"z\", d.push(h), g.push(c));\n        }\n\n        return {\n          linePaths: d,\n          areaPaths: g,\n          pX: n,\n          pY: l,\n          linePath: h,\n          areaPath: c\n        };\n      }\n    }, {\n      key: \"handleNullDataPoints\",\n      value: function value(t, e, i, a, s) {\n        var r = this.w;\n\n        if (null === t[i][a] && r.config.markers.showNullDataPoints || 1 === t[i].length) {\n          var o = this.markers.plotChartMarkers(e, s, a + 1, this.strokeWidth - r.config.markers.strokeWidth / 2, !0);\n          null !== o && this.elPointsMain.add(o);\n        }\n      }\n    }]), t;\n  }();\n\n  window.TreemapSquared = {}, window.TreemapSquared.generate = function () {\n    function t(e, i, a, s) {\n      this.xoffset = e, this.yoffset = i, this.height = s, this.width = a, this.shortestEdge = function () {\n        return Math.min(this.height, this.width);\n      }, this.getCoordinates = function (t) {\n        var e,\n            i = [],\n            a = this.xoffset,\n            s = this.yoffset,\n            o = r(t) / this.height,\n            n = r(t) / this.width;\n        if (this.width >= this.height) for (e = 0; e < t.length; e++) {\n          i.push([a, s, a + o, s + t[e] / o]), s += t[e] / o;\n        } else for (e = 0; e < t.length; e++) {\n          i.push([a, s, a + t[e] / n, s + n]), a += t[e] / n;\n        }\n        return i;\n      }, this.cutArea = function (e) {\n        var i;\n\n        if (this.width >= this.height) {\n          var a = e / this.height,\n              s = this.width - a;\n          i = new t(this.xoffset + a, this.yoffset, s, this.height);\n        } else {\n          var r = e / this.width,\n              o = this.height - r;\n          i = new t(this.xoffset, this.yoffset + r, this.width, o);\n        }\n\n        return i;\n      };\n    }\n\n    function e(e, a, s, o, n) {\n      return o = void 0 === o ? 0 : o, n = void 0 === n ? 0 : n, function (t) {\n        var e,\n            i,\n            a = [];\n\n        for (e = 0; e < t.length; e++) {\n          for (i = 0; i < t[e].length; i++) {\n            a.push(t[e][i]);\n          }\n        }\n\n        return a;\n      }(i(function (t, e) {\n        var i,\n            a = [],\n            s = e / r(t);\n\n        for (i = 0; i < t.length; i++) {\n          a[i] = t[i] * s;\n        }\n\n        return a;\n      }(e, a * s), [], new t(o, n, a, s), []));\n    }\n\n    function i(t, e, s, o) {\n      var n, l, h;\n      if (0 !== t.length) return n = s.shortestEdge(), function (t, e, i) {\n        var s;\n        if (0 === t.length) return !0;\n        (s = t.slice()).push(e);\n        var r = a(t, i),\n            o = a(s, i);\n        return r >= o;\n      }(e, l = t[0], n) ? (e.push(l), i(t.slice(1), e, s, o)) : (h = s.cutArea(r(e), o), o.push(s.getCoordinates(e)), i(t, [], h, o)), o;\n      o.push(s.getCoordinates(e));\n    }\n\n    function a(t, e) {\n      var i = Math.min.apply(Math, t),\n          a = Math.max.apply(Math, t),\n          s = r(t);\n      return Math.max(Math.pow(e, 2) * a / Math.pow(s, 2), Math.pow(s, 2) / (Math.pow(e, 2) * i));\n    }\n\n    function s(t) {\n      return t && t.constructor === Array;\n    }\n\n    function r(t) {\n      var e,\n          i = 0;\n\n      for (e = 0; e < t.length; e++) {\n        i += t[e];\n      }\n\n      return i;\n    }\n\n    function o(t) {\n      var e,\n          i = 0;\n      if (s(t[0])) for (e = 0; e < t.length; e++) {\n        i += o(t[e]);\n      } else i = r(t);\n      return i;\n    }\n\n    return function t(i, a, r, n, l) {\n      n = void 0 === n ? 0 : n, l = void 0 === l ? 0 : l;\n      var h,\n          c,\n          d = [],\n          g = [];\n\n      if (s(i[0])) {\n        for (c = 0; c < i.length; c++) {\n          d[c] = o(i[c]);\n        }\n\n        for (h = e(d, a, r, n, l), c = 0; c < i.length; c++) {\n          g.push(t(i[c], h[c][2] - h[c][0], h[c][3] - h[c][1], h[c][0], h[c][1]));\n        }\n      } else g = e(i, a, r, n, l);\n\n      return g;\n    };\n  }();\n\n  var It,\n      zt,\n      Xt = function () {\n    function t(e, i) {\n      a(this, t), this.ctx = e, this.w = e.w, this.strokeWidth = this.w.config.stroke.width, this.helpers = new kt(e), this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation, this.labels = [];\n    }\n\n    return r(t, [{\n      key: \"draw\",\n      value: function value(t) {\n        var e = this,\n            i = this.w,\n            a = new m(this.ctx),\n            s = new M(this.ctx),\n            r = a.group({\n          \"class\": \"apexcharts-treemap\"\n        });\n        if (i.globals.noData) return r;\n        var o = [];\n        return t.forEach(function (t) {\n          var e = t.map(function (t) {\n            return Math.abs(t);\n          });\n          o.push(e);\n        }), this.negRange = this.helpers.checkColorRange(), i.config.series.forEach(function (t, i) {\n          t.data.forEach(function (t) {\n            Array.isArray(e.labels[i]) || (e.labels[i] = []), e.labels[i].push(t.x);\n          });\n        }), window.TreemapSquared.generate(o, i.globals.gridWidth, i.globals.gridHeight).forEach(function (o, n) {\n          var l = a.group({\n            \"class\": \"apexcharts-series apexcharts-treemap-series\",\n            seriesName: x.escapeString(i.globals.seriesNames[n]),\n            rel: n + 1,\n            \"data:realIndex\": n\n          });\n\n          if (i.config.chart.dropShadow.enabled) {\n            var h = i.config.chart.dropShadow;\n            new v(e.ctx).dropShadow(r, h, n);\n          }\n\n          var c = a.group({\n            \"class\": \"apexcharts-data-labels\"\n          });\n          o.forEach(function (r, o) {\n            var h = r[0],\n                c = r[1],\n                d = r[2],\n                g = r[3],\n                u = a.drawRect(h, c, d - h, g - c, 0, \"#fff\", 1, e.strokeWidth, i.config.plotOptions.treemap.useFillColorAsStroke ? p : i.globals.stroke.colors[n]);\n            u.attr({\n              cx: h,\n              cy: c,\n              index: n,\n              i: n,\n              j: o,\n              width: d - h,\n              height: g - c\n            });\n            var f = e.helpers.getShadeColor(i.config.chart.type, n, o, e.negRange),\n                p = f.color;\n            void 0 !== i.config.series[n].data[o] && i.config.series[n].data[o].fillColor && (p = i.config.series[n].data[o].fillColor);\n            var x = s.fillPath({\n              color: p,\n              seriesNumber: n,\n              dataPointIndex: o\n            });\n            u.node.classList.add(\"apexcharts-treemap-rect\"), u.attr({\n              fill: x\n            }), e.helpers.addListeners(u);\n            var b = {\n              x: h + (d - h) / 2,\n              y: c + (g - c) / 2,\n              width: 0,\n              height: 0\n            },\n                v = {\n              x: h,\n              y: c,\n              width: d - h,\n              height: g - c\n            };\n\n            if (i.config.chart.animations.enabled && !i.globals.dataChanged) {\n              var m = 1;\n              i.globals.resized || (m = i.config.chart.animations.speed), e.animateTreemap(u, b, v, m);\n            }\n\n            if (i.globals.dataChanged) {\n              var y = 1;\n              e.dynamicAnim.enabled && i.globals.shouldAnimate && (y = e.dynamicAnim.speed, i.globals.previousPaths[n] && i.globals.previousPaths[n][o] && i.globals.previousPaths[n][o].rect && (b = i.globals.previousPaths[n][o].rect), e.animateTreemap(u, b, v, y));\n            }\n\n            var w = e.getFontSize(r),\n                k = i.config.dataLabels.formatter(e.labels[n][o], {\n              value: i.globals.series[n][o],\n              seriesIndex: n,\n              dataPointIndex: o,\n              w: i\n            }),\n                A = e.helpers.calculateDataLabels({\n              text: k,\n              x: (h + d) / 2,\n              y: (c + g) / 2 + e.strokeWidth / 2 + w / 3,\n              i: n,\n              j: o,\n              colorProps: f,\n              fontSize: w,\n              series: t\n            });\n            i.config.dataLabels.enabled && A && e.rotateToFitLabel(A, k, h, c, d, g), l.add(u), null !== A && l.add(A);\n          }), l.add(c), r.add(l);\n        }), r;\n      }\n    }, {\n      key: \"getFontSize\",\n      value: function value(t) {\n        var e = this.w;\n\n        var i,\n            a,\n            s,\n            r,\n            o = function t(e) {\n          var i,\n              a = 0;\n          if (Array.isArray(e[0])) for (i = 0; i < e.length; i++) {\n            a += t(e[i]);\n          } else for (i = 0; i < e.length; i++) {\n            a += e[i].length;\n          }\n          return a;\n        }(this.labels) / function t(e) {\n          var i,\n              a = 0;\n          if (Array.isArray(e[0])) for (i = 0; i < e.length; i++) {\n            a += t(e[i]);\n          } else for (i = 0; i < e.length; i++) {\n            a += 1;\n          }\n          return a;\n        }(this.labels);\n\n        return i = t[2] - t[0], a = t[3] - t[1], s = i * a, r = Math.pow(s, .5), Math.min(r / o, parseInt(e.config.dataLabels.style.fontSize, 10));\n      }\n    }, {\n      key: \"rotateToFitLabel\",\n      value: function value(t, e, i, a, s, r) {\n        var o = new m(this.ctx),\n            n = o.getTextRects(e);\n\n        if (n.width + 5 > s - i && n.width <= r - a) {\n          var l = o.rotateAroundCenter(t.node);\n          t.node.setAttribute(\"transform\", \"rotate(-90 \".concat(l.x, \" \").concat(l.y, \")\"));\n        }\n      }\n    }, {\n      key: \"animateTreemap\",\n      value: function value(t, e, i, a) {\n        var s = new b(this.ctx);\n        s.animateRect(t, {\n          x: e.x,\n          y: e.y,\n          width: e.width,\n          height: e.height\n        }, {\n          x: i.x,\n          y: i.y,\n          width: i.width,\n          height: i.height\n        }, a, function () {\n          s.animationCompleted(t);\n        });\n      }\n    }]), t;\n  }(),\n      Et = 86400,\n      Yt = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w, this.timeScaleArray = [], this.utc = this.w.config.xaxis.labels.datetimeUTC;\n    }\n\n    return r(t, [{\n      key: \"calculateTimeScaleTicks\",\n      value: function value(t, i) {\n        var a = this,\n            s = this.w;\n        if (s.globals.allSeriesCollapsed) return s.globals.labels = [], s.globals.timescaleLabels = [], [];\n        var r = new R(this.ctx),\n            o = (i - t) / 864e5;\n        this.determineInterval(o), s.globals.disableZoomIn = !1, s.globals.disableZoomOut = !1, o < .00011574074074074075 ? s.globals.disableZoomIn = !0 : o > 5e4 && (s.globals.disableZoomOut = !0);\n        var n = r.getTimeUnitsfromTimestamp(t, i, this.utc),\n            l = s.globals.gridWidth / o,\n            h = l / 24,\n            c = h / 60,\n            d = c / 60,\n            g = Math.floor(24 * o),\n            u = Math.floor(1440 * o),\n            f = Math.floor(o * Et),\n            p = Math.floor(o),\n            x = Math.floor(o / 30),\n            b = Math.floor(o / 365),\n            v = {\n          minMillisecond: n.minMillisecond,\n          minSecond: n.minSecond,\n          minMinute: n.minMinute,\n          minHour: n.minHour,\n          minDate: n.minDate,\n          minMonth: n.minMonth,\n          minYear: n.minYear\n        },\n            m = {\n          firstVal: v,\n          currentMillisecond: v.minMillisecond,\n          currentSecond: v.minSecond,\n          currentMinute: v.minMinute,\n          currentHour: v.minHour,\n          currentMonthDate: v.minDate,\n          currentDate: v.minDate,\n          currentMonth: v.minMonth,\n          currentYear: v.minYear,\n          daysWidthOnXAxis: l,\n          hoursWidthOnXAxis: h,\n          minutesWidthOnXAxis: c,\n          secondsWidthOnXAxis: d,\n          numberOfSeconds: f,\n          numberOfMinutes: u,\n          numberOfHours: g,\n          numberOfDays: p,\n          numberOfMonths: x,\n          numberOfYears: b\n        };\n\n        switch (this.tickInterval) {\n          case \"years\":\n            this.generateYearScale(m);\n            break;\n\n          case \"months\":\n          case \"half_year\":\n            this.generateMonthScale(m);\n            break;\n\n          case \"months_days\":\n          case \"months_fortnight\":\n          case \"days\":\n          case \"week_days\":\n            this.generateDayScale(m);\n            break;\n\n          case \"hours\":\n            this.generateHourScale(m);\n            break;\n\n          case \"minutes_fives\":\n          case \"minutes\":\n            this.generateMinuteScale(m);\n            break;\n\n          case \"seconds_tens\":\n          case \"seconds_fives\":\n          case \"seconds\":\n            this.generateSecondScale(m);\n        }\n\n        var y = this.timeScaleArray.map(function (t) {\n          var i = {\n            position: t.position,\n            unit: t.unit,\n            year: t.year,\n            day: t.day ? t.day : 1,\n            hour: t.hour ? t.hour : 0,\n            month: t.month + 1\n          };\n          return \"month\" === t.unit ? e(e({}, i), {}, {\n            day: 1,\n            value: t.value + 1\n          }) : \"day\" === t.unit || \"hour\" === t.unit ? e(e({}, i), {}, {\n            value: t.value\n          }) : \"minute\" === t.unit ? e(e({}, i), {}, {\n            value: t.value,\n            minute: t.value\n          }) : \"second\" === t.unit ? e(e({}, i), {}, {\n            value: t.value,\n            minute: t.minute,\n            second: t.second\n          }) : t;\n        });\n        return y.filter(function (t) {\n          var e = 1,\n              i = Math.ceil(s.globals.gridWidth / 120),\n              r = t.value;\n          void 0 !== s.config.xaxis.tickAmount && (i = s.config.xaxis.tickAmount), y.length > i && (e = Math.floor(y.length / i));\n          var o = !1,\n              n = !1;\n\n          switch (a.tickInterval) {\n            case \"years\":\n              \"year\" === t.unit && (o = !0);\n              break;\n\n            case \"half_year\":\n              e = 7, \"year\" === t.unit && (o = !0);\n              break;\n\n            case \"months\":\n              e = 1, \"year\" === t.unit && (o = !0);\n              break;\n\n            case \"months_fortnight\":\n              e = 15, \"year\" !== t.unit && \"month\" !== t.unit || (o = !0), 30 === r && (n = !0);\n              break;\n\n            case \"months_days\":\n              e = 10, \"month\" === t.unit && (o = !0), 30 === r && (n = !0);\n              break;\n\n            case \"week_days\":\n              e = 8, \"month\" === t.unit && (o = !0);\n              break;\n\n            case \"days\":\n              e = 1, \"month\" === t.unit && (o = !0);\n              break;\n\n            case \"hours\":\n              \"day\" === t.unit && (o = !0);\n              break;\n\n            case \"minutes_fives\":\n              r % 5 != 0 && (n = !0);\n              break;\n\n            case \"seconds_tens\":\n              r % 10 != 0 && (n = !0);\n              break;\n\n            case \"seconds_fives\":\n              r % 5 != 0 && (n = !0);\n          }\n\n          if (\"hours\" === a.tickInterval || \"minutes_fives\" === a.tickInterval || \"seconds_tens\" === a.tickInterval || \"seconds_fives\" === a.tickInterval) {\n            if (!n) return !0;\n          } else if ((r % e == 0 || o) && !n) return !0;\n        });\n      }\n    }, {\n      key: \"recalcDimensionsBasedOnFormat\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = this.formatDates(t),\n            s = this.removeOverlappingTS(a);\n        i.globals.timescaleLabels = s.slice(), new lt(this.ctx).plotCoords();\n      }\n    }, {\n      key: \"determineInterval\",\n      value: function value(t) {\n        var e = 24 * t,\n            i = 60 * e;\n\n        switch (!0) {\n          case t / 365 > 5:\n            this.tickInterval = \"years\";\n            break;\n\n          case t > 800:\n            this.tickInterval = \"half_year\";\n            break;\n\n          case t > 180:\n            this.tickInterval = \"months\";\n            break;\n\n          case t > 90:\n            this.tickInterval = \"months_fortnight\";\n            break;\n\n          case t > 60:\n            this.tickInterval = \"months_days\";\n            break;\n\n          case t > 30:\n            this.tickInterval = \"week_days\";\n            break;\n\n          case t > 2:\n            this.tickInterval = \"days\";\n            break;\n\n          case e > 2.4:\n            this.tickInterval = \"hours\";\n            break;\n\n          case i > 15:\n            this.tickInterval = \"minutes_fives\";\n            break;\n\n          case i > 5:\n            this.tickInterval = \"minutes\";\n            break;\n\n          case i > 1:\n            this.tickInterval = \"seconds_tens\";\n            break;\n\n          case 60 * i > 20:\n            this.tickInterval = \"seconds_fives\";\n            break;\n\n          default:\n            this.tickInterval = \"seconds\";\n        }\n      }\n    }, {\n      key: \"generateYearScale\",\n      value: function value(t) {\n        var e = t.firstVal,\n            i = t.currentMonth,\n            a = t.currentYear,\n            s = t.daysWidthOnXAxis,\n            r = t.numberOfYears,\n            o = e.minYear,\n            n = 0,\n            l = new R(this.ctx),\n            h = \"year\";\n\n        if (e.minDate > 1 || e.minMonth > 0) {\n          var c = l.determineRemainingDaysOfYear(e.minYear, e.minMonth, e.minDate);\n          n = (l.determineDaysOfYear(e.minYear) - c + 1) * s, o = e.minYear + 1, this.timeScaleArray.push({\n            position: n,\n            value: o,\n            unit: h,\n            year: o,\n            month: x.monthMod(i + 1)\n          });\n        } else 1 === e.minDate && 0 === e.minMonth && this.timeScaleArray.push({\n          position: n,\n          value: o,\n          unit: h,\n          year: a,\n          month: x.monthMod(i + 1)\n        });\n\n        for (var d = o, g = n, u = 0; u < r; u++) {\n          d++, g = l.determineDaysOfYear(d - 1) * s + g, this.timeScaleArray.push({\n            position: g,\n            value: d,\n            unit: h,\n            year: d,\n            month: 1\n          });\n        }\n      }\n    }, {\n      key: \"generateMonthScale\",\n      value: function value(t) {\n        var e = t.firstVal,\n            i = t.currentMonthDate,\n            a = t.currentMonth,\n            s = t.currentYear,\n            r = t.daysWidthOnXAxis,\n            o = t.numberOfMonths,\n            n = a,\n            l = 0,\n            h = new R(this.ctx),\n            c = \"month\",\n            d = 0;\n\n        if (e.minDate > 1) {\n          l = (h.determineDaysOfMonths(a + 1, e.minYear) - i + 1) * r, n = x.monthMod(a + 1);\n          var g = s + d,\n              u = x.monthMod(n),\n              f = n;\n          0 === n && (c = \"year\", f = g, u = 1, g += d += 1), this.timeScaleArray.push({\n            position: l,\n            value: f,\n            unit: c,\n            year: g,\n            month: u\n          });\n        } else this.timeScaleArray.push({\n          position: l,\n          value: n,\n          unit: c,\n          year: s,\n          month: x.monthMod(a)\n        });\n\n        for (var p = n + 1, b = l, v = 0, m = 1; v < o; v++, m++) {\n          0 === (p = x.monthMod(p)) ? (c = \"year\", d += 1) : c = \"month\";\n\n          var y = this._getYear(s, p, d);\n\n          b = h.determineDaysOfMonths(p, y) * r + b;\n          var w = 0 === p ? y : p;\n          this.timeScaleArray.push({\n            position: b,\n            value: w,\n            unit: c,\n            year: y,\n            month: 0 === p ? 1 : p\n          }), p++;\n        }\n      }\n    }, {\n      key: \"generateDayScale\",\n      value: function value(t) {\n        var e = t.firstVal,\n            i = t.currentMonth,\n            a = t.currentYear,\n            s = t.hoursWidthOnXAxis,\n            r = t.numberOfDays,\n            o = new R(this.ctx),\n            n = \"day\",\n            l = e.minDate + 1,\n            h = l,\n            c = function c(t, e, i) {\n          return t > o.determineDaysOfMonths(e + 1, i) ? (h = 1, n = \"month\", g = e += 1, e) : e;\n        },\n            d = (24 - e.minHour) * s,\n            g = l,\n            u = c(h, i, a);\n\n        0 === e.minHour && 1 === e.minDate ? (d = 0, g = x.monthMod(e.minMonth), n = \"month\", h = e.minDate, r++) : 1 !== e.minDate && 0 === e.minHour && 0 === e.minMinute && (d = 0, l = e.minDate, g = l, u = c(h = l, i, a)), this.timeScaleArray.push({\n          position: d,\n          value: g,\n          unit: n,\n          year: this._getYear(a, u, 0),\n          month: x.monthMod(u),\n          day: h\n        });\n\n        for (var f = d, p = 0; p < r; p++) {\n          n = \"day\", u = c(h += 1, u, this._getYear(a, u, 0));\n\n          var b = this._getYear(a, u, 0);\n\n          f = 24 * s + f;\n          var v = 1 === h ? x.monthMod(u) : h;\n          this.timeScaleArray.push({\n            position: f,\n            value: v,\n            unit: n,\n            year: b,\n            month: x.monthMod(u),\n            day: v\n          });\n        }\n      }\n    }, {\n      key: \"generateHourScale\",\n      value: function value(t) {\n        var e = t.firstVal,\n            i = t.currentDate,\n            a = t.currentMonth,\n            s = t.currentYear,\n            r = t.minutesWidthOnXAxis,\n            o = t.numberOfHours,\n            n = new R(this.ctx),\n            l = \"hour\",\n            h = function h(t, e) {\n          return t > n.determineDaysOfMonths(e + 1, s) && (p = 1, e += 1), {\n            month: e,\n            date: p\n          };\n        },\n            c = function c(t, e) {\n          return t > n.determineDaysOfMonths(e + 1, s) ? e += 1 : e;\n        },\n            d = 60 - (e.minMinute + e.minSecond / 60),\n            g = d * r,\n            u = e.minHour + 1,\n            f = u + 1;\n\n        60 === d && (g = 0, f = (u = e.minHour) + 1);\n        var p = i,\n            b = c(p, a);\n        this.timeScaleArray.push({\n          position: g,\n          value: u,\n          unit: l,\n          day: p,\n          hour: f,\n          year: s,\n          month: x.monthMod(b)\n        });\n\n        for (var v = g, m = 0; m < o; m++) {\n          if (l = \"hour\", f >= 24) f = 0, l = \"day\", b = h(p += 1, b).month, b = c(p, b);\n\n          var y = this._getYear(s, b, 0);\n\n          v = 0 === f && 0 === m ? d * r : 60 * r + v;\n          var w = 0 === f ? p : f;\n          this.timeScaleArray.push({\n            position: v,\n            value: w,\n            unit: l,\n            hour: f,\n            day: p,\n            year: y,\n            month: x.monthMod(b)\n          }), f++;\n        }\n      }\n    }, {\n      key: \"generateMinuteScale\",\n      value: function value(t) {\n        for (var e = t.currentMillisecond, i = t.currentSecond, a = t.currentMinute, s = t.currentHour, r = t.currentDate, o = t.currentMonth, n = t.currentYear, l = t.minutesWidthOnXAxis, h = t.secondsWidthOnXAxis, c = t.numberOfMinutes, d = a + 1, g = r, u = o, f = n, p = s, b = (60 - i - e / 1e3) * h, v = 0; v < c; v++) {\n          d >= 60 && (d = 0, 24 === (p += 1) && (p = 0)), this.timeScaleArray.push({\n            position: b,\n            value: d,\n            unit: \"minute\",\n            hour: p,\n            minute: d,\n            day: g,\n            year: this._getYear(f, u, 0),\n            month: x.monthMod(u)\n          }), b += l, d++;\n        }\n      }\n    }, {\n      key: \"generateSecondScale\",\n      value: function value(t) {\n        for (var e = t.currentMillisecond, i = t.currentSecond, a = t.currentMinute, s = t.currentHour, r = t.currentDate, o = t.currentMonth, n = t.currentYear, l = t.secondsWidthOnXAxis, h = t.numberOfSeconds, c = i + 1, d = a, g = r, u = o, f = n, p = s, b = (1e3 - e) / 1e3 * l, v = 0; v < h; v++) {\n          c >= 60 && (c = 0, ++d >= 60 && (d = 0, 24 === ++p && (p = 0))), this.timeScaleArray.push({\n            position: b,\n            value: c,\n            unit: \"second\",\n            hour: p,\n            minute: d,\n            second: c,\n            day: g,\n            year: this._getYear(f, u, 0),\n            month: x.monthMod(u)\n          }), b += l, c++;\n        }\n      }\n    }, {\n      key: \"createRawDateString\",\n      value: function value(t, e) {\n        var i = t.year;\n        return 0 === t.month && (t.month = 1), i += \"-\" + (\"0\" + t.month.toString()).slice(-2), \"day\" === t.unit ? i += \"day\" === t.unit ? \"-\" + (\"0\" + e).slice(-2) : \"-01\" : i += \"-\" + (\"0\" + (t.day ? t.day : \"1\")).slice(-2), \"hour\" === t.unit ? i += \"hour\" === t.unit ? \"T\" + (\"0\" + e).slice(-2) : \"T00\" : i += \"T\" + (\"0\" + (t.hour ? t.hour : \"0\")).slice(-2), \"minute\" === t.unit ? i += \":\" + (\"0\" + e).slice(-2) : i += \":\" + (t.minute ? (\"0\" + t.minute).slice(-2) : \"00\"), \"second\" === t.unit ? i += \":\" + (\"0\" + e).slice(-2) : i += \":00\", this.utc && (i += \".000Z\"), i;\n      }\n    }, {\n      key: \"formatDates\",\n      value: function value(t) {\n        var e = this,\n            i = this.w;\n        return t.map(function (t) {\n          var a = t.value.toString(),\n              s = new R(e.ctx),\n              r = e.createRawDateString(t, a),\n              o = s.getDate(s.parseDate(r));\n\n          if (e.utc || (o = s.getDate(s.parseDateWithTimezone(r))), void 0 === i.config.xaxis.labels.format) {\n            var n = \"dd MMM\",\n                l = i.config.xaxis.labels.datetimeFormatter;\n            \"year\" === t.unit && (n = l.year), \"month\" === t.unit && (n = l.month), \"day\" === t.unit && (n = l.day), \"hour\" === t.unit && (n = l.hour), \"minute\" === t.unit && (n = l.minute), \"second\" === t.unit && (n = l.second), a = s.formatDate(o, n);\n          } else a = s.formatDate(o, i.config.xaxis.labels.format);\n\n          return {\n            dateString: r,\n            position: t.position,\n            value: a,\n            unit: t.unit,\n            year: t.year,\n            month: t.month\n          };\n        });\n      }\n    }, {\n      key: \"removeOverlappingTS\",\n      value: function value(t) {\n        var e,\n            i = this,\n            a = new m(this.ctx),\n            s = !1;\n        t.length > 0 && t[0].value && t.every(function (e) {\n          return e.value.length === t[0].value.length;\n        }) && (s = !0, e = a.getTextRects(t[0].value).width);\n        var r = 0,\n            o = t.map(function (o, n) {\n          if (n > 0 && i.w.config.xaxis.labels.hideOverlappingLabels) {\n            var l = s ? e : a.getTextRects(t[r].value).width,\n                h = t[r].position;\n            return o.position > h + l + 10 ? (r = n, o) : null;\n          }\n\n          return o;\n        });\n        return o = o.filter(function (t) {\n          return null !== t;\n        });\n      }\n    }, {\n      key: \"_getYear\",\n      value: function value(t, e, i) {\n        return t + Math.floor(e / 12) + i;\n      }\n    }]), t;\n  }(),\n      Ft = function () {\n    function t(e, i) {\n      a(this, t), this.ctx = i, this.w = i.w, this.el = e;\n    }\n\n    return r(t, [{\n      key: \"setupElements\",\n      value: function value() {\n        var t = this.w.globals,\n            e = this.w.config,\n            i = e.chart.type;\n        t.axisCharts = [\"line\", \"area\", \"bar\", \"rangeBar\", \"candlestick\", \"boxPlot\", \"scatter\", \"bubble\", \"radar\", \"heatmap\", \"treemap\"].indexOf(i) > -1, t.xyCharts = [\"line\", \"area\", \"bar\", \"rangeBar\", \"candlestick\", \"boxPlot\", \"scatter\", \"bubble\"].indexOf(i) > -1, t.isBarHorizontal = (\"bar\" === e.chart.type || \"rangeBar\" === e.chart.type || \"boxPlot\" === e.chart.type) && e.plotOptions.bar.horizontal, t.chartClass = \".apexcharts\" + t.chartID, t.dom.baseEl = this.el, t.dom.elWrap = document.createElement(\"div\"), m.setAttrs(t.dom.elWrap, {\n          id: t.chartClass.substring(1),\n          \"class\": \"apexcharts-canvas \" + t.chartClass.substring(1)\n        }), this.el.appendChild(t.dom.elWrap), t.dom.Paper = new window.SVG.Doc(t.dom.elWrap), t.dom.Paper.attr({\n          \"class\": \"apexcharts-svg\",\n          \"xmlns:data\": \"ApexChartsNS\",\n          transform: \"translate(\".concat(e.chart.offsetX, \", \").concat(e.chart.offsetY, \")\")\n        }), t.dom.Paper.node.style.background = e.chart.background, this.setSVGDimensions(), t.dom.elGraphical = t.dom.Paper.group().attr({\n          \"class\": \"apexcharts-inner apexcharts-graphical\"\n        }), t.dom.elAnnotations = t.dom.Paper.group().attr({\n          \"class\": \"apexcharts-annotations\"\n        }), t.dom.elDefs = t.dom.Paper.defs(), t.dom.elLegendWrap = document.createElement(\"div\"), t.dom.elLegendWrap.classList.add(\"apexcharts-legend\"), t.dom.elWrap.appendChild(t.dom.elLegendWrap), t.dom.Paper.add(t.dom.elGraphical), t.dom.elGraphical.add(t.dom.elDefs);\n      }\n    }, {\n      key: \"plotChartType\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = i.config,\n            s = i.globals,\n            r = {\n          series: [],\n          i: []\n        },\n            o = {\n          series: [],\n          i: []\n        },\n            n = {\n          series: [],\n          i: []\n        },\n            l = {\n          series: [],\n          i: []\n        },\n            h = {\n          series: [],\n          i: []\n        },\n            c = {\n          series: [],\n          i: []\n        },\n            d = {\n          series: [],\n          i: []\n        };\n        s.series.map(function (e, g) {\n          var u = 0;\n          void 0 !== t[g].type ? (\"column\" === t[g].type || \"bar\" === t[g].type ? (s.series.length > 1 && a.plotOptions.bar.horizontal && console.warn(\"Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`\"), h.series.push(e), h.i.push(g), u++, i.globals.columnSeries = h.series) : \"area\" === t[g].type ? (o.series.push(e), o.i.push(g), u++) : \"line\" === t[g].type ? (r.series.push(e), r.i.push(g), u++) : \"scatter\" === t[g].type ? (n.series.push(e), n.i.push(g)) : \"bubble\" === t[g].type ? (l.series.push(e), l.i.push(g), u++) : \"candlestick\" === t[g].type ? (c.series.push(e), c.i.push(g), u++) : \"boxPlot\" === t[g].type ? (d.series.push(e), d.i.push(g), u++) : console.warn(\"You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble\"), u > 1 && (s.comboCharts = !0)) : (r.series.push(e), r.i.push(g));\n        });\n        var g = new Tt(this.ctx, e),\n            u = new wt(this.ctx, e);\n        this.ctx.pie = new Ct(this.ctx);\n        var f = new Pt(this.ctx);\n        this.ctx.rangeBar = new H(this.ctx, e);\n        var p = new Lt(this.ctx),\n            x = [];\n\n        if (s.comboCharts) {\n          if (o.series.length > 0 && x.push(g.draw(o.series, \"area\", o.i)), h.series.length > 0) if (i.config.chart.stacked) {\n            var b = new yt(this.ctx, e);\n            x.push(b.draw(h.series, h.i));\n          } else this.ctx.bar = new F(this.ctx, e), x.push(this.ctx.bar.draw(h.series, h.i));\n\n          if (r.series.length > 0 && x.push(g.draw(r.series, \"line\", r.i)), c.series.length > 0 && x.push(u.draw(c.series, c.i)), d.series.length > 0 && x.push(u.draw(d.series, d.i)), n.series.length > 0) {\n            var v = new Tt(this.ctx, e, !0);\n            x.push(v.draw(n.series, \"scatter\", n.i));\n          }\n\n          if (l.series.length > 0) {\n            var m = new Tt(this.ctx, e, !0);\n            x.push(m.draw(l.series, \"bubble\", l.i));\n          }\n        } else switch (a.chart.type) {\n          case \"line\":\n            x = g.draw(s.series, \"line\");\n            break;\n\n          case \"area\":\n            x = g.draw(s.series, \"area\");\n            break;\n\n          case \"bar\":\n            if (a.chart.stacked) x = new yt(this.ctx, e).draw(s.series);else this.ctx.bar = new F(this.ctx, e), x = this.ctx.bar.draw(s.series);\n            break;\n\n          case \"candlestick\":\n            x = new wt(this.ctx, e).draw(s.series);\n            break;\n\n          case \"boxPlot\":\n            x = new wt(this.ctx, e).draw(s.series);\n            break;\n\n          case \"rangeBar\":\n            x = this.ctx.rangeBar.draw(s.series);\n            break;\n\n          case \"heatmap\":\n            x = new At(this.ctx, e).draw(s.series);\n            break;\n\n          case \"treemap\":\n            x = new Xt(this.ctx, e).draw(s.series);\n            break;\n\n          case \"pie\":\n          case \"donut\":\n          case \"polarArea\":\n            x = this.ctx.pie.draw(s.series);\n            break;\n\n          case \"radialBar\":\n            x = f.draw(s.series);\n            break;\n\n          case \"radar\":\n            x = p.draw(s.series);\n            break;\n\n          default:\n            x = g.draw(s.series);\n        }\n\n        return x;\n      }\n    }, {\n      key: \"setSVGDimensions\",\n      value: function value() {\n        var t = this.w.globals,\n            e = this.w.config;\n        t.svgWidth = e.chart.width, t.svgHeight = e.chart.height;\n        var i = x.getDimensions(this.el),\n            a = e.chart.width.toString().split(/[0-9]+/g).pop();\n        \"%\" === a ? x.isNumber(i[0]) && (0 === i[0].width && (i = x.getDimensions(this.el.parentNode)), t.svgWidth = i[0] * parseInt(e.chart.width, 10) / 100) : \"px\" !== a && \"\" !== a || (t.svgWidth = parseInt(e.chart.width, 10));\n        var s = e.chart.height.toString().split(/[0-9]+/g).pop();\n        if (\"auto\" !== t.svgHeight && \"\" !== t.svgHeight) {\n          if (\"%\" === s) {\n            var r = x.getDimensions(this.el.parentNode);\n            t.svgHeight = r[1] * parseInt(e.chart.height, 10) / 100;\n          } else t.svgHeight = parseInt(e.chart.height, 10);\n        } else t.axisCharts ? t.svgHeight = t.svgWidth / 1.61 : t.svgHeight = t.svgWidth / 1.2;\n\n        if (t.svgWidth < 0 && (t.svgWidth = 0), t.svgHeight < 0 && (t.svgHeight = 0), m.setAttrs(t.dom.Paper.node, {\n          width: t.svgWidth,\n          height: t.svgHeight\n        }), \"%\" !== s) {\n          var o = e.chart.sparkline.enabled ? 0 : t.axisCharts ? e.chart.parentHeightOffset : 0;\n          t.dom.Paper.node.parentNode.parentNode.style.minHeight = t.svgHeight + o + \"px\";\n        }\n\n        t.dom.elWrap.style.width = t.svgWidth + \"px\", t.dom.elWrap.style.height = t.svgHeight + \"px\";\n      }\n    }, {\n      key: \"shiftGraphPosition\",\n      value: function value() {\n        var t = this.w.globals,\n            e = t.translateY,\n            i = {\n          transform: \"translate(\" + t.translateX + \", \" + e + \")\"\n        };\n        m.setAttrs(t.dom.elGraphical.node, i);\n      }\n    }, {\n      key: \"resizeNonAxisCharts\",\n      value: function value() {\n        var t = this.w,\n            e = t.globals,\n            i = 0,\n            a = t.config.chart.sparkline.enabled ? 1 : 15;\n        a += t.config.grid.padding.bottom, \"top\" !== t.config.legend.position && \"bottom\" !== t.config.legend.position || !t.config.legend.show || t.config.legend.floating || (i = new ct(this.ctx).legendHelpers.getLegendBBox().clwh + 10);\n        var s = t.globals.dom.baseEl.querySelector(\".apexcharts-radialbar, .apexcharts-pie\"),\n            r = 2.05 * t.globals.radialSize;\n\n        if (s && !t.config.chart.sparkline.enabled && 0 !== t.config.plotOptions.radialBar.startAngle) {\n          var o = x.getBoundingClientRect(s);\n          r = o.bottom;\n          var n = o.bottom - o.top;\n          r = Math.max(2.05 * t.globals.radialSize, n);\n        }\n\n        var l = r + e.translateY + i + a;\n        e.dom.elLegendForeign && e.dom.elLegendForeign.setAttribute(\"height\", l), t.config.chart.height && String(t.config.chart.height).indexOf(\"%\") > 0 || (e.dom.elWrap.style.height = l + \"px\", m.setAttrs(e.dom.Paper.node, {\n          height: l\n        }), e.dom.Paper.node.parentNode.parentNode.style.minHeight = l + \"px\");\n      }\n    }, {\n      key: \"coreCalculations\",\n      value: function value() {\n        new Z(this.ctx).init();\n      }\n    }, {\n      key: \"resetGlobals\",\n      value: function value() {\n        var t = this,\n            e = function e() {\n          return t.w.config.series.map(function (t) {\n            return [];\n          });\n        },\n            i = new O(),\n            a = this.w.globals;\n\n        i.initGlobalVars(a), a.seriesXvalues = e(), a.seriesYvalues = e();\n      }\n    }, {\n      key: \"isMultipleY\",\n      value: function value() {\n        if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1) return this.w.globals.isMultipleYAxis = !0, !0;\n      }\n    }, {\n      key: \"xySettings\",\n      value: function value() {\n        var t = null,\n            e = this.w;\n\n        if (e.globals.axisCharts) {\n          if (\"back\" === e.config.xaxis.crosshairs.position) new tt(this.ctx).drawXCrosshairs();\n          if (\"back\" === e.config.yaxis[0].crosshairs.position) new tt(this.ctx).drawYCrosshairs();\n\n          if (\"datetime\" === e.config.xaxis.type && void 0 === e.config.xaxis.labels.formatter) {\n            this.ctx.timeScale = new Yt(this.ctx);\n            var i = [];\n            isFinite(e.globals.minX) && isFinite(e.globals.maxX) && !e.globals.isBarHorizontal ? i = this.ctx.timeScale.calculateTimeScaleTicks(e.globals.minX, e.globals.maxX) : e.globals.isBarHorizontal && (i = this.ctx.timeScale.calculateTimeScaleTicks(e.globals.minY, e.globals.maxY)), this.ctx.timeScale.recalcDimensionsBasedOnFormat(i);\n          }\n\n          t = new y(this.ctx).getCalculatedRatios();\n        }\n\n        return t;\n      }\n    }, {\n      key: \"updateSourceChart\",\n      value: function value(t) {\n        this.ctx.w.globals.selection = void 0, this.ctx.updateHelpers._updateOptions({\n          chart: {\n            selection: {\n              xaxis: {\n                min: t.w.globals.minX,\n                max: t.w.globals.maxX\n              }\n            }\n          }\n        }, !1, !1);\n      }\n    }, {\n      key: \"setupBrushHandler\",\n      value: function value() {\n        var t = this,\n            i = this.w;\n\n        if (i.config.chart.brush.enabled && \"function\" != typeof i.config.chart.events.selection) {\n          var a = i.config.chart.brush.targets || [i.config.chart.brush.target];\n          a.forEach(function (e) {\n            var i = ApexCharts.getChartByID(e);\n            i.w.globals.brushSource = t.ctx, \"function\" != typeof i.w.config.chart.events.zoomed && (i.w.config.chart.events.zoomed = function () {\n              t.updateSourceChart(i);\n            }), \"function\" != typeof i.w.config.chart.events.scrolled && (i.w.config.chart.events.scrolled = function () {\n              t.updateSourceChart(i);\n            });\n          }), i.config.chart.events.selection = function (t, s) {\n            a.forEach(function (t) {\n              var a = ApexCharts.getChartByID(t),\n                  r = x.clone(i.config.yaxis);\n\n              if (i.config.chart.brush.autoScaleYaxis && 1 === a.w.globals.series.length) {\n                var o = new q(a);\n                r = o.autoScaleY(a, r, s);\n              }\n\n              var n = a.w.config.yaxis.reduce(function (t, i, s) {\n                return [].concat(u(t), [e(e({}, a.w.config.yaxis[s]), {}, {\n                  min: r[0].min,\n                  max: r[0].max\n                })]);\n              }, []);\n\n              a.ctx.updateHelpers._updateOptions({\n                xaxis: {\n                  min: s.xaxis.min,\n                  max: s.xaxis.max\n                },\n                yaxis: n\n              }, !1, !1, !1, !1);\n            });\n          };\n        }\n      }\n    }]), t;\n  }(),\n      Rt = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"_updateOptions\",\n      value: function value(t) {\n        var e = this,\n            a = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            s = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n            r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],\n            o = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];\n        return new Promise(function (n) {\n          var l = [e.ctx];\n          r && (l = e.ctx.getSyncedCharts()), e.ctx.w.globals.isExecCalled && (l = [e.ctx], e.ctx.w.globals.isExecCalled = !1), l.forEach(function (r, h) {\n            var c = r.w;\n\n            if (c.globals.shouldAnimate = s, a || (c.globals.resized = !0, c.globals.dataChanged = !0, s && r.series.getPreviousPaths()), t && \"object\" === i(t) && (r.config = new N(t), t = y.extendArrayProps(r.config, t, c), r.w.globals.chartID !== e.ctx.w.globals.chartID && delete t.series, c.config = x.extend(c.config, t), o && (c.globals.lastXAxis = t.xaxis ? x.clone(t.xaxis) : [], c.globals.lastYAxis = t.yaxis ? x.clone(t.yaxis) : [], c.globals.initialConfig = x.extend({}, c.config), c.globals.initialSeries = x.clone(c.config.series), t.series))) {\n              for (var d = 0; d < c.globals.collapsedSeriesIndices.length; d++) {\n                var g = c.config.series[c.globals.collapsedSeriesIndices[d]];\n                c.globals.collapsedSeries[d].data = c.globals.axisCharts ? g.data.slice() : g;\n              }\n\n              for (var u = 0; u < c.globals.ancillaryCollapsedSeriesIndices.length; u++) {\n                var f = c.config.series[c.globals.ancillaryCollapsedSeriesIndices[u]];\n                c.globals.ancillaryCollapsedSeries[u].data = c.globals.axisCharts ? f.data.slice() : f;\n              }\n\n              r.series.emptyCollapsedSeries(c.config.series);\n            }\n\n            return r.update(t).then(function () {\n              h === l.length - 1 && n(r);\n            });\n          });\n        });\n      }\n    }, {\n      key: \"_updateSeries\",\n      value: function value(t, e) {\n        var i = this,\n            a = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];\n        return new Promise(function (s) {\n          var r,\n              o = i.w;\n          return o.globals.shouldAnimate = e, o.globals.dataChanged = !0, e && i.ctx.series.getPreviousPaths(), o.globals.axisCharts ? (0 === (r = t.map(function (t, e) {\n            return i._extendSeries(t, e);\n          })).length && (r = [{\n            data: []\n          }]), o.config.series = r) : o.config.series = t.slice(), a && (o.globals.initialSeries = x.clone(o.config.series)), i.ctx.update().then(function () {\n            s(i.ctx);\n          });\n        });\n      }\n    }, {\n      key: \"_extendSeries\",\n      value: function value(t, i) {\n        var a = this.w,\n            s = a.config.series[i];\n        return e(e({}, a.config.series[i]), {}, {\n          name: t.name ? t.name : s && s.name,\n          color: t.color ? t.color : s && s.color,\n          type: t.type ? t.type : s && s.type,\n          data: t.data ? t.data : s && s.data\n        });\n      }\n    }, {\n      key: \"toggleDataPointSelection\",\n      value: function value(t, e) {\n        var i = this.w,\n            a = null,\n            s = \".apexcharts-series[data\\\\:realIndex='\".concat(t, \"']\");\n        return i.globals.axisCharts ? a = i.globals.dom.Paper.select(\"\".concat(s, \" path[j='\").concat(e, \"'], \").concat(s, \" circle[j='\").concat(e, \"'], \").concat(s, \" rect[j='\").concat(e, \"']\")).members[0] : void 0 === e && (a = i.globals.dom.Paper.select(\"\".concat(s, \" path[j='\").concat(t, \"']\")).members[0], \"pie\" !== i.config.chart.type && \"polarArea\" !== i.config.chart.type && \"donut\" !== i.config.chart.type || this.ctx.pie.pieClicked(t)), a ? (new m(this.ctx).pathMouseDown(a, null), a.node ? a.node : null) : (console.warn(\"toggleDataPointSelection: Element not found\"), null);\n      }\n    }, {\n      key: \"forceXAxisUpdate\",\n      value: function value(t) {\n        var e = this.w;\n\n        if ([\"min\", \"max\"].forEach(function (i) {\n          void 0 !== t.xaxis[i] && (e.config.xaxis[i] = t.xaxis[i], e.globals.lastXAxis[i] = t.xaxis[i]);\n        }), t.xaxis.categories && t.xaxis.categories.length && (e.config.xaxis.categories = t.xaxis.categories), e.config.xaxis.convertedCatToNumeric) {\n          var i = new D(t);\n          t = i.convertCatToNumericXaxis(t, this.ctx);\n        }\n\n        return t;\n      }\n    }, {\n      key: \"forceYAxisUpdate\",\n      value: function value(t) {\n        var e = this.w;\n        return e.config.chart.stacked && \"100%\" === e.config.chart.stackType && (Array.isArray(t.yaxis) ? t.yaxis.forEach(function (e, i) {\n          t.yaxis[i].min = 0, t.yaxis[i].max = 100;\n        }) : (t.yaxis.min = 0, t.yaxis.max = 100)), t;\n      }\n    }, {\n      key: \"revertDefaultAxisMinMax\",\n      value: function value(t) {\n        var e = this,\n            i = this.w,\n            a = i.globals.lastXAxis,\n            s = i.globals.lastYAxis;\n        t && t.xaxis && (a = t.xaxis), t && t.yaxis && (s = t.yaxis), i.config.xaxis.min = a.min, i.config.xaxis.max = a.max;\n\n        var r = function r(t) {\n          void 0 !== s[t] && (i.config.yaxis[t].min = s[t].min, i.config.yaxis[t].max = s[t].max);\n        };\n\n        i.config.yaxis.map(function (t, a) {\n          i.globals.zoomed || void 0 !== s[a] ? r(a) : void 0 !== e.ctx.opts.yaxis[a] && (t.min = e.ctx.opts.yaxis[a].min, t.max = e.ctx.opts.yaxis[a].max);\n        });\n      }\n    }]), t;\n  }();\n\n  It = \"undefined\" != typeof window ? window : void 0, zt = function zt(t, e) {\n    var a = (void 0 !== this ? this : t).SVG = function (t) {\n      if (a.supported) return t = new a.Doc(t), a.parser.draw || a.prepare(), t;\n    };\n\n    if (a.ns = \"http://www.w3.org/2000/svg\", a.xmlns = \"http://www.w3.org/2000/xmlns/\", a.xlink = \"http://www.w3.org/1999/xlink\", a.svgjs = \"http://svgjs.dev\", a.supported = !0, !a.supported) return !1;\n    a.did = 1e3, a.eid = function (t) {\n      return \"Svgjs\" + d(t) + a.did++;\n    }, a.create = function (t) {\n      var i = e.createElementNS(this.ns, t);\n      return i.setAttribute(\"id\", this.eid(t)), i;\n    }, a.extend = function () {\n      var t, e;\n      e = (t = [].slice.call(arguments)).pop();\n\n      for (var i = t.length - 1; i >= 0; i--) {\n        if (t[i]) for (var s in e) {\n          t[i].prototype[s] = e[s];\n        }\n      }\n\n      a.Set && a.Set.inherit && a.Set.inherit();\n    }, a.invent = function (t) {\n      var e = \"function\" == typeof t.create ? t.create : function () {\n        this.constructor.call(this, a.create(t.create));\n      };\n      return t.inherit && (e.prototype = new t.inherit()), t.extend && a.extend(e, t.extend), t.construct && a.extend(t.parent || a.Container, t.construct), e;\n    }, a.adopt = function (e) {\n      return e ? e.instance ? e.instance : ((i = \"svg\" == e.nodeName ? e.parentNode instanceof t.SVGElement ? new a.Nested() : new a.Doc() : \"linearGradient\" == e.nodeName ? new a.Gradient(\"linear\") : \"radialGradient\" == e.nodeName ? new a.Gradient(\"radial\") : a[d(e.nodeName)] ? new a[d(e.nodeName)]() : new a.Element(e)).type = e.nodeName, i.node = e, e.instance = i, i instanceof a.Doc && i.namespace().defs(), i.setData(JSON.parse(e.getAttribute(\"svgjs:data\")) || {}), i) : null;\n      var i;\n    }, a.prepare = function () {\n      var t = e.getElementsByTagName(\"body\")[0],\n          i = (t ? new a.Doc(t) : a.adopt(e.documentElement).nested()).size(2, 0);\n      a.parser = {\n        body: t || e.documentElement,\n        draw: i.style(\"opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden\").node,\n        poly: i.polyline().node,\n        path: i.path().node,\n        \"native\": a.create(\"svg\")\n      };\n    }, a.parser = {\n      \"native\": a.create(\"svg\")\n    }, e.addEventListener(\"DOMContentLoaded\", function () {\n      a.parser.draw || a.prepare();\n    }, !1), a.regex = {\n      numberAndUnit: /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i,\n      hex: /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i,\n      rgb: /rgb\\((\\d+),(\\d+),(\\d+)\\)/,\n      reference: /#([a-z0-9\\-_]+)/i,\n      transforms: /\\)\\s*,?\\s*/,\n      whitespace: /\\s/g,\n      isHex: /^#[a-f0-9]{3,6}$/i,\n      isRgb: /^rgb\\(/,\n      isCss: /[^:]+:[^;]+;?/,\n      isBlank: /^(\\s+)?$/,\n      isNumber: /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n      isPercent: /^-?[\\d\\.]+%$/,\n      isImage: /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i,\n      delimiter: /[\\s,]+/,\n      hyphen: /([^e])\\-/gi,\n      pathLetters: /[MLHVCSQTAZ]/gi,\n      isPathLetter: /[MLHVCSQTAZ]/i,\n      numbersWithDots: /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi,\n      dots: /\\./g\n    }, a.utils = {\n      map: function map(t, e) {\n        for (var i = t.length, a = [], s = 0; s < i; s++) {\n          a.push(e(t[s]));\n        }\n\n        return a;\n      },\n      filter: function filter(t, e) {\n        for (var i = t.length, a = [], s = 0; s < i; s++) {\n          e(t[s]) && a.push(t[s]);\n        }\n\n        return a;\n      },\n      filterSVGElements: function filterSVGElements(e) {\n        return this.filter(e, function (e) {\n          return e instanceof t.SVGElement;\n        });\n      }\n    }, a.defaults = {\n      attrs: {\n        \"fill-opacity\": 1,\n        \"stroke-opacity\": 1,\n        \"stroke-width\": 0,\n        \"stroke-linejoin\": \"miter\",\n        \"stroke-linecap\": \"butt\",\n        fill: \"#000000\",\n        stroke: \"#000000\",\n        opacity: 1,\n        x: 0,\n        y: 0,\n        cx: 0,\n        cy: 0,\n        width: 0,\n        height: 0,\n        r: 0,\n        rx: 0,\n        ry: 0,\n        offset: 0,\n        \"stop-opacity\": 1,\n        \"stop-color\": \"#000000\",\n        \"font-size\": 16,\n        \"font-family\": \"Helvetica, Arial, sans-serif\",\n        \"text-anchor\": \"start\"\n      }\n    }, a.Color = function (t) {\n      var e, s;\n      this.r = 0, this.g = 0, this.b = 0, t && (\"string\" == typeof t ? a.regex.isRgb.test(t) ? (e = a.regex.rgb.exec(t.replace(a.regex.whitespace, \"\")), this.r = parseInt(e[1]), this.g = parseInt(e[2]), this.b = parseInt(e[3])) : a.regex.isHex.test(t) && (e = a.regex.hex.exec(4 == (s = t).length ? [\"#\", s.substring(1, 2), s.substring(1, 2), s.substring(2, 3), s.substring(2, 3), s.substring(3, 4), s.substring(3, 4)].join(\"\") : s), this.r = parseInt(e[1], 16), this.g = parseInt(e[2], 16), this.b = parseInt(e[3], 16)) : \"object\" === i(t) && (this.r = t.r, this.g = t.g, this.b = t.b));\n    }, a.extend(a.Color, {\n      toString: function toString() {\n        return this.toHex();\n      },\n      toHex: function toHex() {\n        return \"#\" + g(this.r) + g(this.g) + g(this.b);\n      },\n      toRgb: function toRgb() {\n        return \"rgb(\" + [this.r, this.g, this.b].join() + \")\";\n      },\n      brightness: function brightness() {\n        return this.r / 255 * .3 + this.g / 255 * .59 + this.b / 255 * .11;\n      },\n      morph: function morph(t) {\n        return this.destination = new a.Color(t), this;\n      },\n      at: function at(t) {\n        return this.destination ? (t = t < 0 ? 0 : t > 1 ? 1 : t, new a.Color({\n          r: ~~(this.r + (this.destination.r - this.r) * t),\n          g: ~~(this.g + (this.destination.g - this.g) * t),\n          b: ~~(this.b + (this.destination.b - this.b) * t)\n        })) : this;\n      }\n    }), a.Color.test = function (t) {\n      return t += \"\", a.regex.isHex.test(t) || a.regex.isRgb.test(t);\n    }, a.Color.isRgb = function (t) {\n      return t && \"number\" == typeof t.r && \"number\" == typeof t.g && \"number\" == typeof t.b;\n    }, a.Color.isColor = function (t) {\n      return a.Color.isRgb(t) || a.Color.test(t);\n    }, a.Array = function (t, e) {\n      0 == (t = (t || []).valueOf()).length && e && (t = e.valueOf()), this.value = this.parse(t);\n    }, a.extend(a.Array, {\n      toString: function toString() {\n        return this.value.join(\" \");\n      },\n      valueOf: function valueOf() {\n        return this.value;\n      },\n      parse: function parse(t) {\n        return t = t.valueOf(), Array.isArray(t) ? t : this.split(t);\n      }\n    }), a.PointArray = function (t, e) {\n      a.Array.call(this, t, e || [[0, 0]]);\n    }, a.PointArray.prototype = new a.Array(), a.PointArray.prototype.constructor = a.PointArray;\n\n    for (var s = {\n      M: function M(t, e, i) {\n        return e.x = i.x = t[0], e.y = i.y = t[1], [\"M\", e.x, e.y];\n      },\n      L: function L(t, e) {\n        return e.x = t[0], e.y = t[1], [\"L\", t[0], t[1]];\n      },\n      H: function H(t, e) {\n        return e.x = t[0], [\"H\", t[0]];\n      },\n      V: function V(t, e) {\n        return e.y = t[0], [\"V\", t[0]];\n      },\n      C: function C(t, e) {\n        return e.x = t[4], e.y = t[5], [\"C\", t[0], t[1], t[2], t[3], t[4], t[5]];\n      },\n      Q: function Q(t, e) {\n        return e.x = t[2], e.y = t[3], [\"Q\", t[0], t[1], t[2], t[3]];\n      },\n      Z: function Z(t, e, i) {\n        return e.x = i.x, e.y = i.y, [\"Z\"];\n      }\n    }, r = \"mlhvqtcsaz\".split(\"\"), o = 0, n = r.length; o < n; ++o) {\n      s[r[o]] = function (t) {\n        return function (e, i, a) {\n          if (\"H\" == t) e[0] = e[0] + i.x;else if (\"V\" == t) e[0] = e[0] + i.y;else if (\"A\" == t) e[5] = e[5] + i.x, e[6] = e[6] + i.y;else for (var r = 0, o = e.length; r < o; ++r) {\n            e[r] = e[r] + (r % 2 ? i.y : i.x);\n          }\n          if (s && \"function\" == typeof s[t]) return s[t](e, i, a);\n        };\n      }(r[o].toUpperCase());\n    }\n\n    a.PathArray = function (t, e) {\n      a.Array.call(this, t, e || [[\"M\", 0, 0]]);\n    }, a.PathArray.prototype = new a.Array(), a.PathArray.prototype.constructor = a.PathArray, a.extend(a.PathArray, {\n      toString: function toString() {\n        return function (t) {\n          for (var e = 0, i = t.length, a = \"\"; e < i; e++) {\n            a += t[e][0], null != t[e][1] && (a += t[e][1], null != t[e][2] && (a += \" \", a += t[e][2], null != t[e][3] && (a += \" \", a += t[e][3], a += \" \", a += t[e][4], null != t[e][5] && (a += \" \", a += t[e][5], a += \" \", a += t[e][6], null != t[e][7] && (a += \" \", a += t[e][7])))));\n          }\n\n          return a + \" \";\n        }(this.value);\n      },\n      move: function move(t, e) {\n        var i = this.bbox();\n        return i.x, i.y, this;\n      },\n      at: function at(t) {\n        if (!this.destination) return this;\n\n        for (var e = this.value, i = this.destination.value, s = [], r = new a.PathArray(), o = 0, n = e.length; o < n; o++) {\n          s[o] = [e[o][0]];\n\n          for (var l = 1, h = e[o].length; l < h; l++) {\n            s[o][l] = e[o][l] + (i[o][l] - e[o][l]) * t;\n          }\n\n          \"A\" === s[o][0] && (s[o][4] = +(0 != s[o][4]), s[o][5] = +(0 != s[o][5]));\n        }\n\n        return r.value = s, r;\n      },\n      parse: function parse(t) {\n        if (t instanceof a.PathArray) return t.valueOf();\n        var e,\n            i = {\n          M: 2,\n          L: 2,\n          H: 1,\n          V: 1,\n          C: 6,\n          S: 4,\n          Q: 4,\n          T: 2,\n          A: 7,\n          Z: 0\n        };\n        t = \"string\" == typeof t ? t.replace(a.regex.numbersWithDots, h).replace(a.regex.pathLetters, \" $& \").replace(a.regex.hyphen, \"$1 -\").trim().split(a.regex.delimiter) : t.reduce(function (t, e) {\n          return [].concat.call(t, e);\n        }, []);\n        var r = [],\n            o = new a.Point(),\n            n = new a.Point(),\n            l = 0,\n            c = t.length;\n\n        do {\n          a.regex.isPathLetter.test(t[l]) ? (e = t[l], ++l) : \"M\" == e ? e = \"L\" : \"m\" == e && (e = \"l\"), r.push(s[e].call(null, t.slice(l, l += i[e.toUpperCase()]).map(parseFloat), o, n));\n        } while (c > l);\n\n        return r;\n      },\n      bbox: function bbox() {\n        return a.parser.draw || a.prepare(), a.parser.path.setAttribute(\"d\", this.toString()), a.parser.path.getBBox();\n      }\n    }), a.Number = a.invent({\n      create: function create(t, e) {\n        this.value = 0, this.unit = e || \"\", \"number\" == typeof t ? this.value = isNaN(t) ? 0 : isFinite(t) ? t : t < 0 ? -34e37 : 34e37 : \"string\" == typeof t ? (e = t.match(a.regex.numberAndUnit)) && (this.value = parseFloat(e[1]), \"%\" == e[5] ? this.value /= 100 : \"s\" == e[5] && (this.value *= 1e3), this.unit = e[5]) : t instanceof a.Number && (this.value = t.valueOf(), this.unit = t.unit);\n      },\n      extend: {\n        toString: function toString() {\n          return (\"%\" == this.unit ? ~~(1e8 * this.value) / 1e6 : \"s\" == this.unit ? this.value / 1e3 : this.value) + this.unit;\n        },\n        toJSON: function toJSON() {\n          return this.toString();\n        },\n        valueOf: function valueOf() {\n          return this.value;\n        },\n        plus: function plus(t) {\n          return t = new a.Number(t), new a.Number(this + t, this.unit || t.unit);\n        },\n        minus: function minus(t) {\n          return t = new a.Number(t), new a.Number(this - t, this.unit || t.unit);\n        },\n        times: function times(t) {\n          return t = new a.Number(t), new a.Number(this * t, this.unit || t.unit);\n        },\n        divide: function divide(t) {\n          return t = new a.Number(t), new a.Number(this / t, this.unit || t.unit);\n        },\n        to: function to(t) {\n          var e = new a.Number(this);\n          return \"string\" == typeof t && (e.unit = t), e;\n        },\n        morph: function morph(t) {\n          return this.destination = new a.Number(t), t.relative && (this.destination.value += this.value), this;\n        },\n        at: function at(t) {\n          return this.destination ? new a.Number(this.destination).minus(this).times(t).plus(this) : this;\n        }\n      }\n    }), a.Element = a.invent({\n      create: function create(t) {\n        this._stroke = a.defaults.attrs.stroke, this._event = null, this.dom = {}, (this.node = t) && (this.type = t.nodeName, this.node.instance = this, this._stroke = t.getAttribute(\"stroke\") || this._stroke);\n      },\n      extend: {\n        x: function x(t) {\n          return this.attr(\"x\", t);\n        },\n        y: function y(t) {\n          return this.attr(\"y\", t);\n        },\n        cx: function cx(t) {\n          return null == t ? this.x() + this.width() / 2 : this.x(t - this.width() / 2);\n        },\n        cy: function cy(t) {\n          return null == t ? this.y() + this.height() / 2 : this.y(t - this.height() / 2);\n        },\n        move: function move(t, e) {\n          return this.x(t).y(e);\n        },\n        center: function center(t, e) {\n          return this.cx(t).cy(e);\n        },\n        width: function width(t) {\n          return this.attr(\"width\", t);\n        },\n        height: function height(t) {\n          return this.attr(\"height\", t);\n        },\n        size: function size(t, e) {\n          var i = u(this, t, e);\n          return this.width(new a.Number(i.width)).height(new a.Number(i.height));\n        },\n        clone: function clone(t) {\n          this.writeDataToDom();\n          var e = x(this.node.cloneNode(!0));\n          return t ? t.add(e) : this.after(e), e;\n        },\n        remove: function remove() {\n          return this.parent() && this.parent().removeElement(this), this;\n        },\n        replace: function replace(t) {\n          return this.after(t).remove(), t;\n        },\n        addTo: function addTo(t) {\n          return t.put(this);\n        },\n        putIn: function putIn(t) {\n          return t.add(this);\n        },\n        id: function id(t) {\n          return this.attr(\"id\", t);\n        },\n        show: function show() {\n          return this.style(\"display\", \"\");\n        },\n        hide: function hide() {\n          return this.style(\"display\", \"none\");\n        },\n        visible: function visible() {\n          return \"none\" != this.style(\"display\");\n        },\n        toString: function toString() {\n          return this.attr(\"id\");\n        },\n        classes: function classes() {\n          var t = this.attr(\"class\");\n          return null == t ? [] : t.trim().split(a.regex.delimiter);\n        },\n        hasClass: function hasClass(t) {\n          return -1 != this.classes().indexOf(t);\n        },\n        addClass: function addClass(t) {\n          if (!this.hasClass(t)) {\n            var e = this.classes();\n            e.push(t), this.attr(\"class\", e.join(\" \"));\n          }\n\n          return this;\n        },\n        removeClass: function removeClass(t) {\n          return this.hasClass(t) && this.attr(\"class\", this.classes().filter(function (e) {\n            return e != t;\n          }).join(\" \")), this;\n        },\n        toggleClass: function toggleClass(t) {\n          return this.hasClass(t) ? this.removeClass(t) : this.addClass(t);\n        },\n        reference: function reference(t) {\n          return a.get(this.attr(t));\n        },\n        parent: function parent(e) {\n          var i = this;\n          if (!i.node.parentNode) return null;\n          if (i = a.adopt(i.node.parentNode), !e) return i;\n\n          for (; i && i.node instanceof t.SVGElement;) {\n            if (\"string\" == typeof e ? i.matches(e) : i instanceof e) return i;\n            if (!i.node.parentNode || \"#document\" == i.node.parentNode.nodeName) return null;\n            i = a.adopt(i.node.parentNode);\n          }\n        },\n        doc: function doc() {\n          return this instanceof a.Doc ? this : this.parent(a.Doc);\n        },\n        parents: function parents(t) {\n          var e = [],\n              i = this;\n\n          do {\n            if (!(i = i.parent(t)) || !i.node) break;\n            e.push(i);\n          } while (i.parent);\n\n          return e;\n        },\n        matches: function matches(t) {\n          return function (t, e) {\n            return (t.matches || t.matchesSelector || t.msMatchesSelector || t.mozMatchesSelector || t.webkitMatchesSelector || t.oMatchesSelector).call(t, e);\n          }(this.node, t);\n        },\n        \"native\": function native() {\n          return this.node;\n        },\n        svg: function svg(t) {\n          var i = e.createElement(\"svg\");\n          if (!(t && this instanceof a.Parent)) return i.appendChild(t = e.createElement(\"svg\")), this.writeDataToDom(), t.appendChild(this.node.cloneNode(!0)), i.innerHTML.replace(/^<svg>/, \"\").replace(/<\\/svg>$/, \"\");\n          i.innerHTML = \"<svg>\" + t.replace(/\\n/, \"\").replace(/<([\\w:-]+)([^<]+?)\\/>/g, \"<$1$2></$1>\") + \"</svg>\";\n\n          for (var s = 0, r = i.firstChild.childNodes.length; s < r; s++) {\n            this.node.appendChild(i.firstChild.firstChild);\n          }\n\n          return this;\n        },\n        writeDataToDom: function writeDataToDom() {\n          return (this.each || this.lines) && (this.each ? this : this.lines()).each(function () {\n            this.writeDataToDom();\n          }), this.node.removeAttribute(\"svgjs:data\"), Object.keys(this.dom).length && this.node.setAttribute(\"svgjs:data\", JSON.stringify(this.dom)), this;\n        },\n        setData: function setData(t) {\n          return this.dom = t, this;\n        },\n        is: function is(t) {\n          return function (t, e) {\n            return t instanceof e;\n          }(this, t);\n        }\n      }\n    }), a.easing = {\n      \"-\": function _(t) {\n        return t;\n      },\n      \"<>\": function _(t) {\n        return -Math.cos(t * Math.PI) / 2 + .5;\n      },\n      \">\": function _(t) {\n        return Math.sin(t * Math.PI / 2);\n      },\n      \"<\": function _(t) {\n        return 1 - Math.cos(t * Math.PI / 2);\n      }\n    }, a.morph = function (t) {\n      return function (e, i) {\n        return new a.MorphObj(e, i).at(t);\n      };\n    }, a.Situation = a.invent({\n      create: function create(t) {\n        this.init = !1, this.reversed = !1, this.reversing = !1, this.duration = new a.Number(t.duration).valueOf(), this.delay = new a.Number(t.delay).valueOf(), this.start = +new Date() + this.delay, this.finish = this.start + this.duration, this.ease = t.ease, this.loop = 0, this.loops = !1, this.animations = {}, this.attrs = {}, this.styles = {}, this.transforms = [], this.once = {};\n      }\n    }), a.FX = a.invent({\n      create: function create(t) {\n        this._target = t, this.situations = [], this.active = !1, this.situation = null, this.paused = !1, this.lastPos = 0, this.pos = 0, this.absPos = 0, this._speed = 1;\n      },\n      extend: {\n        animate: function animate(t, e, s) {\n          \"object\" === i(t) && (e = t.ease, s = t.delay, t = t.duration);\n          var r = new a.Situation({\n            duration: t || 1e3,\n            delay: s || 0,\n            ease: a.easing[e || \"-\"] || e\n          });\n          return this.queue(r), this;\n        },\n        target: function target(t) {\n          return t && t instanceof a.Element ? (this._target = t, this) : this._target;\n        },\n        timeToAbsPos: function timeToAbsPos(t) {\n          return (t - this.situation.start) / (this.situation.duration / this._speed);\n        },\n        absPosToTime: function absPosToTime(t) {\n          return this.situation.duration / this._speed * t + this.situation.start;\n        },\n        startAnimFrame: function startAnimFrame() {\n          this.stopAnimFrame(), this.animationFrame = t.requestAnimationFrame(function () {\n            this.step();\n          }.bind(this));\n        },\n        stopAnimFrame: function stopAnimFrame() {\n          t.cancelAnimationFrame(this.animationFrame);\n        },\n        start: function start() {\n          return !this.active && this.situation && (this.active = !0, this.startCurrent()), this;\n        },\n        startCurrent: function startCurrent() {\n          return this.situation.start = +new Date() + this.situation.delay / this._speed, this.situation.finish = this.situation.start + this.situation.duration / this._speed, this.initAnimations().step();\n        },\n        queue: function queue(t) {\n          return (\"function\" == typeof t || t instanceof a.Situation) && this.situations.push(t), this.situation || (this.situation = this.situations.shift()), this;\n        },\n        dequeue: function dequeue() {\n          return this.stop(), this.situation = this.situations.shift(), this.situation && (this.situation instanceof a.Situation ? this.start() : this.situation.call(this)), this;\n        },\n        initAnimations: function initAnimations() {\n          var t,\n              e = this.situation;\n          if (e.init) return this;\n\n          for (var i in e.animations) {\n            t = this.target()[i](), Array.isArray(t) || (t = [t]), Array.isArray(e.animations[i]) || (e.animations[i] = [e.animations[i]]);\n\n            for (var s = t.length; s--;) {\n              e.animations[i][s] instanceof a.Number && (t[s] = new a.Number(t[s])), e.animations[i][s] = t[s].morph(e.animations[i][s]);\n            }\n          }\n\n          for (var i in e.attrs) {\n            e.attrs[i] = new a.MorphObj(this.target().attr(i), e.attrs[i]);\n          }\n\n          for (var i in e.styles) {\n            e.styles[i] = new a.MorphObj(this.target().style(i), e.styles[i]);\n          }\n\n          return e.initialTransformation = this.target().matrixify(), e.init = !0, this;\n        },\n        clearQueue: function clearQueue() {\n          return this.situations = [], this;\n        },\n        clearCurrent: function clearCurrent() {\n          return this.situation = null, this;\n        },\n        stop: function stop(t, e) {\n          var i = this.active;\n          return this.active = !1, e && this.clearQueue(), t && this.situation && (!i && this.startCurrent(), this.atEnd()), this.stopAnimFrame(), this.clearCurrent();\n        },\n        after: function after(t) {\n          var e = this.last();\n          return this.target().on(\"finished.fx\", function i(a) {\n            a.detail.situation == e && (t.call(this, e), this.off(\"finished.fx\", i));\n          }), this._callStart();\n        },\n        during: function during(t) {\n          var e = this.last(),\n              i = function i(_i3) {\n            _i3.detail.situation == e && t.call(this, _i3.detail.pos, a.morph(_i3.detail.pos), _i3.detail.eased, e);\n          };\n\n          return this.target().off(\"during.fx\", i).on(\"during.fx\", i), this.after(function () {\n            this.off(\"during.fx\", i);\n          }), this._callStart();\n        },\n        afterAll: function afterAll(t) {\n          var e = function e(i) {\n            t.call(this), this.off(\"allfinished.fx\", e);\n          };\n\n          return this.target().off(\"allfinished.fx\", e).on(\"allfinished.fx\", e), this._callStart();\n        },\n        last: function last() {\n          return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;\n        },\n        add: function add(t, e, i) {\n          return this.last()[i || \"animations\"][t] = e, this._callStart();\n        },\n        step: function step(t) {\n          var e, i, a;\n          t || (this.absPos = this.timeToAbsPos(+new Date())), !1 !== this.situation.loops ? (e = Math.max(this.absPos, 0), i = Math.floor(e), !0 === this.situation.loops || i < this.situation.loops ? (this.pos = e - i, a = this.situation.loop, this.situation.loop = i) : (this.absPos = this.situation.loops, this.pos = 1, a = this.situation.loop - 1, this.situation.loop = this.situation.loops), this.situation.reversing && (this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - a) % 2))) : (this.absPos = Math.min(this.absPos, 1), this.pos = this.absPos), this.pos < 0 && (this.pos = 0), this.situation.reversed && (this.pos = 1 - this.pos);\n          var s = this.situation.ease(this.pos);\n\n          for (var r in this.situation.once) {\n            r > this.lastPos && r <= s && (this.situation.once[r].call(this.target(), this.pos, s), delete this.situation.once[r]);\n          }\n\n          return this.active && this.target().fire(\"during\", {\n            pos: this.pos,\n            eased: s,\n            fx: this,\n            situation: this.situation\n          }), this.situation ? (this.eachAt(), 1 == this.pos && !this.situation.reversed || this.situation.reversed && 0 == this.pos ? (this.stopAnimFrame(), this.target().fire(\"finished\", {\n            fx: this,\n            situation: this.situation\n          }), this.situations.length || (this.target().fire(\"allfinished\"), this.situations.length || (this.target().off(\".fx\"), this.active = !1)), this.active ? this.dequeue() : this.clearCurrent()) : !this.paused && this.active && this.startAnimFrame(), this.lastPos = s, this) : this;\n        },\n        eachAt: function eachAt() {\n          var t,\n              e = this,\n              i = this.target(),\n              s = this.situation;\n\n          for (var r in s.animations) {\n            t = [].concat(s.animations[r]).map(function (t) {\n              return \"string\" != typeof t && t.at ? t.at(s.ease(e.pos), e.pos) : t;\n            }), i[r].apply(i, t);\n          }\n\n          for (var r in s.attrs) {\n            t = [r].concat(s.attrs[r]).map(function (t) {\n              return \"string\" != typeof t && t.at ? t.at(s.ease(e.pos), e.pos) : t;\n            }), i.attr.apply(i, t);\n          }\n\n          for (var r in s.styles) {\n            t = [r].concat(s.styles[r]).map(function (t) {\n              return \"string\" != typeof t && t.at ? t.at(s.ease(e.pos), e.pos) : t;\n            }), i.style.apply(i, t);\n          }\n\n          if (s.transforms.length) {\n            t = s.initialTransformation, r = 0;\n\n            for (var o = s.transforms.length; r < o; r++) {\n              var n = s.transforms[r];\n              n instanceof a.Matrix ? t = n.relative ? t.multiply(new a.Matrix().morph(n).at(s.ease(this.pos))) : t.morph(n).at(s.ease(this.pos)) : (n.relative || n.undo(t.extract()), t = t.multiply(n.at(s.ease(this.pos))));\n            }\n\n            i.matrix(t);\n          }\n\n          return this;\n        },\n        once: function once(t, e, i) {\n          var a = this.last();\n          return i || (t = a.ease(t)), a.once[t] = e, this;\n        },\n        _callStart: function _callStart() {\n          return setTimeout(function () {\n            this.start();\n          }.bind(this), 0), this;\n        }\n      },\n      parent: a.Element,\n      construct: {\n        animate: function animate(t, e, i) {\n          return (this.fx || (this.fx = new a.FX(this))).animate(t, e, i);\n        },\n        delay: function delay(t) {\n          return (this.fx || (this.fx = new a.FX(this))).delay(t);\n        },\n        stop: function stop(t, e) {\n          return this.fx && this.fx.stop(t, e), this;\n        },\n        finish: function finish() {\n          return this.fx && this.fx.finish(), this;\n        }\n      }\n    }), a.MorphObj = a.invent({\n      create: function create(t, e) {\n        return a.Color.isColor(e) ? new a.Color(t).morph(e) : a.regex.delimiter.test(t) ? a.regex.pathLetters.test(t) ? new a.PathArray(t).morph(e) : new a.Array(t).morph(e) : a.regex.numberAndUnit.test(e) ? new a.Number(t).morph(e) : (this.value = t, void (this.destination = e));\n      },\n      extend: {\n        at: function at(t, e) {\n          return e < 1 ? this.value : this.destination;\n        },\n        valueOf: function valueOf() {\n          return this.value;\n        }\n      }\n    }), a.extend(a.FX, {\n      attr: function attr(t, e, a) {\n        if (\"object\" === i(t)) for (var s in t) {\n          this.attr(s, t[s]);\n        } else this.add(t, e, \"attrs\");\n        return this;\n      },\n      plot: function plot(t, e, i, a) {\n        return 4 == arguments.length ? this.plot([t, e, i, a]) : this.add(\"plot\", new (this.target().morphArray)(t));\n      }\n    }), a.Box = a.invent({\n      create: function create(t, e, s, r) {\n        if (!(\"object\" !== i(t) || t instanceof a.Element)) return a.Box.call(this, null != t.left ? t.left : t.x, null != t.top ? t.top : t.y, t.width, t.height);\n        4 == arguments.length && (this.x = t, this.y = e, this.width = s, this.height = r), b(this);\n      }\n    }), a.BBox = a.invent({\n      create: function create(t) {\n        if (a.Box.apply(this, [].slice.call(arguments)), t instanceof a.Element) {\n          var i;\n\n          try {\n            if (!e.documentElement.contains) {\n              for (var s = t.node; s.parentNode;) {\n                s = s.parentNode;\n              }\n\n              if (s != e) throw new Error(\"Element not in the dom\");\n            }\n\n            i = t.node.getBBox();\n          } catch (e) {\n            if (t instanceof a.Shape) {\n              a.parser.draw || a.prepare();\n              var r = t.clone(a.parser.draw.instance).show();\n              r && r.node && \"function\" == typeof r.node.getBBox && (i = r.node.getBBox()), r && \"function\" == typeof r.remove && r.remove();\n            } else i = {\n              x: t.node.clientLeft,\n              y: t.node.clientTop,\n              width: t.node.clientWidth,\n              height: t.node.clientHeight\n            };\n          }\n\n          a.Box.call(this, i);\n        }\n      },\n      inherit: a.Box,\n      parent: a.Element,\n      construct: {\n        bbox: function bbox() {\n          return new a.BBox(this);\n        }\n      }\n    }), a.BBox.prototype.constructor = a.BBox, a.Matrix = a.invent({\n      create: function create(t) {\n        var e = p([1, 0, 0, 1, 0, 0]);\n        t = null === t ? e : t instanceof a.Element ? t.matrixify() : \"string\" == typeof t ? p(t.split(a.regex.delimiter).map(parseFloat)) : 6 == arguments.length ? p([].slice.call(arguments)) : Array.isArray(t) ? p(t) : t && \"object\" === i(t) ? t : e;\n\n        for (var s = m.length - 1; s >= 0; --s) {\n          this[m[s]] = null != t[m[s]] ? t[m[s]] : e[m[s]];\n        }\n      },\n      extend: {\n        extract: function extract() {\n          var t = f(this, 0, 1);\n          f(this, 1, 0);\n          var e = 180 / Math.PI * Math.atan2(t.y, t.x) - 90;\n          return {\n            x: this.e,\n            y: this.f,\n            transformedX: (this.e * Math.cos(e * Math.PI / 180) + this.f * Math.sin(e * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),\n            transformedY: (this.f * Math.cos(e * Math.PI / 180) + this.e * Math.sin(-e * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),\n            rotation: e,\n            a: this.a,\n            b: this.b,\n            c: this.c,\n            d: this.d,\n            e: this.e,\n            f: this.f,\n            matrix: new a.Matrix(this)\n          };\n        },\n        clone: function clone() {\n          return new a.Matrix(this);\n        },\n        morph: function morph(t) {\n          return this.destination = new a.Matrix(t), this;\n        },\n        multiply: function multiply(t) {\n          return new a.Matrix(this[\"native\"]().multiply(function (t) {\n            return t instanceof a.Matrix || (t = new a.Matrix(t)), t;\n          }(t)[\"native\"]()));\n        },\n        inverse: function inverse() {\n          return new a.Matrix(this[\"native\"]().inverse());\n        },\n        translate: function translate(t, e) {\n          return new a.Matrix(this[\"native\"]().translate(t || 0, e || 0));\n        },\n        \"native\": function native() {\n          for (var t = a.parser[\"native\"].createSVGMatrix(), e = m.length - 1; e >= 0; e--) {\n            t[m[e]] = this[m[e]];\n          }\n\n          return t;\n        },\n        toString: function toString() {\n          return \"matrix(\" + v(this.a) + \",\" + v(this.b) + \",\" + v(this.c) + \",\" + v(this.d) + \",\" + v(this.e) + \",\" + v(this.f) + \")\";\n        }\n      },\n      parent: a.Element,\n      construct: {\n        ctm: function ctm() {\n          return new a.Matrix(this.node.getCTM());\n        },\n        screenCTM: function screenCTM() {\n          if (this instanceof a.Nested) {\n            var t = this.rect(1, 1),\n                e = t.node.getScreenCTM();\n            return t.remove(), new a.Matrix(e);\n          }\n\n          return new a.Matrix(this.node.getScreenCTM());\n        }\n      }\n    }), a.Point = a.invent({\n      create: function create(t, e) {\n        var a;\n        a = Array.isArray(t) ? {\n          x: t[0],\n          y: t[1]\n        } : \"object\" === i(t) ? {\n          x: t.x,\n          y: t.y\n        } : null != t ? {\n          x: t,\n          y: null != e ? e : t\n        } : {\n          x: 0,\n          y: 0\n        }, this.x = a.x, this.y = a.y;\n      },\n      extend: {\n        clone: function clone() {\n          return new a.Point(this);\n        },\n        morph: function morph(t, e) {\n          return this.destination = new a.Point(t, e), this;\n        }\n      }\n    }), a.extend(a.Element, {\n      point: function point(t, e) {\n        return new a.Point(t, e).transform(this.screenCTM().inverse());\n      }\n    }), a.extend(a.Element, {\n      attr: function attr(t, e, s) {\n        if (null == t) {\n          for (t = {}, s = (e = this.node.attributes).length - 1; s >= 0; s--) {\n            t[e[s].nodeName] = a.regex.isNumber.test(e[s].nodeValue) ? parseFloat(e[s].nodeValue) : e[s].nodeValue;\n          }\n\n          return t;\n        }\n\n        if (\"object\" === i(t)) for (var r in t) {\n          this.attr(r, t[r]);\n        } else if (null === e) this.node.removeAttribute(t);else {\n          if (null == e) return null == (e = this.node.getAttribute(t)) ? a.defaults.attrs[t] : a.regex.isNumber.test(e) ? parseFloat(e) : e;\n          \"stroke-width\" == t ? this.attr(\"stroke\", parseFloat(e) > 0 ? this._stroke : null) : \"stroke\" == t && (this._stroke = e), \"fill\" != t && \"stroke\" != t || (a.regex.isImage.test(e) && (e = this.doc().defs().image(e, 0, 0)), e instanceof a.Image && (e = this.doc().defs().pattern(0, 0, function () {\n            this.add(e);\n          }))), \"number\" == typeof e ? e = new a.Number(e) : a.Color.isColor(e) ? e = new a.Color(e) : Array.isArray(e) && (e = new a.Array(e)), \"leading\" == t ? this.leading && this.leading(e) : \"string\" == typeof s ? this.node.setAttributeNS(s, t, e.toString()) : this.node.setAttribute(t, e.toString()), !this.rebuild || \"font-size\" != t && \"x\" != t || this.rebuild(t, e);\n        }\n        return this;\n      }\n    }), a.extend(a.Element, {\n      transform: function transform(t, e) {\n        var s;\n        return \"object\" !== i(t) ? (s = new a.Matrix(this).extract(), \"string\" == typeof t ? s[t] : s) : (s = new a.Matrix(this), e = !!e || !!t.relative, null != t.a && (s = e ? s.multiply(new a.Matrix(t)) : new a.Matrix(t)), this.attr(\"transform\", s));\n      }\n    }), a.extend(a.Element, {\n      untransform: function untransform() {\n        return this.attr(\"transform\", null);\n      },\n      matrixify: function matrixify() {\n        return (this.attr(\"transform\") || \"\").split(a.regex.transforms).slice(0, -1).map(function (t) {\n          var e = t.trim().split(\"(\");\n          return [e[0], e[1].split(a.regex.delimiter).map(function (t) {\n            return parseFloat(t);\n          })];\n        }).reduce(function (t, e) {\n          return \"matrix\" == e[0] ? t.multiply(p(e[1])) : t[e[0]].apply(t, e[1]);\n        }, new a.Matrix());\n      },\n      toParent: function toParent(t) {\n        if (this == t) return this;\n        var e = this.screenCTM(),\n            i = t.screenCTM().inverse();\n        return this.addTo(t).untransform().transform(i.multiply(e)), this;\n      },\n      toDoc: function toDoc() {\n        return this.toParent(this.doc());\n      }\n    }), a.Transformation = a.invent({\n      create: function create(t, e) {\n        if (arguments.length > 1 && \"boolean\" != typeof e) return this.constructor.call(this, [].slice.call(arguments));\n        if (Array.isArray(t)) for (var a = 0, s = this.arguments.length; a < s; ++a) {\n          this[this.arguments[a]] = t[a];\n        } else if (t && \"object\" === i(t)) for (a = 0, s = this.arguments.length; a < s; ++a) {\n          this[this.arguments[a]] = t[this.arguments[a]];\n        }\n        this.inversed = !1, !0 === e && (this.inversed = !0);\n      }\n    }), a.Translate = a.invent({\n      parent: a.Matrix,\n      inherit: a.Transformation,\n      create: function create(t, e) {\n        this.constructor.apply(this, [].slice.call(arguments));\n      },\n      extend: {\n        arguments: [\"transformedX\", \"transformedY\"],\n        method: \"translate\"\n      }\n    }), a.extend(a.Element, {\n      style: function style(t, e) {\n        if (0 == arguments.length) return this.node.style.cssText || \"\";\n        if (arguments.length < 2) {\n          if (\"object\" === i(t)) for (var s in t) {\n            this.style(s, t[s]);\n          } else {\n            if (!a.regex.isCss.test(t)) return this.node.style[c(t)];\n\n            for (t = t.split(/\\s*;\\s*/).filter(function (t) {\n              return !!t;\n            }).map(function (t) {\n              return t.split(/\\s*:\\s*/);\n            }); e = t.pop();) {\n              this.style(e[0], e[1]);\n            }\n          }\n        } else this.node.style[c(t)] = null === e || a.regex.isBlank.test(e) ? \"\" : e;\n        return this;\n      }\n    }), a.Parent = a.invent({\n      create: function create(t) {\n        this.constructor.call(this, t);\n      },\n      inherit: a.Element,\n      extend: {\n        children: function children() {\n          return a.utils.map(a.utils.filterSVGElements(this.node.childNodes), function (t) {\n            return a.adopt(t);\n          });\n        },\n        add: function add(t, e) {\n          return null == e ? this.node.appendChild(t.node) : t.node != this.node.childNodes[e] && this.node.insertBefore(t.node, this.node.childNodes[e]), this;\n        },\n        put: function put(t, e) {\n          return this.add(t, e), t;\n        },\n        has: function has(t) {\n          return this.index(t) >= 0;\n        },\n        index: function index(t) {\n          return [].slice.call(this.node.childNodes).indexOf(t.node);\n        },\n        get: function get(t) {\n          return a.adopt(this.node.childNodes[t]);\n        },\n        first: function first() {\n          return this.get(0);\n        },\n        last: function last() {\n          return this.get(this.node.childNodes.length - 1);\n        },\n        each: function each(t, e) {\n          for (var i = this.children(), s = 0, r = i.length; s < r; s++) {\n            i[s] instanceof a.Element && t.apply(i[s], [s, i]), e && i[s] instanceof a.Container && i[s].each(t, e);\n          }\n\n          return this;\n        },\n        removeElement: function removeElement(t) {\n          return this.node.removeChild(t.node), this;\n        },\n        clear: function clear() {\n          for (; this.node.hasChildNodes();) {\n            this.node.removeChild(this.node.lastChild);\n          }\n\n          return delete this._defs, this;\n        },\n        defs: function defs() {\n          return this.doc().defs();\n        }\n      }\n    }), a.extend(a.Parent, {\n      ungroup: function ungroup(t, e) {\n        return 0 === e || this instanceof a.Defs || this.node == a.parser.draw || (t = t || (this instanceof a.Doc ? this : this.parent(a.Parent)), e = e || 1 / 0, this.each(function () {\n          return this instanceof a.Defs ? this : this instanceof a.Parent ? this.ungroup(t, e - 1) : this.toParent(t);\n        }), this.node.firstChild || this.remove()), this;\n      },\n      flatten: function flatten(t, e) {\n        return this.ungroup(t, e);\n      }\n    }), a.Container = a.invent({\n      create: function create(t) {\n        this.constructor.call(this, t);\n      },\n      inherit: a.Parent\n    }), a.ViewBox = a.invent({\n      parent: a.Container,\n      construct: {}\n    }), [\"click\", \"dblclick\", \"mousedown\", \"mouseup\", \"mouseover\", \"mouseout\", \"mousemove\", \"touchstart\", \"touchmove\", \"touchleave\", \"touchend\", \"touchcancel\"].forEach(function (t) {\n      a.Element.prototype[t] = function (e) {\n        return a.on(this.node, t, e), this;\n      };\n    }), a.listeners = [], a.handlerMap = [], a.listenerId = 0, a.on = function (t, e, i, s, r) {\n      var o = i.bind(s || t.instance || t),\n          n = (a.handlerMap.indexOf(t) + 1 || a.handlerMap.push(t)) - 1,\n          l = e.split(\".\")[0],\n          h = e.split(\".\")[1] || \"*\";\n      a.listeners[n] = a.listeners[n] || {}, a.listeners[n][l] = a.listeners[n][l] || {}, a.listeners[n][l][h] = a.listeners[n][l][h] || {}, i._svgjsListenerId || (i._svgjsListenerId = ++a.listenerId), a.listeners[n][l][h][i._svgjsListenerId] = o, t.addEventListener(l, o, r || {\n        passive: !0\n      });\n    }, a.off = function (t, e, i) {\n      var s = a.handlerMap.indexOf(t),\n          r = e && e.split(\".\")[0],\n          o = e && e.split(\".\")[1],\n          n = \"\";\n      if (-1 != s) if (i) {\n        if (\"function\" == typeof i && (i = i._svgjsListenerId), !i) return;\n        a.listeners[s][r] && a.listeners[s][r][o || \"*\"] && (t.removeEventListener(r, a.listeners[s][r][o || \"*\"][i], !1), delete a.listeners[s][r][o || \"*\"][i]);\n      } else if (o && r) {\n        if (a.listeners[s][r] && a.listeners[s][r][o]) {\n          for (var l in a.listeners[s][r][o]) {\n            a.off(t, [r, o].join(\".\"), l);\n          }\n\n          delete a.listeners[s][r][o];\n        }\n      } else if (o) for (var h in a.listeners[s]) {\n        for (var n in a.listeners[s][h]) {\n          o === n && a.off(t, [h, o].join(\".\"));\n        }\n      } else if (r) {\n        if (a.listeners[s][r]) {\n          for (var n in a.listeners[s][r]) {\n            a.off(t, [r, n].join(\".\"));\n          }\n\n          delete a.listeners[s][r];\n        }\n      } else {\n        for (var h in a.listeners[s]) {\n          a.off(t, h);\n        }\n\n        delete a.listeners[s], delete a.handlerMap[s];\n      }\n    }, a.extend(a.Element, {\n      on: function on(t, e, i, s) {\n        return a.on(this.node, t, e, i, s), this;\n      },\n      off: function off(t, e) {\n        return a.off(this.node, t, e), this;\n      },\n      fire: function fire(e, i) {\n        return e instanceof t.Event ? this.node.dispatchEvent(e) : this.node.dispatchEvent(e = new a.CustomEvent(e, {\n          detail: i,\n          cancelable: !0\n        })), this._event = e, this;\n      },\n      event: function event() {\n        return this._event;\n      }\n    }), a.Defs = a.invent({\n      create: \"defs\",\n      inherit: a.Container\n    }), a.G = a.invent({\n      create: \"g\",\n      inherit: a.Container,\n      extend: {\n        x: function x(t) {\n          return null == t ? this.transform(\"x\") : this.transform({\n            x: t - this.x()\n          }, !0);\n        }\n      },\n      construct: {\n        group: function group() {\n          return this.put(new a.G());\n        }\n      }\n    }), a.Doc = a.invent({\n      create: function create(t) {\n        t && (\"svg\" == (t = \"string\" == typeof t ? e.getElementById(t) : t).nodeName ? this.constructor.call(this, t) : (this.constructor.call(this, a.create(\"svg\")), t.appendChild(this.node), this.size(\"100%\", \"100%\")), this.namespace().defs());\n      },\n      inherit: a.Container,\n      extend: {\n        namespace: function namespace() {\n          return this.attr({\n            xmlns: a.ns,\n            version: \"1.1\"\n          }).attr(\"xmlns:xlink\", a.xlink, a.xmlns).attr(\"xmlns:svgjs\", a.svgjs, a.xmlns);\n        },\n        defs: function defs() {\n          var t;\n          return this._defs || ((t = this.node.getElementsByTagName(\"defs\")[0]) ? this._defs = a.adopt(t) : this._defs = new a.Defs(), this.node.appendChild(this._defs.node)), this._defs;\n        },\n        parent: function parent() {\n          return this.node.parentNode && \"#document\" != this.node.parentNode.nodeName ? this.node.parentNode : null;\n        },\n        remove: function remove() {\n          return this.parent() && this.parent().removeChild(this.node), this;\n        },\n        clear: function clear() {\n          for (; this.node.hasChildNodes();) {\n            this.node.removeChild(this.node.lastChild);\n          }\n\n          return delete this._defs, a.parser.draw && !a.parser.draw.parentNode && this.node.appendChild(a.parser.draw), this;\n        },\n        clone: function clone(t) {\n          this.writeDataToDom();\n          var e = this.node,\n              i = x(e.cloneNode(!0));\n          return t ? (t.node || t).appendChild(i.node) : e.parentNode.insertBefore(i.node, e.nextSibling), i;\n        }\n      }\n    }), a.extend(a.Element, {}), a.Gradient = a.invent({\n      create: function create(t) {\n        this.constructor.call(this, a.create(t + \"Gradient\")), this.type = t;\n      },\n      inherit: a.Container,\n      extend: {\n        at: function at(t, e, i) {\n          return this.put(new a.Stop()).update(t, e, i);\n        },\n        update: function update(t) {\n          return this.clear(), \"function\" == typeof t && t.call(this, this), this;\n        },\n        fill: function fill() {\n          return \"url(#\" + this.id() + \")\";\n        },\n        toString: function toString() {\n          return this.fill();\n        },\n        attr: function attr(t, e, i) {\n          return \"transform\" == t && (t = \"gradientTransform\"), a.Container.prototype.attr.call(this, t, e, i);\n        }\n      },\n      construct: {\n        gradient: function gradient(t, e) {\n          return this.defs().gradient(t, e);\n        }\n      }\n    }), a.extend(a.Gradient, a.FX, {\n      from: function from(t, e) {\n        return \"radial\" == (this._target || this).type ? this.attr({\n          fx: new a.Number(t),\n          fy: new a.Number(e)\n        }) : this.attr({\n          x1: new a.Number(t),\n          y1: new a.Number(e)\n        });\n      },\n      to: function to(t, e) {\n        return \"radial\" == (this._target || this).type ? this.attr({\n          cx: new a.Number(t),\n          cy: new a.Number(e)\n        }) : this.attr({\n          x2: new a.Number(t),\n          y2: new a.Number(e)\n        });\n      }\n    }), a.extend(a.Defs, {\n      gradient: function gradient(t, e) {\n        return this.put(new a.Gradient(t)).update(e);\n      }\n    }), a.Stop = a.invent({\n      create: \"stop\",\n      inherit: a.Element,\n      extend: {\n        update: function update(t) {\n          return (\"number\" == typeof t || t instanceof a.Number) && (t = {\n            offset: arguments[0],\n            color: arguments[1],\n            opacity: arguments[2]\n          }), null != t.opacity && this.attr(\"stop-opacity\", t.opacity), null != t.color && this.attr(\"stop-color\", t.color), null != t.offset && this.attr(\"offset\", new a.Number(t.offset)), this;\n        }\n      }\n    }), a.Pattern = a.invent({\n      create: \"pattern\",\n      inherit: a.Container,\n      extend: {\n        fill: function fill() {\n          return \"url(#\" + this.id() + \")\";\n        },\n        update: function update(t) {\n          return this.clear(), \"function\" == typeof t && t.call(this, this), this;\n        },\n        toString: function toString() {\n          return this.fill();\n        },\n        attr: function attr(t, e, i) {\n          return \"transform\" == t && (t = \"patternTransform\"), a.Container.prototype.attr.call(this, t, e, i);\n        }\n      },\n      construct: {\n        pattern: function pattern(t, e, i) {\n          return this.defs().pattern(t, e, i);\n        }\n      }\n    }), a.extend(a.Defs, {\n      pattern: function pattern(t, e, i) {\n        return this.put(new a.Pattern()).update(i).attr({\n          x: 0,\n          y: 0,\n          width: t,\n          height: e,\n          patternUnits: \"userSpaceOnUse\"\n        });\n      }\n    }), a.Shape = a.invent({\n      create: function create(t) {\n        this.constructor.call(this, t);\n      },\n      inherit: a.Element\n    }), a.Symbol = a.invent({\n      create: \"symbol\",\n      inherit: a.Container,\n      construct: {\n        symbol: function symbol() {\n          return this.put(new a.Symbol());\n        }\n      }\n    }), a.Use = a.invent({\n      create: \"use\",\n      inherit: a.Shape,\n      extend: {\n        element: function element(t, e) {\n          return this.attr(\"href\", (e || \"\") + \"#\" + t, a.xlink);\n        }\n      },\n      construct: {\n        use: function use(t, e) {\n          return this.put(new a.Use()).element(t, e);\n        }\n      }\n    }), a.Rect = a.invent({\n      create: \"rect\",\n      inherit: a.Shape,\n      construct: {\n        rect: function rect(t, e) {\n          return this.put(new a.Rect()).size(t, e);\n        }\n      }\n    }), a.Circle = a.invent({\n      create: \"circle\",\n      inherit: a.Shape,\n      construct: {\n        circle: function circle(t) {\n          return this.put(new a.Circle()).rx(new a.Number(t).divide(2)).move(0, 0);\n        }\n      }\n    }), a.extend(a.Circle, a.FX, {\n      rx: function rx(t) {\n        return this.attr(\"r\", t);\n      },\n      ry: function ry(t) {\n        return this.rx(t);\n      }\n    }), a.Ellipse = a.invent({\n      create: \"ellipse\",\n      inherit: a.Shape,\n      construct: {\n        ellipse: function ellipse(t, e) {\n          return this.put(new a.Ellipse()).size(t, e).move(0, 0);\n        }\n      }\n    }), a.extend(a.Ellipse, a.Rect, a.FX, {\n      rx: function rx(t) {\n        return this.attr(\"rx\", t);\n      },\n      ry: function ry(t) {\n        return this.attr(\"ry\", t);\n      }\n    }), a.extend(a.Circle, a.Ellipse, {\n      x: function x(t) {\n        return null == t ? this.cx() - this.rx() : this.cx(t + this.rx());\n      },\n      y: function y(t) {\n        return null == t ? this.cy() - this.ry() : this.cy(t + this.ry());\n      },\n      cx: function cx(t) {\n        return null == t ? this.attr(\"cx\") : this.attr(\"cx\", t);\n      },\n      cy: function cy(t) {\n        return null == t ? this.attr(\"cy\") : this.attr(\"cy\", t);\n      },\n      width: function width(t) {\n        return null == t ? 2 * this.rx() : this.rx(new a.Number(t).divide(2));\n      },\n      height: function height(t) {\n        return null == t ? 2 * this.ry() : this.ry(new a.Number(t).divide(2));\n      },\n      size: function size(t, e) {\n        var i = u(this, t, e);\n        return this.rx(new a.Number(i.width).divide(2)).ry(new a.Number(i.height).divide(2));\n      }\n    }), a.Line = a.invent({\n      create: \"line\",\n      inherit: a.Shape,\n      extend: {\n        array: function array() {\n          return new a.PointArray([[this.attr(\"x1\"), this.attr(\"y1\")], [this.attr(\"x2\"), this.attr(\"y2\")]]);\n        },\n        plot: function plot(t, e, i, s) {\n          return null == t ? this.array() : (t = void 0 !== e ? {\n            x1: t,\n            y1: e,\n            x2: i,\n            y2: s\n          } : new a.PointArray(t).toLine(), this.attr(t));\n        },\n        move: function move(t, e) {\n          return this.attr(this.array().move(t, e).toLine());\n        },\n        size: function size(t, e) {\n          var i = u(this, t, e);\n          return this.attr(this.array().size(i.width, i.height).toLine());\n        }\n      },\n      construct: {\n        line: function line(t, e, i, s) {\n          return a.Line.prototype.plot.apply(this.put(new a.Line()), null != t ? [t, e, i, s] : [0, 0, 0, 0]);\n        }\n      }\n    }), a.Polyline = a.invent({\n      create: \"polyline\",\n      inherit: a.Shape,\n      construct: {\n        polyline: function polyline(t) {\n          return this.put(new a.Polyline()).plot(t || new a.PointArray());\n        }\n      }\n    }), a.Polygon = a.invent({\n      create: \"polygon\",\n      inherit: a.Shape,\n      construct: {\n        polygon: function polygon(t) {\n          return this.put(new a.Polygon()).plot(t || new a.PointArray());\n        }\n      }\n    }), a.extend(a.Polyline, a.Polygon, {\n      array: function array() {\n        return this._array || (this._array = new a.PointArray(this.attr(\"points\")));\n      },\n      plot: function plot(t) {\n        return null == t ? this.array() : this.clear().attr(\"points\", \"string\" == typeof t ? t : this._array = new a.PointArray(t));\n      },\n      clear: function clear() {\n        return delete this._array, this;\n      },\n      move: function move(t, e) {\n        return this.attr(\"points\", this.array().move(t, e));\n      },\n      size: function size(t, e) {\n        var i = u(this, t, e);\n        return this.attr(\"points\", this.array().size(i.width, i.height));\n      }\n    }), a.extend(a.Line, a.Polyline, a.Polygon, {\n      morphArray: a.PointArray,\n      x: function x(t) {\n        return null == t ? this.bbox().x : this.move(t, this.bbox().y);\n      },\n      y: function y(t) {\n        return null == t ? this.bbox().y : this.move(this.bbox().x, t);\n      },\n      width: function width(t) {\n        var e = this.bbox();\n        return null == t ? e.width : this.size(t, e.height);\n      },\n      height: function height(t) {\n        var e = this.bbox();\n        return null == t ? e.height : this.size(e.width, t);\n      }\n    }), a.Path = a.invent({\n      create: \"path\",\n      inherit: a.Shape,\n      extend: {\n        morphArray: a.PathArray,\n        array: function array() {\n          return this._array || (this._array = new a.PathArray(this.attr(\"d\")));\n        },\n        plot: function plot(t) {\n          return null == t ? this.array() : this.clear().attr(\"d\", \"string\" == typeof t ? t : this._array = new a.PathArray(t));\n        },\n        clear: function clear() {\n          return delete this._array, this;\n        }\n      },\n      construct: {\n        path: function path(t) {\n          return this.put(new a.Path()).plot(t || new a.PathArray());\n        }\n      }\n    }), a.Image = a.invent({\n      create: \"image\",\n      inherit: a.Shape,\n      extend: {\n        load: function load(e) {\n          if (!e) return this;\n          var i = this,\n              s = new t.Image();\n          return a.on(s, \"load\", function () {\n            a.off(s);\n            var t = i.parent(a.Pattern);\n            null !== t && (0 == i.width() && 0 == i.height() && i.size(s.width, s.height), t && 0 == t.width() && 0 == t.height() && t.size(i.width(), i.height()), \"function\" == typeof i._loaded && i._loaded.call(i, {\n              width: s.width,\n              height: s.height,\n              ratio: s.width / s.height,\n              url: e\n            }));\n          }), a.on(s, \"error\", function (t) {\n            a.off(s), \"function\" == typeof i._error && i._error.call(i, t);\n          }), this.attr(\"href\", s.src = this.src = e, a.xlink);\n        },\n        loaded: function loaded(t) {\n          return this._loaded = t, this;\n        },\n        error: function error(t) {\n          return this._error = t, this;\n        }\n      },\n      construct: {\n        image: function image(t, e, i) {\n          return this.put(new a.Image()).load(t).size(e || 0, i || e || 0);\n        }\n      }\n    }), a.Text = a.invent({\n      create: function create() {\n        this.constructor.call(this, a.create(\"text\")), this.dom.leading = new a.Number(1.3), this._rebuild = !0, this._build = !1, this.attr(\"font-family\", a.defaults.attrs[\"font-family\"]);\n      },\n      inherit: a.Shape,\n      extend: {\n        x: function x(t) {\n          return null == t ? this.attr(\"x\") : this.attr(\"x\", t);\n        },\n        text: function text(t) {\n          if (void 0 === t) {\n            t = \"\";\n\n            for (var e = this.node.childNodes, i = 0, s = e.length; i < s; ++i) {\n              0 != i && 3 != e[i].nodeType && 1 == a.adopt(e[i]).dom.newLined && (t += \"\\n\"), t += e[i].textContent;\n            }\n\n            return t;\n          }\n\n          if (this.clear().build(!0), \"function\" == typeof t) t.call(this, this);else {\n            i = 0;\n\n            for (var r = (t = t.split(\"\\n\")).length; i < r; i++) {\n              this.tspan(t[i]).newLine();\n            }\n          }\n          return this.build(!1).rebuild();\n        },\n        size: function size(t) {\n          return this.attr(\"font-size\", t).rebuild();\n        },\n        leading: function leading(t) {\n          return null == t ? this.dom.leading : (this.dom.leading = new a.Number(t), this.rebuild());\n        },\n        lines: function lines() {\n          var t = (this.textPath && this.textPath() || this).node,\n              e = a.utils.map(a.utils.filterSVGElements(t.childNodes), function (t) {\n            return a.adopt(t);\n          });\n          return new a.Set(e);\n        },\n        rebuild: function rebuild(t) {\n          if (\"boolean\" == typeof t && (this._rebuild = t), this._rebuild) {\n            var e = this,\n                i = 0,\n                s = this.dom.leading * new a.Number(this.attr(\"font-size\"));\n            this.lines().each(function () {\n              this.dom.newLined && (e.textPath() || this.attr(\"x\", e.attr(\"x\")), \"\\n\" == this.text() ? i += s : (this.attr(\"dy\", s + i), i = 0));\n            }), this.fire(\"rebuild\");\n          }\n\n          return this;\n        },\n        build: function build(t) {\n          return this._build = !!t, this;\n        },\n        setData: function setData(t) {\n          return this.dom = t, this.dom.leading = new a.Number(t.leading || 1.3), this;\n        }\n      },\n      construct: {\n        text: function text(t) {\n          return this.put(new a.Text()).text(t);\n        },\n        plain: function plain(t) {\n          return this.put(new a.Text()).plain(t);\n        }\n      }\n    }), a.Tspan = a.invent({\n      create: \"tspan\",\n      inherit: a.Shape,\n      extend: {\n        text: function text(t) {\n          return null == t ? this.node.textContent + (this.dom.newLined ? \"\\n\" : \"\") : (\"function\" == typeof t ? t.call(this, this) : this.plain(t), this);\n        },\n        dx: function dx(t) {\n          return this.attr(\"dx\", t);\n        },\n        dy: function dy(t) {\n          return this.attr(\"dy\", t);\n        },\n        newLine: function newLine() {\n          var t = this.parent(a.Text);\n          return this.dom.newLined = !0, this.dy(t.dom.leading * t.attr(\"font-size\")).attr(\"x\", t.x());\n        }\n      }\n    }), a.extend(a.Text, a.Tspan, {\n      plain: function plain(t) {\n        return !1 === this._build && this.clear(), this.node.appendChild(e.createTextNode(t)), this;\n      },\n      tspan: function tspan(t) {\n        var e = (this.textPath && this.textPath() || this).node,\n            i = new a.Tspan();\n        return !1 === this._build && this.clear(), e.appendChild(i.node), i.text(t);\n      },\n      clear: function clear() {\n        for (var t = (this.textPath && this.textPath() || this).node; t.hasChildNodes();) {\n          t.removeChild(t.lastChild);\n        }\n\n        return this;\n      },\n      length: function length() {\n        return this.node.getComputedTextLength();\n      }\n    }), a.TextPath = a.invent({\n      create: \"textPath\",\n      inherit: a.Parent,\n      parent: a.Text,\n      construct: {\n        morphArray: a.PathArray,\n        array: function array() {\n          var t = this.track();\n          return t ? t.array() : null;\n        },\n        plot: function plot(t) {\n          var e = this.track(),\n              i = null;\n          return e && (i = e.plot(t)), null == t ? i : this;\n        },\n        track: function track() {\n          var t = this.textPath();\n          if (t) return t.reference(\"href\");\n        },\n        textPath: function textPath() {\n          if (this.node.firstChild && \"textPath\" == this.node.firstChild.nodeName) return a.adopt(this.node.firstChild);\n        }\n      }\n    }), a.Nested = a.invent({\n      create: function create() {\n        this.constructor.call(this, a.create(\"svg\")), this.style(\"overflow\", \"visible\");\n      },\n      inherit: a.Container,\n      construct: {\n        nested: function nested() {\n          return this.put(new a.Nested());\n        }\n      }\n    });\n    var l = {\n      stroke: [\"color\", \"width\", \"opacity\", \"linecap\", \"linejoin\", \"miterlimit\", \"dasharray\", \"dashoffset\"],\n      fill: [\"color\", \"opacity\", \"rule\"],\n      prefix: function prefix(t, e) {\n        return \"color\" == e ? t : t + \"-\" + e;\n      }\n    };\n\n    function h(t, e, i, s) {\n      return i + s.replace(a.regex.dots, \" .\");\n    }\n\n    function c(t) {\n      return t.toLowerCase().replace(/-(.)/g, function (t, e) {\n        return e.toUpperCase();\n      });\n    }\n\n    function d(t) {\n      return t.charAt(0).toUpperCase() + t.slice(1);\n    }\n\n    function g(t) {\n      var e = t.toString(16);\n      return 1 == e.length ? \"0\" + e : e;\n    }\n\n    function u(t, e, i) {\n      if (null == e || null == i) {\n        var a = t.bbox();\n        null == e ? e = a.width / a.height * i : null == i && (i = a.height / a.width * e);\n      }\n\n      return {\n        width: e,\n        height: i\n      };\n    }\n\n    function f(t, e, i) {\n      return {\n        x: e * t.a + i * t.c + 0,\n        y: e * t.b + i * t.d + 0\n      };\n    }\n\n    function p(t) {\n      return {\n        a: t[0],\n        b: t[1],\n        c: t[2],\n        d: t[3],\n        e: t[4],\n        f: t[5]\n      };\n    }\n\n    function x(e) {\n      for (var i = e.childNodes.length - 1; i >= 0; i--) {\n        e.childNodes[i] instanceof t.SVGElement && x(e.childNodes[i]);\n      }\n\n      return a.adopt(e).id(a.eid(e.nodeName));\n    }\n\n    function b(t) {\n      return null == t.x && (t.x = 0, t.y = 0, t.width = 0, t.height = 0), t.w = t.width, t.h = t.height, t.x2 = t.x + t.width, t.y2 = t.y + t.height, t.cx = t.x + t.width / 2, t.cy = t.y + t.height / 2, t;\n    }\n\n    function v(t) {\n      return Math.abs(t) > 1e-37 ? t : 0;\n    }\n\n    [\"fill\", \"stroke\"].forEach(function (t) {\n      var e = {};\n      e[t] = function (e) {\n        if (void 0 === e) return this;\n        if (\"string\" == typeof e || a.Color.isRgb(e) || e && \"function\" == typeof e.fill) this.attr(t, e);else for (var i = l[t].length - 1; i >= 0; i--) {\n          null != e[l[t][i]] && this.attr(l.prefix(t, l[t][i]), e[l[t][i]]);\n        }\n        return this;\n      }, a.extend(a.Element, a.FX, e);\n    }), a.extend(a.Element, a.FX, {\n      translate: function translate(t, e) {\n        return this.transform({\n          x: t,\n          y: e\n        });\n      },\n      matrix: function matrix(t) {\n        return this.attr(\"transform\", new a.Matrix(6 == arguments.length ? [].slice.call(arguments) : t));\n      },\n      opacity: function opacity(t) {\n        return this.attr(\"opacity\", t);\n      },\n      dx: function dx(t) {\n        return this.x(new a.Number(t).plus(this instanceof a.FX ? 0 : this.x()), !0);\n      },\n      dy: function dy(t) {\n        return this.y(new a.Number(t).plus(this instanceof a.FX ? 0 : this.y()), !0);\n      }\n    }), a.extend(a.Path, {\n      length: function length() {\n        return this.node.getTotalLength();\n      },\n      pointAt: function pointAt(t) {\n        return this.node.getPointAtLength(t);\n      }\n    }), a.Set = a.invent({\n      create: function create(t) {\n        Array.isArray(t) ? this.members = t : this.clear();\n      },\n      extend: {\n        add: function add() {\n          for (var t = [].slice.call(arguments), e = 0, i = t.length; e < i; e++) {\n            this.members.push(t[e]);\n          }\n\n          return this;\n        },\n        remove: function remove(t) {\n          var e = this.index(t);\n          return e > -1 && this.members.splice(e, 1), this;\n        },\n        each: function each(t) {\n          for (var e = 0, i = this.members.length; e < i; e++) {\n            t.apply(this.members[e], [e, this.members]);\n          }\n\n          return this;\n        },\n        clear: function clear() {\n          return this.members = [], this;\n        },\n        length: function length() {\n          return this.members.length;\n        },\n        has: function has(t) {\n          return this.index(t) >= 0;\n        },\n        index: function index(t) {\n          return this.members.indexOf(t);\n        },\n        get: function get(t) {\n          return this.members[t];\n        },\n        first: function first() {\n          return this.get(0);\n        },\n        last: function last() {\n          return this.get(this.members.length - 1);\n        },\n        valueOf: function valueOf() {\n          return this.members;\n        }\n      },\n      construct: {\n        set: function set(t) {\n          return new a.Set(t);\n        }\n      }\n    }), a.FX.Set = a.invent({\n      create: function create(t) {\n        this.set = t;\n      }\n    }), a.Set.inherit = function () {\n      var t = [];\n\n      for (var e in a.Shape.prototype) {\n        \"function\" == typeof a.Shape.prototype[e] && \"function\" != typeof a.Set.prototype[e] && t.push(e);\n      }\n\n      for (var e in t.forEach(function (t) {\n        a.Set.prototype[t] = function () {\n          for (var e = 0, i = this.members.length; e < i; e++) {\n            this.members[e] && \"function\" == typeof this.members[e][t] && this.members[e][t].apply(this.members[e], arguments);\n          }\n\n          return \"animate\" == t ? this.fx || (this.fx = new a.FX.Set(this)) : this;\n        };\n      }), t = [], a.FX.prototype) {\n        \"function\" == typeof a.FX.prototype[e] && \"function\" != typeof a.FX.Set.prototype[e] && t.push(e);\n      }\n\n      t.forEach(function (t) {\n        a.FX.Set.prototype[t] = function () {\n          for (var e = 0, i = this.set.members.length; e < i; e++) {\n            this.set.members[e].fx[t].apply(this.set.members[e].fx, arguments);\n          }\n\n          return this;\n        };\n      });\n    }, a.extend(a.Element, {}), a.extend(a.Element, {\n      remember: function remember(t, e) {\n        if (\"object\" === i(arguments[0])) for (var a in t) {\n          this.remember(a, t[a]);\n        } else {\n          if (1 == arguments.length) return this.memory()[t];\n          this.memory()[t] = e;\n        }\n        return this;\n      },\n      forget: function forget() {\n        if (0 == arguments.length) this._memory = {};else for (var t = arguments.length - 1; t >= 0; t--) {\n          delete this.memory()[arguments[t]];\n        }\n        return this;\n      },\n      memory: function memory() {\n        return this._memory || (this._memory = {});\n      }\n    }), a.get = function (t) {\n      var i = e.getElementById(function (t) {\n        var e = (t || \"\").toString().match(a.regex.reference);\n        if (e) return e[1];\n      }(t) || t);\n      return a.adopt(i);\n    }, a.select = function (t, i) {\n      return new a.Set(a.utils.map((i || e).querySelectorAll(t), function (t) {\n        return a.adopt(t);\n      }));\n    }, a.extend(a.Parent, {\n      select: function select(t) {\n        return a.select(t, this.node);\n      }\n    });\n    var m = \"abcdef\".split(\"\");\n\n    if (\"function\" != typeof t.CustomEvent) {\n      var y = function y(t, i) {\n        i = i || {\n          bubbles: !1,\n          cancelable: !1,\n          detail: void 0\n        };\n        var a = e.createEvent(\"CustomEvent\");\n        return a.initCustomEvent(t, i.bubbles, i.cancelable, i.detail), a;\n      };\n\n      y.prototype = t.Event.prototype, a.CustomEvent = y;\n    } else a.CustomEvent = t.CustomEvent;\n\n    return a;\n  },  true ? !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    return zt(It, It.document);\n  }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0,\n  /*! svg.filter.js - v2.0.2 - 2016-02-24\r\n    * https://github.com/wout/svg.filter.js\r\n    * Copyright (c) 2016 Wout Fierens; Licensed MIT */\n  function () {\n    SVG.Filter = SVG.invent({\n      create: \"filter\",\n      inherit: SVG.Parent,\n      extend: {\n        source: \"SourceGraphic\",\n        sourceAlpha: \"SourceAlpha\",\n        background: \"BackgroundImage\",\n        backgroundAlpha: \"BackgroundAlpha\",\n        fill: \"FillPaint\",\n        stroke: \"StrokePaint\",\n        autoSetIn: !0,\n        put: function put(t, e) {\n          return this.add(t, e), !t.attr(\"in\") && this.autoSetIn && t.attr(\"in\", this.source), t.attr(\"result\") || t.attr(\"result\", t), t;\n        },\n        blend: function blend(t, e, i) {\n          return this.put(new SVG.BlendEffect(t, e, i));\n        },\n        colorMatrix: function colorMatrix(t, e) {\n          return this.put(new SVG.ColorMatrixEffect(t, e));\n        },\n        convolveMatrix: function convolveMatrix(t) {\n          return this.put(new SVG.ConvolveMatrixEffect(t));\n        },\n        componentTransfer: function componentTransfer(t) {\n          return this.put(new SVG.ComponentTransferEffect(t));\n        },\n        composite: function composite(t, e, i) {\n          return this.put(new SVG.CompositeEffect(t, e, i));\n        },\n        flood: function flood(t, e) {\n          return this.put(new SVG.FloodEffect(t, e));\n        },\n        offset: function offset(t, e) {\n          return this.put(new SVG.OffsetEffect(t, e));\n        },\n        image: function image(t) {\n          return this.put(new SVG.ImageEffect(t));\n        },\n        merge: function merge() {\n          var t = [void 0];\n\n          for (var e in arguments) {\n            t.push(arguments[e]);\n          }\n\n          return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, t))());\n        },\n        gaussianBlur: function gaussianBlur(t, e) {\n          return this.put(new SVG.GaussianBlurEffect(t, e));\n        },\n        morphology: function morphology(t, e) {\n          return this.put(new SVG.MorphologyEffect(t, e));\n        },\n        diffuseLighting: function diffuseLighting(t, e, i) {\n          return this.put(new SVG.DiffuseLightingEffect(t, e, i));\n        },\n        displacementMap: function displacementMap(t, e, i, a, s) {\n          return this.put(new SVG.DisplacementMapEffect(t, e, i, a, s));\n        },\n        specularLighting: function specularLighting(t, e, i, a) {\n          return this.put(new SVG.SpecularLightingEffect(t, e, i, a));\n        },\n        tile: function tile() {\n          return this.put(new SVG.TileEffect());\n        },\n        turbulence: function turbulence(t, e, i, a, s) {\n          return this.put(new SVG.TurbulenceEffect(t, e, i, a, s));\n        },\n        toString: function toString() {\n          return \"url(#\" + this.attr(\"id\") + \")\";\n        }\n      }\n    }), SVG.extend(SVG.Defs, {\n      filter: function filter(t) {\n        var e = this.put(new SVG.Filter());\n        return \"function\" == typeof t && t.call(e, e), e;\n      }\n    }), SVG.extend(SVG.Container, {\n      filter: function filter(t) {\n        return this.defs().filter(t);\n      }\n    }), SVG.extend(SVG.Element, SVG.G, SVG.Nested, {\n      filter: function filter(t) {\n        return this.filterer = t instanceof SVG.Element ? t : this.doc().filter(t), this.doc() && this.filterer.doc() !== this.doc() && this.doc().defs().add(this.filterer), this.attr(\"filter\", this.filterer), this.filterer;\n      },\n      unfilter: function unfilter(t) {\n        return this.filterer && !0 === t && this.filterer.remove(), delete this.filterer, this.attr(\"filter\", null);\n      }\n    }), SVG.Effect = SVG.invent({\n      create: function create() {\n        this.constructor.call(this);\n      },\n      inherit: SVG.Element,\n      extend: {\n        \"in\": function _in(t) {\n          return null == t ? this.parent() && this.parent().select('[result=\"' + this.attr(\"in\") + '\"]').get(0) || this.attr(\"in\") : this.attr(\"in\", t);\n        },\n        result: function result(t) {\n          return null == t ? this.attr(\"result\") : this.attr(\"result\", t);\n        },\n        toString: function toString() {\n          return this.result();\n        }\n      }\n    }), SVG.ParentEffect = SVG.invent({\n      create: function create() {\n        this.constructor.call(this);\n      },\n      inherit: SVG.Parent,\n      extend: {\n        \"in\": function _in(t) {\n          return null == t ? this.parent() && this.parent().select('[result=\"' + this.attr(\"in\") + '\"]').get(0) || this.attr(\"in\") : this.attr(\"in\", t);\n        },\n        result: function result(t) {\n          return null == t ? this.attr(\"result\") : this.attr(\"result\", t);\n        },\n        toString: function toString() {\n          return this.result();\n        }\n      }\n    });\n    var t = {\n      blend: function blend(t, e) {\n        return this.parent() && this.parent().blend(this, t, e);\n      },\n      colorMatrix: function colorMatrix(t, e) {\n        return this.parent() && this.parent().colorMatrix(t, e)[\"in\"](this);\n      },\n      convolveMatrix: function convolveMatrix(t) {\n        return this.parent() && this.parent().convolveMatrix(t)[\"in\"](this);\n      },\n      componentTransfer: function componentTransfer(t) {\n        return this.parent() && this.parent().componentTransfer(t)[\"in\"](this);\n      },\n      composite: function composite(t, e) {\n        return this.parent() && this.parent().composite(this, t, e);\n      },\n      flood: function flood(t, e) {\n        return this.parent() && this.parent().flood(t, e);\n      },\n      offset: function offset(t, e) {\n        return this.parent() && this.parent().offset(t, e)[\"in\"](this);\n      },\n      image: function image(t) {\n        return this.parent() && this.parent().image(t);\n      },\n      merge: function merge() {\n        return this.parent() && this.parent().merge.apply(this.parent(), [this].concat(arguments));\n      },\n      gaussianBlur: function gaussianBlur(t, e) {\n        return this.parent() && this.parent().gaussianBlur(t, e)[\"in\"](this);\n      },\n      morphology: function morphology(t, e) {\n        return this.parent() && this.parent().morphology(t, e)[\"in\"](this);\n      },\n      diffuseLighting: function diffuseLighting(t, e, i) {\n        return this.parent() && this.parent().diffuseLighting(t, e, i)[\"in\"](this);\n      },\n      displacementMap: function displacementMap(t, e, i, a) {\n        return this.parent() && this.parent().displacementMap(this, t, e, i, a);\n      },\n      specularLighting: function specularLighting(t, e, i, a) {\n        return this.parent() && this.parent().specularLighting(t, e, i, a)[\"in\"](this);\n      },\n      tile: function tile() {\n        return this.parent() && this.parent().tile()[\"in\"](this);\n      },\n      turbulence: function turbulence(t, e, i, a, s) {\n        return this.parent() && this.parent().turbulence(t, e, i, a, s)[\"in\"](this);\n      }\n    };\n    SVG.extend(SVG.Effect, t), SVG.extend(SVG.ParentEffect, t), SVG.ChildEffect = SVG.invent({\n      create: function create() {\n        this.constructor.call(this);\n      },\n      inherit: SVG.Element,\n      extend: {\n        \"in\": function _in(t) {\n          this.attr(\"in\", t);\n        }\n      }\n    });\n    var e = {\n      blend: function blend(t, e, i) {\n        this.attr({\n          \"in\": t,\n          in2: e,\n          mode: i || \"normal\"\n        });\n      },\n      colorMatrix: function colorMatrix(t, e) {\n        \"matrix\" == t && (e = s(e)), this.attr({\n          type: t,\n          values: void 0 === e ? null : e\n        });\n      },\n      convolveMatrix: function convolveMatrix(t) {\n        t = s(t), this.attr({\n          order: Math.sqrt(t.split(\" \").length),\n          kernelMatrix: t\n        });\n      },\n      composite: function composite(t, e, i) {\n        this.attr({\n          \"in\": t,\n          in2: e,\n          operator: i\n        });\n      },\n      flood: function flood(t, e) {\n        this.attr(\"flood-color\", t), null != e && this.attr(\"flood-opacity\", e);\n      },\n      offset: function offset(t, e) {\n        this.attr({\n          dx: t,\n          dy: e\n        });\n      },\n      image: function image(t) {\n        this.attr(\"href\", t, SVG.xlink);\n      },\n      displacementMap: function displacementMap(t, e, i, a, s) {\n        this.attr({\n          \"in\": t,\n          in2: e,\n          scale: i,\n          xChannelSelector: a,\n          yChannelSelector: s\n        });\n      },\n      gaussianBlur: function gaussianBlur(t, e) {\n        null != t || null != e ? this.attr(\"stdDeviation\", r(Array.prototype.slice.call(arguments))) : this.attr(\"stdDeviation\", \"0 0\");\n      },\n      morphology: function morphology(t, e) {\n        this.attr({\n          operator: t,\n          radius: e\n        });\n      },\n      tile: function tile() {},\n      turbulence: function turbulence(t, e, i, a, s) {\n        this.attr({\n          numOctaves: e,\n          seed: i,\n          stitchTiles: a,\n          baseFrequency: t,\n          type: s\n        });\n      }\n    },\n        i = {\n      merge: function merge() {\n        var t;\n\n        if (arguments[0] instanceof SVG.Set) {\n          var e = this;\n          arguments[0].each(function (t) {\n            this instanceof SVG.MergeNode ? e.put(this) : (this instanceof SVG.Effect || this instanceof SVG.ParentEffect) && e.put(new SVG.MergeNode(this));\n          });\n        } else {\n          t = Array.isArray(arguments[0]) ? arguments[0] : arguments;\n\n          for (var i = 0; i < t.length; i++) {\n            t[i] instanceof SVG.MergeNode ? this.put(t[i]) : this.put(new SVG.MergeNode(t[i]));\n          }\n        }\n      },\n      componentTransfer: function componentTransfer(t) {\n        if (this.rgb = new SVG.Set(), [\"r\", \"g\", \"b\", \"a\"].forEach(function (t) {\n          this[t] = new SVG[\"Func\" + t.toUpperCase()](\"identity\"), this.rgb.add(this[t]), this.node.appendChild(this[t].node);\n        }.bind(this)), t) for (var e in t.rgb && ([\"r\", \"g\", \"b\"].forEach(function (e) {\n          this[e].attr(t.rgb);\n        }.bind(this)), delete t.rgb), t) {\n          this[e].attr(t[e]);\n        }\n      },\n      diffuseLighting: function diffuseLighting(t, e, i) {\n        this.attr({\n          surfaceScale: t,\n          diffuseConstant: e,\n          kernelUnitLength: i\n        });\n      },\n      specularLighting: function specularLighting(t, e, i, a) {\n        this.attr({\n          surfaceScale: t,\n          diffuseConstant: e,\n          specularExponent: i,\n          kernelUnitLength: a\n        });\n      }\n    },\n        a = {\n      distantLight: function distantLight(t, e) {\n        this.attr({\n          azimuth: t,\n          elevation: e\n        });\n      },\n      pointLight: function pointLight(t, e, i) {\n        this.attr({\n          x: t,\n          y: e,\n          z: i\n        });\n      },\n      spotLight: function spotLight(t, e, i, a, s, r) {\n        this.attr({\n          x: t,\n          y: e,\n          z: i,\n          pointsAtX: a,\n          pointsAtY: s,\n          pointsAtZ: r\n        });\n      },\n      mergeNode: function mergeNode(t) {\n        this.attr(\"in\", t);\n      }\n    };\n\n    function s(t) {\n      return Array.isArray(t) && (t = new SVG.Array(t)), t.toString().replace(/^\\s+/, \"\").replace(/\\s+$/, \"\").replace(/\\s+/g, \" \");\n    }\n\n    function r(t) {\n      if (!Array.isArray(t)) return t;\n\n      for (var e = 0, i = t.length, a = []; e < i; e++) {\n        a.push(t[e]);\n      }\n\n      return a.join(\" \");\n    }\n\n    function o() {\n      var t = function t() {};\n\n      for (var e in \"function\" == typeof arguments[arguments.length - 1] && (t = arguments[arguments.length - 1], Array.prototype.splice.call(arguments, arguments.length - 1, 1)), arguments) {\n        for (var i in arguments[e]) {\n          t(arguments[e][i], i, arguments[e]);\n        }\n      }\n    }\n\n    [\"r\", \"g\", \"b\", \"a\"].forEach(function (t) {\n      a[\"Func\" + t.toUpperCase()] = function (t) {\n        switch (this.attr(\"type\", t), t) {\n          case \"table\":\n            this.attr(\"tableValues\", arguments[1]);\n            break;\n\n          case \"linear\":\n            this.attr(\"slope\", arguments[1]), this.attr(\"intercept\", arguments[2]);\n            break;\n\n          case \"gamma\":\n            this.attr(\"amplitude\", arguments[1]), this.attr(\"exponent\", arguments[2]), this.attr(\"offset\", arguments[2]);\n        }\n      };\n    }), o(e, function (t, e) {\n      var i = e.charAt(0).toUpperCase() + e.slice(1);\n      SVG[i + \"Effect\"] = SVG.invent({\n        create: function create() {\n          this.constructor.call(this, SVG.create(\"fe\" + i)), t.apply(this, arguments), this.result(this.attr(\"id\") + \"Out\");\n        },\n        inherit: SVG.Effect,\n        extend: {}\n      });\n    }), o(i, function (t, e) {\n      var i = e.charAt(0).toUpperCase() + e.slice(1);\n      SVG[i + \"Effect\"] = SVG.invent({\n        create: function create() {\n          this.constructor.call(this, SVG.create(\"fe\" + i)), t.apply(this, arguments), this.result(this.attr(\"id\") + \"Out\");\n        },\n        inherit: SVG.ParentEffect,\n        extend: {}\n      });\n    }), o(a, function (t, e) {\n      var i = e.charAt(0).toUpperCase() + e.slice(1);\n      SVG[i] = SVG.invent({\n        create: function create() {\n          this.constructor.call(this, SVG.create(\"fe\" + i)), t.apply(this, arguments);\n        },\n        inherit: SVG.ChildEffect,\n        extend: {}\n      });\n    }), SVG.extend(SVG.MergeEffect, {\n      \"in\": function _in(t) {\n        return t instanceof SVG.MergeNode ? this.add(t, 0) : this.add(new SVG.MergeNode(t), 0), this;\n      }\n    }), SVG.extend(SVG.CompositeEffect, SVG.BlendEffect, SVG.DisplacementMapEffect, {\n      in2: function in2(t) {\n        return null == t ? this.parent() && this.parent().select('[result=\"' + this.attr(\"in2\") + '\"]').get(0) || this.attr(\"in2\") : this.attr(\"in2\", t);\n      }\n    }), SVG.filter = {\n      sepiatone: [.343, .669, .119, 0, 0, .249, .626, .13, 0, 0, .172, .334, .111, 0, 0, 0, 0, 0, 1, 0]\n    };\n  }.call(void 0), function () {\n    function t(t, s, r, o, n, l, h) {\n      for (var c = t.slice(s, r || h), d = o.slice(n, l || h), g = 0, u = {\n        pos: [0, 0],\n        start: [0, 0]\n      }, f = {\n        pos: [0, 0],\n        start: [0, 0]\n      };;) {\n        if (c[g] = e.call(u, c[g]), d[g] = e.call(f, d[g]), c[g][0] != d[g][0] || \"M\" == c[g][0] || \"A\" == c[g][0] && (c[g][4] != d[g][4] || c[g][5] != d[g][5]) ? (Array.prototype.splice.apply(c, [g, 1].concat(a.call(u, c[g]))), Array.prototype.splice.apply(d, [g, 1].concat(a.call(f, d[g])))) : (c[g] = i.call(u, c[g]), d[g] = i.call(f, d[g])), ++g == c.length && g == d.length) break;\n        g == c.length && c.push([\"C\", u.pos[0], u.pos[1], u.pos[0], u.pos[1], u.pos[0], u.pos[1]]), g == d.length && d.push([\"C\", f.pos[0], f.pos[1], f.pos[0], f.pos[1], f.pos[0], f.pos[1]]);\n      }\n\n      return {\n        start: c,\n        dest: d\n      };\n    }\n\n    function e(t) {\n      switch (t[0]) {\n        case \"z\":\n        case \"Z\":\n          t[0] = \"L\", t[1] = this.start[0], t[2] = this.start[1];\n          break;\n\n        case \"H\":\n          t[0] = \"L\", t[2] = this.pos[1];\n          break;\n\n        case \"V\":\n          t[0] = \"L\", t[2] = t[1], t[1] = this.pos[0];\n          break;\n\n        case \"T\":\n          t[0] = \"Q\", t[3] = t[1], t[4] = t[2], t[1] = this.reflection[1], t[2] = this.reflection[0];\n          break;\n\n        case \"S\":\n          t[0] = \"C\", t[6] = t[4], t[5] = t[3], t[4] = t[2], t[3] = t[1], t[2] = this.reflection[1], t[1] = this.reflection[0];\n      }\n\n      return t;\n    }\n\n    function i(t) {\n      var e = t.length;\n      return this.pos = [t[e - 2], t[e - 1]], -1 != \"SCQT\".indexOf(t[0]) && (this.reflection = [2 * this.pos[0] - t[e - 4], 2 * this.pos[1] - t[e - 3]]), t;\n    }\n\n    function a(t) {\n      var e = [t];\n\n      switch (t[0]) {\n        case \"M\":\n          return this.pos = this.start = [t[1], t[2]], e;\n\n        case \"L\":\n          t[5] = t[3] = t[1], t[6] = t[4] = t[2], t[1] = this.pos[0], t[2] = this.pos[1];\n          break;\n\n        case \"Q\":\n          t[6] = t[4], t[5] = t[3], t[4] = 1 * t[4] / 3 + 2 * t[2] / 3, t[3] = 1 * t[3] / 3 + 2 * t[1] / 3, t[2] = 1 * this.pos[1] / 3 + 2 * t[2] / 3, t[1] = 1 * this.pos[0] / 3 + 2 * t[1] / 3;\n          break;\n\n        case \"A\":\n          t = (e = function (t, e) {\n            var i,\n                a,\n                s,\n                r,\n                o,\n                n,\n                l,\n                h,\n                c,\n                d,\n                g,\n                u,\n                f,\n                p,\n                x,\n                b,\n                v,\n                m,\n                y,\n                w,\n                k,\n                A,\n                S,\n                C,\n                L,\n                P,\n                M = Math.abs(e[1]),\n                T = Math.abs(e[2]),\n                I = e[3] % 360,\n                z = e[4],\n                X = e[5],\n                E = e[6],\n                Y = e[7],\n                F = new SVG.Point(t),\n                R = new SVG.Point(E, Y),\n                H = [];\n            if (0 === M || 0 === T || F.x === R.x && F.y === R.y) return [[\"C\", F.x, F.y, R.x, R.y, R.x, R.y]];\n            i = new SVG.Point((F.x - R.x) / 2, (F.y - R.y) / 2).transform(new SVG.Matrix().rotate(I)), (a = i.x * i.x / (M * M) + i.y * i.y / (T * T)) > 1 && (M *= a = Math.sqrt(a), T *= a);\n            s = new SVG.Matrix().rotate(I).scale(1 / M, 1 / T).rotate(-I), F = F.transform(s), R = R.transform(s), r = [R.x - F.x, R.y - F.y], n = r[0] * r[0] + r[1] * r[1], o = Math.sqrt(n), r[0] /= o, r[1] /= o, l = n < 4 ? Math.sqrt(1 - n / 4) : 0, z === X && (l *= -1);\n            h = new SVG.Point((R.x + F.x) / 2 + l * -r[1], (R.y + F.y) / 2 + l * r[0]), c = new SVG.Point(F.x - h.x, F.y - h.y), d = new SVG.Point(R.x - h.x, R.y - h.y), g = Math.acos(c.x / Math.sqrt(c.x * c.x + c.y * c.y)), c.y < 0 && (g *= -1);\n            u = Math.acos(d.x / Math.sqrt(d.x * d.x + d.y * d.y)), d.y < 0 && (u *= -1);\n            X && g > u && (u += 2 * Math.PI);\n            !X && g < u && (u -= 2 * Math.PI);\n\n            for (p = Math.ceil(2 * Math.abs(g - u) / Math.PI), b = [], v = g, f = (u - g) / p, x = 4 * Math.tan(f / 4) / 3, k = 0; k <= p; k++) {\n              y = Math.cos(v), m = Math.sin(v), w = new SVG.Point(h.x + y, h.y + m), b[k] = [new SVG.Point(w.x + x * m, w.y - x * y), w, new SVG.Point(w.x - x * m, w.y + x * y)], v += f;\n            }\n\n            for (b[0][0] = b[0][1].clone(), b[b.length - 1][2] = b[b.length - 1][1].clone(), s = new SVG.Matrix().rotate(I).scale(M, T).rotate(-I), k = 0, A = b.length; k < A; k++) {\n              b[k][0] = b[k][0].transform(s), b[k][1] = b[k][1].transform(s), b[k][2] = b[k][2].transform(s);\n            }\n\n            for (k = 1, A = b.length; k < A; k++) {\n              S = (w = b[k - 1][2]).x, C = w.y, L = (w = b[k][0]).x, P = w.y, E = (w = b[k][1]).x, Y = w.y, H.push([\"C\", S, C, L, P, E, Y]);\n            }\n\n            return H;\n          }(this.pos, t))[0];\n\n      }\n\n      return t[0] = \"C\", this.pos = [t[5], t[6]], this.reflection = [2 * t[5] - t[3], 2 * t[6] - t[4]], e;\n    }\n\n    function s(t, e) {\n      if (!1 === e) return !1;\n\n      for (var i = e, a = t.length; i < a; ++i) {\n        if (\"M\" == t[i][0]) return i;\n      }\n\n      return !1;\n    }\n\n    SVG.extend(SVG.PathArray, {\n      morph: function morph(e) {\n        for (var i = this.value, a = this.parse(e), r = 0, o = 0, n = !1, l = !1; !1 !== r || !1 !== o;) {\n          var h;\n          n = s(i, !1 !== r && r + 1), l = s(a, !1 !== o && o + 1), !1 === r && (r = 0 == (h = new SVG.PathArray(c.start).bbox()).height || 0 == h.width ? i.push(i[0]) - 1 : i.push([\"M\", h.x + h.width / 2, h.y + h.height / 2]) - 1), !1 === o && (o = 0 == (h = new SVG.PathArray(c.dest).bbox()).height || 0 == h.width ? a.push(a[0]) - 1 : a.push([\"M\", h.x + h.width / 2, h.y + h.height / 2]) - 1);\n          var c = t(i, r, n, a, o, l);\n          i = i.slice(0, r).concat(c.start, !1 === n ? [] : i.slice(n)), a = a.slice(0, o).concat(c.dest, !1 === l ? [] : a.slice(l)), r = !1 !== n && r + c.start.length, o = !1 !== l && o + c.dest.length;\n        }\n\n        return this.value = i, this.destination = new SVG.PathArray(), this.destination.value = a, this;\n      }\n    });\n  }(),\n  /*! svg.draggable.js - v2.2.2 - 2019-01-08\r\n    * https://github.com/svgdotjs/svg.draggable.js\r\n    * Copyright (c) 2019 Wout Fierens; Licensed MIT */\n  function () {\n    function t(t) {\n      t.remember(\"_draggable\", this), this.el = t;\n    }\n\n    t.prototype.init = function (t, e) {\n      var i = this;\n      this.constraint = t, this.value = e, this.el.on(\"mousedown.drag\", function (t) {\n        i.start(t);\n      }), this.el.on(\"touchstart.drag\", function (t) {\n        i.start(t);\n      });\n    }, t.prototype.transformPoint = function (t, e) {\n      var i = (t = t || window.event).changedTouches && t.changedTouches[0] || t;\n      return this.p.x = i.clientX - (e || 0), this.p.y = i.clientY, this.p.matrixTransform(this.m);\n    }, t.prototype.getBBox = function () {\n      var t = this.el.bbox();\n      return this.el instanceof SVG.Nested && (t = this.el.rbox()), (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) && (t.x = this.el.x(), t.y = this.el.y()), t;\n    }, t.prototype.start = function (t) {\n      if (\"click\" != t.type && \"mousedown\" != t.type && \"mousemove\" != t.type || 1 == (t.which || t.buttons)) {\n        var e = this;\n\n        if (this.el.fire(\"beforedrag\", {\n          event: t,\n          handler: this\n        }), !this.el.event().defaultPrevented) {\n          t.preventDefault(), t.stopPropagation(), this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc), this.p = this.parent.node.createSVGPoint(), this.m = this.el.node.getScreenCTM().inverse();\n          var i,\n              a = this.getBBox();\n          if (this.el instanceof SVG.Text) switch (i = this.el.node.getComputedTextLength(), this.el.attr(\"text-anchor\")) {\n            case \"middle\":\n              i /= 2;\n              break;\n\n            case \"start\":\n              i = 0;\n          }\n          this.startPoints = {\n            point: this.transformPoint(t, i),\n            box: a,\n            transform: this.el.transform()\n          }, SVG.on(window, \"mousemove.drag\", function (t) {\n            e.drag(t);\n          }), SVG.on(window, \"touchmove.drag\", function (t) {\n            e.drag(t);\n          }), SVG.on(window, \"mouseup.drag\", function (t) {\n            e.end(t);\n          }), SVG.on(window, \"touchend.drag\", function (t) {\n            e.end(t);\n          }), this.el.fire(\"dragstart\", {\n            event: t,\n            p: this.startPoints.point,\n            m: this.m,\n            handler: this\n          });\n        }\n      }\n    }, t.prototype.drag = function (t) {\n      var e = this.getBBox(),\n          i = this.transformPoint(t),\n          a = this.startPoints.box.x + i.x - this.startPoints.point.x,\n          s = this.startPoints.box.y + i.y - this.startPoints.point.y,\n          r = this.constraint,\n          o = i.x - this.startPoints.point.x,\n          n = i.y - this.startPoints.point.y;\n      if (this.el.fire(\"dragmove\", {\n        event: t,\n        p: i,\n        m: this.m,\n        handler: this\n      }), this.el.event().defaultPrevented) return i;\n\n      if (\"function\" == typeof r) {\n        var l = r.call(this.el, a, s, this.m);\n        \"boolean\" == typeof l && (l = {\n          x: l,\n          y: l\n        }), !0 === l.x ? this.el.x(a) : !1 !== l.x && this.el.x(l.x), !0 === l.y ? this.el.y(s) : !1 !== l.y && this.el.y(l.y);\n      } else \"object\" == _typeof(r) && (null != r.minX && a < r.minX ? o = (a = r.minX) - this.startPoints.box.x : null != r.maxX && a > r.maxX - e.width && (o = (a = r.maxX - e.width) - this.startPoints.box.x), null != r.minY && s < r.minY ? n = (s = r.minY) - this.startPoints.box.y : null != r.maxY && s > r.maxY - e.height && (n = (s = r.maxY - e.height) - this.startPoints.box.y), null != r.snapToGrid && (a -= a % r.snapToGrid, s -= s % r.snapToGrid, o -= o % r.snapToGrid, n -= n % r.snapToGrid), this.el instanceof SVG.G ? this.el.matrix(this.startPoints.transform).transform({\n        x: o,\n        y: n\n      }, !0) : this.el.move(a, s));\n\n      return i;\n    }, t.prototype.end = function (t) {\n      var e = this.drag(t);\n      this.el.fire(\"dragend\", {\n        event: t,\n        p: e,\n        m: this.m,\n        handler: this\n      }), SVG.off(window, \"mousemove.drag\"), SVG.off(window, \"touchmove.drag\"), SVG.off(window, \"mouseup.drag\"), SVG.off(window, \"touchend.drag\");\n    }, SVG.extend(SVG.Element, {\n      draggable: function draggable(e, i) {\n        \"function\" != typeof e && \"object\" != _typeof(e) || (i = e, e = !0);\n        var a = this.remember(\"_draggable\") || new t(this);\n        return (e = void 0 === e || e) ? a.init(i || {}, e) : (this.off(\"mousedown.drag\"), this.off(\"touchstart.drag\")), this;\n      }\n    });\n  }.call(void 0), function () {\n    function t(t) {\n      this.el = t, t.remember(\"_selectHandler\", this), this.pointSelection = {\n        isSelected: !1\n      }, this.rectSelection = {\n        isSelected: !1\n      }, this.pointsList = {\n        lt: [0, 0],\n        rt: [\"width\", 0],\n        rb: [\"width\", \"height\"],\n        lb: [0, \"height\"],\n        t: [\"width\", 0],\n        r: [\"width\", \"height\"],\n        b: [\"width\", \"height\"],\n        l: [0, \"height\"]\n      }, this.pointCoord = function (t, e, i) {\n        var a = \"string\" != typeof t ? t : e[t];\n        return i ? a / 2 : a;\n      }, this.pointCoords = function (t, e) {\n        var i = this.pointsList[t];\n        return {\n          x: this.pointCoord(i[0], e, \"t\" === t || \"b\" === t),\n          y: this.pointCoord(i[1], e, \"r\" === t || \"l\" === t)\n        };\n      };\n    }\n\n    t.prototype.init = function (t, e) {\n      var i = this.el.bbox();\n      this.options = {};\n      var a = this.el.selectize.defaults.points;\n\n      for (var s in this.el.selectize.defaults) {\n        this.options[s] = this.el.selectize.defaults[s], void 0 !== e[s] && (this.options[s] = e[s]);\n      }\n\n      var r = [\"points\", \"pointsExclude\"];\n\n      for (var s in r) {\n        var o = this.options[r[s]];\n        \"string\" == typeof o ? o = o.length > 0 ? o.split(/\\s*,\\s*/i) : [] : \"boolean\" == typeof o && \"points\" === r[s] && (o = o ? a : []), this.options[r[s]] = o;\n      }\n\n      this.options.points = [a, this.options.points].reduce(function (t, e) {\n        return t.filter(function (t) {\n          return e.indexOf(t) > -1;\n        });\n      }), this.options.points = [this.options.points, this.options.pointsExclude].reduce(function (t, e) {\n        return t.filter(function (t) {\n          return e.indexOf(t) < 0;\n        });\n      }), this.parent = this.el.parent(), this.nested = this.nested || this.parent.group(), this.nested.matrix(new SVG.Matrix(this.el).translate(i.x, i.y)), this.options.deepSelect && -1 !== [\"line\", \"polyline\", \"polygon\"].indexOf(this.el.type) ? this.selectPoints(t) : this.selectRect(t), this.observe(), this.cleanup();\n    }, t.prototype.selectPoints = function (t) {\n      return this.pointSelection.isSelected = t, this.pointSelection.set || (this.pointSelection.set = this.parent.set(), this.drawPoints()), this;\n    }, t.prototype.getPointArray = function () {\n      var t = this.el.bbox();\n      return this.el.array().valueOf().map(function (e) {\n        return [e[0] - t.x, e[1] - t.y];\n      });\n    }, t.prototype.drawPoints = function () {\n      for (var t = this, e = this.getPointArray(), i = 0, a = e.length; i < a; ++i) {\n        var s = function (e) {\n          return function (i) {\n            (i = i || window.event).preventDefault ? i.preventDefault() : i.returnValue = !1, i.stopPropagation();\n            var a = i.pageX || i.touches[0].pageX,\n                s = i.pageY || i.touches[0].pageY;\n            t.el.fire(\"point\", {\n              x: a,\n              y: s,\n              i: e,\n              event: i\n            });\n          };\n        }(i),\n            r = this.drawPoint(e[i][0], e[i][1]).addClass(this.options.classPoints).addClass(this.options.classPoints + \"_point\").on(\"touchstart\", s).on(\"mousedown\", s);\n\n        this.pointSelection.set.add(r);\n      }\n    }, t.prototype.drawPoint = function (t, e) {\n      var i = this.options.pointType;\n\n      switch (i) {\n        case \"circle\":\n          return this.drawCircle(t, e);\n\n        case \"rect\":\n          return this.drawRect(t, e);\n\n        default:\n          if (\"function\" == typeof i) return i.call(this, t, e);\n          throw new Error(\"Unknown \" + i + \" point type!\");\n      }\n    }, t.prototype.drawCircle = function (t, e) {\n      return this.nested.circle(this.options.pointSize).center(t, e);\n    }, t.prototype.drawRect = function (t, e) {\n      return this.nested.rect(this.options.pointSize, this.options.pointSize).center(t, e);\n    }, t.prototype.updatePointSelection = function () {\n      var t = this.getPointArray();\n      this.pointSelection.set.each(function (e) {\n        this.cx() === t[e][0] && this.cy() === t[e][1] || this.center(t[e][0], t[e][1]);\n      });\n    }, t.prototype.updateRectSelection = function () {\n      var t = this,\n          e = this.el.bbox();\n\n      if (this.rectSelection.set.get(0).attr({\n        width: e.width,\n        height: e.height\n      }), this.options.points.length && this.options.points.map(function (i, a) {\n        var s = t.pointCoords(i, e);\n        t.rectSelection.set.get(a + 1).center(s.x, s.y);\n      }), this.options.rotationPoint) {\n        var i = this.rectSelection.set.length();\n        this.rectSelection.set.get(i - 1).center(e.width / 2, 20);\n      }\n    }, t.prototype.selectRect = function (t) {\n      var e = this,\n          i = this.el.bbox();\n\n      function a(t) {\n        return function (i) {\n          (i = i || window.event).preventDefault ? i.preventDefault() : i.returnValue = !1, i.stopPropagation();\n          var a = i.pageX || i.touches[0].pageX,\n              s = i.pageY || i.touches[0].pageY;\n          e.el.fire(t, {\n            x: a,\n            y: s,\n            event: i\n          });\n        };\n      }\n\n      if (this.rectSelection.isSelected = t, this.rectSelection.set = this.rectSelection.set || this.parent.set(), this.rectSelection.set.get(0) || this.rectSelection.set.add(this.nested.rect(i.width, i.height).addClass(this.options.classRect)), this.options.points.length && this.rectSelection.set.length() < 2) {\n        this.options.points.map(function (t, s) {\n          var r = e.pointCoords(t, i),\n              o = e.drawPoint(r.x, r.y).attr(\"class\", e.options.classPoints + \"_\" + t).on(\"mousedown\", a(t)).on(\"touchstart\", a(t));\n          e.rectSelection.set.add(o);\n        }), this.rectSelection.set.each(function () {\n          this.addClass(e.options.classPoints);\n        });\n      }\n\n      if (this.options.rotationPoint && (this.options.points && !this.rectSelection.set.get(9) || !this.options.points && !this.rectSelection.set.get(1))) {\n        var s = function s(t) {\n          (t = t || window.event).preventDefault ? t.preventDefault() : t.returnValue = !1, t.stopPropagation();\n          var i = t.pageX || t.touches[0].pageX,\n              a = t.pageY || t.touches[0].pageY;\n          e.el.fire(\"rot\", {\n            x: i,\n            y: a,\n            event: t\n          });\n        },\n            r = this.drawPoint(i.width / 2, 20).attr(\"class\", this.options.classPoints + \"_rot\").on(\"touchstart\", s).on(\"mousedown\", s);\n\n        this.rectSelection.set.add(r);\n      }\n    }, t.prototype.handler = function () {\n      var t = this.el.bbox();\n      this.nested.matrix(new SVG.Matrix(this.el).translate(t.x, t.y)), this.rectSelection.isSelected && this.updateRectSelection(), this.pointSelection.isSelected && this.updatePointSelection();\n    }, t.prototype.observe = function () {\n      var t = this;\n      if (MutationObserver) {\n        if (this.rectSelection.isSelected || this.pointSelection.isSelected) this.observerInst = this.observerInst || new MutationObserver(function () {\n          t.handler();\n        }), this.observerInst.observe(this.el.node, {\n          attributes: !0\n        });else try {\n          this.observerInst.disconnect(), delete this.observerInst;\n        } catch (t) {}\n      } else this.el.off(\"DOMAttrModified.select\"), (this.rectSelection.isSelected || this.pointSelection.isSelected) && this.el.on(\"DOMAttrModified.select\", function () {\n        t.handler();\n      });\n    }, t.prototype.cleanup = function () {\n      !this.rectSelection.isSelected && this.rectSelection.set && (this.rectSelection.set.each(function () {\n        this.remove();\n      }), this.rectSelection.set.clear(), delete this.rectSelection.set), !this.pointSelection.isSelected && this.pointSelection.set && (this.pointSelection.set.each(function () {\n        this.remove();\n      }), this.pointSelection.set.clear(), delete this.pointSelection.set), this.pointSelection.isSelected || this.rectSelection.isSelected || (this.nested.remove(), delete this.nested);\n    }, SVG.extend(SVG.Element, {\n      selectize: function selectize(e, i) {\n        return \"object\" == _typeof(e) && (i = e, e = !0), (this.remember(\"_selectHandler\") || new t(this)).init(void 0 === e || e, i || {}), this;\n      }\n    }), SVG.Element.prototype.selectize.defaults = {\n      points: [\"lt\", \"rt\", \"rb\", \"lb\", \"t\", \"r\", \"b\", \"l\"],\n      pointsExclude: [],\n      classRect: \"svg_select_boundingRect\",\n      classPoints: \"svg_select_points\",\n      pointSize: 7,\n      rotationPoint: !0,\n      deepSelect: !1,\n      pointType: \"circle\"\n    };\n  }(), function () {\n    (function () {\n      function t(t) {\n        t.remember(\"_resizeHandler\", this), this.el = t, this.parameters = {}, this.lastUpdateCall = null, this.p = t.doc().node.createSVGPoint();\n      }\n\n      t.prototype.transformPoint = function (t, e, i) {\n        return this.p.x = t - (this.offset.x - window.pageXOffset), this.p.y = e - (this.offset.y - window.pageYOffset), this.p.matrixTransform(i || this.m);\n      }, t.prototype._extractPosition = function (t) {\n        return {\n          x: null != t.clientX ? t.clientX : t.touches[0].clientX,\n          y: null != t.clientY ? t.clientY : t.touches[0].clientY\n        };\n      }, t.prototype.init = function (t) {\n        var e = this;\n\n        if (this.stop(), \"stop\" !== t) {\n          for (var i in this.options = {}, this.el.resize.defaults) {\n            this.options[i] = this.el.resize.defaults[i], void 0 !== t[i] && (this.options[i] = t[i]);\n          }\n\n          this.el.on(\"lt.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"rt.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"rb.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"lb.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"t.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"r.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"b.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"l.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"rot.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.el.on(\"point.resize\", function (t) {\n            e.resize(t || window.event);\n          }), this.update();\n        }\n      }, t.prototype.stop = function () {\n        return this.el.off(\"lt.resize\"), this.el.off(\"rt.resize\"), this.el.off(\"rb.resize\"), this.el.off(\"lb.resize\"), this.el.off(\"t.resize\"), this.el.off(\"r.resize\"), this.el.off(\"b.resize\"), this.el.off(\"l.resize\"), this.el.off(\"rot.resize\"), this.el.off(\"point.resize\"), this;\n      }, t.prototype.resize = function (t) {\n        var e = this;\n        this.m = this.el.node.getScreenCTM().inverse(), this.offset = {\n          x: window.pageXOffset,\n          y: window.pageYOffset\n        };\n\n        var i = this._extractPosition(t.detail.event);\n\n        if (this.parameters = {\n          type: this.el.type,\n          p: this.transformPoint(i.x, i.y),\n          x: t.detail.x,\n          y: t.detail.y,\n          box: this.el.bbox(),\n          rotation: this.el.transform().rotation\n        }, \"text\" === this.el.type && (this.parameters.fontSize = this.el.attr()[\"font-size\"]), void 0 !== t.detail.i) {\n          var a = this.el.array().valueOf();\n          this.parameters.i = t.detail.i, this.parameters.pointCoords = [a[t.detail.i][0], a[t.detail.i][1]];\n        }\n\n        switch (t.type) {\n          case \"lt\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e);\n\n              if (this.parameters.box.width - i[0] > 0 && this.parameters.box.height - i[1] > 0) {\n                if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x + i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize - i[0]);\n                i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x + i[0], this.parameters.box.y + i[1]).size(this.parameters.box.width - i[0], this.parameters.box.height - i[1]);\n              }\n            };\n\n            break;\n\n          case \"rt\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 2);\n\n              if (this.parameters.box.width + i[0] > 0 && this.parameters.box.height - i[1] > 0) {\n                if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x - i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize + i[0]);\n                i = this.checkAspectRatio(i, !0), this.el.move(this.parameters.box.x, this.parameters.box.y + i[1]).size(this.parameters.box.width + i[0], this.parameters.box.height - i[1]);\n              }\n            };\n\n            break;\n\n          case \"rb\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 0);\n\n              if (this.parameters.box.width + i[0] > 0 && this.parameters.box.height + i[1] > 0) {\n                if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x - i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize + i[0]);\n                i = this.checkAspectRatio(i), this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + i[0], this.parameters.box.height + i[1]);\n              }\n            };\n\n            break;\n\n          case \"lb\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 1);\n\n              if (this.parameters.box.width - i[0] > 0 && this.parameters.box.height + i[1] > 0) {\n                if (\"text\" === this.parameters.type) return this.el.move(this.parameters.box.x + i[0], this.parameters.box.y), void this.el.attr(\"font-size\", this.parameters.fontSize - i[0]);\n                i = this.checkAspectRatio(i, !0), this.el.move(this.parameters.box.x + i[0], this.parameters.box.y).size(this.parameters.box.width - i[0], this.parameters.box.height + i[1]);\n              }\n            };\n\n            break;\n\n          case \"t\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 2);\n\n              if (this.parameters.box.height - i[1] > 0) {\n                if (\"text\" === this.parameters.type) return;\n                this.el.move(this.parameters.box.x, this.parameters.box.y + i[1]).height(this.parameters.box.height - i[1]);\n              }\n            };\n\n            break;\n\n          case \"r\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 0);\n\n              if (this.parameters.box.width + i[0] > 0) {\n                if (\"text\" === this.parameters.type) return;\n                this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + i[0]);\n              }\n            };\n\n            break;\n\n          case \"b\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 0);\n\n              if (this.parameters.box.height + i[1] > 0) {\n                if (\"text\" === this.parameters.type) return;\n                this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + i[1]);\n              }\n            };\n\n            break;\n\n          case \"l\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, 1);\n\n              if (this.parameters.box.width - i[0] > 0) {\n                if (\"text\" === this.parameters.type) return;\n                this.el.move(this.parameters.box.x + i[0], this.parameters.box.y).width(this.parameters.box.width - i[0]);\n              }\n            };\n\n            break;\n\n          case \"rot\":\n            this.calc = function (t, e) {\n              var i = t + this.parameters.p.x,\n                  a = e + this.parameters.p.y,\n                  s = Math.atan2(this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2, this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2),\n                  r = Math.atan2(a - this.parameters.box.y - this.parameters.box.height / 2, i - this.parameters.box.x - this.parameters.box.width / 2),\n                  o = this.parameters.rotation + 180 * (r - s) / Math.PI + this.options.snapToAngle / 2;\n              this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(o - o % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);\n            };\n\n            break;\n\n          case \"point\":\n            this.calc = function (t, e) {\n              var i = this.snapToGrid(t, e, this.parameters.pointCoords[0], this.parameters.pointCoords[1]),\n                  a = this.el.array().valueOf();\n              a[this.parameters.i][0] = this.parameters.pointCoords[0] + i[0], a[this.parameters.i][1] = this.parameters.pointCoords[1] + i[1], this.el.plot(a);\n            };\n\n        }\n\n        this.el.fire(\"resizestart\", {\n          dx: this.parameters.x,\n          dy: this.parameters.y,\n          event: t\n        }), SVG.on(window, \"touchmove.resize\", function (t) {\n          e.update(t || window.event);\n        }), SVG.on(window, \"touchend.resize\", function () {\n          e.done();\n        }), SVG.on(window, \"mousemove.resize\", function (t) {\n          e.update(t || window.event);\n        }), SVG.on(window, \"mouseup.resize\", function () {\n          e.done();\n        });\n      }, t.prototype.update = function (t) {\n        if (t) {\n          var e = this._extractPosition(t),\n              i = this.transformPoint(e.x, e.y),\n              a = i.x - this.parameters.p.x,\n              s = i.y - this.parameters.p.y;\n\n          this.lastUpdateCall = [a, s], this.calc(a, s), this.el.fire(\"resizing\", {\n            dx: a,\n            dy: s,\n            event: t\n          });\n        } else this.lastUpdateCall && this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);\n      }, t.prototype.done = function () {\n        this.lastUpdateCall = null, SVG.off(window, \"mousemove.resize\"), SVG.off(window, \"mouseup.resize\"), SVG.off(window, \"touchmove.resize\"), SVG.off(window, \"touchend.resize\"), this.el.fire(\"resizedone\");\n      }, t.prototype.snapToGrid = function (t, e, i, a) {\n        var s;\n        return void 0 !== a ? s = [(i + t) % this.options.snapToGrid, (a + e) % this.options.snapToGrid] : (i = null == i ? 3 : i, s = [(this.parameters.box.x + t + (1 & i ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + e + (2 & i ? 0 : this.parameters.box.height)) % this.options.snapToGrid]), t < 0 && (s[0] -= this.options.snapToGrid), e < 0 && (s[1] -= this.options.snapToGrid), t -= Math.abs(s[0]) < this.options.snapToGrid / 2 ? s[0] : s[0] - (t < 0 ? -this.options.snapToGrid : this.options.snapToGrid), e -= Math.abs(s[1]) < this.options.snapToGrid / 2 ? s[1] : s[1] - (e < 0 ? -this.options.snapToGrid : this.options.snapToGrid), this.constraintToBox(t, e, i, a);\n      }, t.prototype.constraintToBox = function (t, e, i, a) {\n        var s,\n            r,\n            o = this.options.constraint || {};\n        return void 0 !== a ? (s = i, r = a) : (s = this.parameters.box.x + (1 & i ? 0 : this.parameters.box.width), r = this.parameters.box.y + (2 & i ? 0 : this.parameters.box.height)), void 0 !== o.minX && s + t < o.minX && (t = o.minX - s), void 0 !== o.maxX && s + t > o.maxX && (t = o.maxX - s), void 0 !== o.minY && r + e < o.minY && (e = o.minY - r), void 0 !== o.maxY && r + e > o.maxY && (e = o.maxY - r), [t, e];\n      }, t.prototype.checkAspectRatio = function (t, e) {\n        if (!this.options.saveAspectRatio) return t;\n        var i = t.slice(),\n            a = this.parameters.box.width / this.parameters.box.height,\n            s = this.parameters.box.width + t[0],\n            r = this.parameters.box.height - t[1],\n            o = s / r;\n        return o < a ? (i[1] = s / a - this.parameters.box.height, e && (i[1] = -i[1])) : o > a && (i[0] = this.parameters.box.width - r * a, e && (i[0] = -i[0])), i;\n      }, SVG.extend(SVG.Element, {\n        resize: function resize(e) {\n          return (this.remember(\"_resizeHandler\") || new t(this)).init(e || {}), this;\n        }\n      }), SVG.Element.prototype.resize.defaults = {\n        snapToAngle: .1,\n        snapToGrid: 1,\n        constraint: {},\n        saveAspectRatio: !1\n      };\n    }).call(this);\n  }(), void 0 === window.Apex && (window.Apex = {});\n\n  var Ht = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"initModules\",\n      value: function value() {\n        this.ctx.publicMethods = [\"updateOptions\", \"updateSeries\", \"appendData\", \"appendSeries\", \"toggleSeries\", \"showSeries\", \"hideSeries\", \"setLocale\", \"resetSeries\", \"zoomX\", \"toggleDataPointSelection\", \"dataURI\", \"addXaxisAnnotation\", \"addYaxisAnnotation\", \"addPointAnnotation\", \"clearAnnotations\", \"removeAnnotation\", \"paper\", \"destroy\"], this.ctx.eventList = [\"click\", \"mousedown\", \"mousemove\", \"mouseleave\", \"touchstart\", \"touchmove\", \"touchleave\", \"mouseup\", \"touchend\"], this.ctx.animations = new b(this.ctx), this.ctx.axes = new K(this.ctx), this.ctx.core = new Ft(this.ctx.el, this.ctx), this.ctx.config = new N({}), this.ctx.data = new B(this.ctx), this.ctx.grid = new U(this.ctx), this.ctx.graphics = new m(this.ctx), this.ctx.coreUtils = new y(this.ctx), this.ctx.crosshairs = new tt(this.ctx), this.ctx.events = new J(this.ctx), this.ctx.exports = new j(this.ctx), this.ctx.localization = new Q(this.ctx), this.ctx.options = new L(), this.ctx.responsive = new et(this.ctx), this.ctx.series = new E(this.ctx), this.ctx.theme = new it(this.ctx), this.ctx.formatters = new V(this.ctx), this.ctx.titleSubtitle = new at(this.ctx), this.ctx.legend = new ct(this.ctx), this.ctx.toolbar = new dt(this.ctx), this.ctx.dimensions = new lt(this.ctx), this.ctx.updateHelpers = new Rt(this.ctx), this.ctx.zoomPanSelection = new gt(this.ctx), this.ctx.w.globals.tooltip = new mt(this.ctx);\n      }\n    }]), t;\n  }(),\n      Dt = function () {\n    function t(e) {\n      a(this, t), this.ctx = e, this.w = e.w;\n    }\n\n    return r(t, [{\n      key: \"clear\",\n      value: function value(t) {\n        var e = t.isUpdating;\n        this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(), this.ctx.toolbar && this.ctx.toolbar.destroy(), this.ctx.animations = null, this.ctx.axes = null, this.ctx.annotations = null, this.ctx.core = null, this.ctx.data = null, this.ctx.grid = null, this.ctx.series = null, this.ctx.responsive = null, this.ctx.theme = null, this.ctx.formatters = null, this.ctx.titleSubtitle = null, this.ctx.legend = null, this.ctx.dimensions = null, this.ctx.options = null, this.ctx.crosshairs = null, this.ctx.zoomPanSelection = null, this.ctx.updateHelpers = null, this.ctx.toolbar = null, this.ctx.localization = null, this.ctx.w.globals.tooltip = null, this.clearDomElements({\n          isUpdating: e\n        });\n      }\n    }, {\n      key: \"killSVG\",\n      value: function value(t) {\n        t.each(function (t, e) {\n          this.removeClass(\"*\"), this.off(), this.stop();\n        }, !0), t.ungroup(), t.clear();\n      }\n    }, {\n      key: \"clearDomElements\",\n      value: function value(t) {\n        var e = this,\n            i = t.isUpdating,\n            a = this.w.globals.dom.Paper.node;\n        a.parentNode && a.parentNode.parentNode && !i && (a.parentNode.parentNode.style.minHeight = \"unset\");\n        var s = this.w.globals.dom.baseEl;\n        s && this.ctx.eventList.forEach(function (t) {\n          s.removeEventListener(t, e.ctx.events.documentEvent);\n        });\n        var r = this.w.globals.dom;\n        if (null !== this.ctx.el) for (; this.ctx.el.firstChild;) {\n          this.ctx.el.removeChild(this.ctx.el.firstChild);\n        }\n        this.killSVG(r.Paper), r.Paper.remove(), r.elWrap = null, r.elGraphical = null, r.elAnnotations = null, r.elLegendWrap = null, r.baseEl = null, r.elGridRect = null, r.elGridRectMask = null, r.elGridRectMarkerMask = null, r.elForecastMask = null, r.elNonForecastMask = null, r.elDefs = null;\n      }\n    }]), t;\n  }(),\n      Nt = new WeakMap();\n\n  return function () {\n    function t(e, i) {\n      a(this, t), this.opts = i, this.ctx = this, this.w = new W(i).init(), this.el = e, this.w.globals.cuid = x.randomId(), this.w.globals.chartID = this.w.config.chart.id ? x.escapeString(this.w.config.chart.id) : this.w.globals.cuid, new Ht(this).initModules(), this.create = x.bind(this.create, this), this.windowResizeHandler = this._windowResizeHandler.bind(this), this.parentResizeHandler = this._parentResizeCallback.bind(this);\n    }\n\n    return r(t, [{\n      key: \"render\",\n      value: function value() {\n        var t = this;\n        return new Promise(function (e, i) {\n          if (null !== t.el) {\n            void 0 === Apex._chartInstances && (Apex._chartInstances = []), t.w.config.chart.id && Apex._chartInstances.push({\n              id: t.w.globals.chartID,\n              group: t.w.config.chart.group,\n              chart: t\n            }), t.setLocale(t.w.config.chart.defaultLocale);\n            var a = t.w.config.chart.events.beforeMount;\n\n            if (\"function\" == typeof a && a(t, t.w), t.events.fireEvent(\"beforeMount\", [t, t.w]), window.addEventListener(\"resize\", t.windowResizeHandler), function (t, e) {\n              var i = !1,\n                  a = t.getBoundingClientRect();\n              \"none\" !== t.style.display && 0 !== a.width || (i = !0);\n              var s = new ResizeObserver(function (a) {\n                i && e.call(t, a), i = !0;\n              });\n              t.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? Array.from(t.children).forEach(function (t) {\n                return s.observe(t);\n              }) : s.observe(t), Nt.set(e, s);\n            }(t.el.parentNode, t.parentResizeHandler), !t.css) {\n              var s = t.el.getRootNode && t.el.getRootNode(),\n                  r = x.is(\"ShadowRoot\", s),\n                  o = t.el.ownerDocument,\n                  n = o.getElementById(\"apexcharts-css\");\n              !r && n || (t.css = document.createElement(\"style\"), t.css.id = \"apexcharts-css\", t.css.textContent = '.apexcharts-canvas {\\n  position: relative;\\n  user-select: none;\\n  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */\\n}\\n\\n\\n/* scrollbar is not visible by default for legend, hence forcing the visibility */\\n.apexcharts-canvas ::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n  width: 6px;\\n}\\n\\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\\n  border-radius: 4px;\\n  background-color: rgba(0, 0, 0, .5);\\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);\\n}\\n\\n\\n.apexcharts-inner {\\n  position: relative;\\n}\\n\\n.apexcharts-text tspan {\\n  font-family: inherit;\\n}\\n\\n.legend-mouseover-inactive {\\n  transition: 0.15s ease all;\\n  opacity: 0.20;\\n}\\n\\n.apexcharts-series-collapsed {\\n  opacity: 0;\\n}\\n\\n.apexcharts-tooltip {\\n  border-radius: 5px;\\n  box-shadow: 2px 2px 6px -4px #999;\\n  cursor: default;\\n  font-size: 14px;\\n  left: 62px;\\n  opacity: 0;\\n  pointer-events: none;\\n  position: absolute;\\n  top: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n  white-space: nowrap;\\n  z-index: 12;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-tooltip.apexcharts-active {\\n  opacity: 1;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-light {\\n  border: 1px solid #e3e3e3;\\n  background: rgba(255, 255, 255, 0.96);\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-dark {\\n  color: #fff;\\n  background: rgba(30, 30, 30, 0.8);\\n}\\n\\n.apexcharts-tooltip * {\\n  font-family: inherit;\\n}\\n\\n\\n.apexcharts-tooltip-title {\\n  padding: 6px;\\n  font-size: 15px;\\n  margin-bottom: 4px;\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\\n  background: #ECEFF1;\\n  border-bottom: 1px solid #ddd;\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\\n  background: rgba(0, 0, 0, 0.7);\\n  border-bottom: 1px solid #333;\\n}\\n\\n.apexcharts-tooltip-text-y-value,\\n.apexcharts-tooltip-text-goals-value,\\n.apexcharts-tooltip-text-z-value {\\n  display: inline-block;\\n  font-weight: 600;\\n  margin-left: 5px;\\n}\\n\\n.apexcharts-tooltip-title:empty,\\n.apexcharts-tooltip-text-y-label:empty,\\n.apexcharts-tooltip-text-y-value:empty,\\n.apexcharts-tooltip-text-goals-label:empty,\\n.apexcharts-tooltip-text-goals-value:empty,\\n.apexcharts-tooltip-text-z-value:empty {\\n  display: none;\\n}\\n\\n.apexcharts-tooltip-text-y-value,\\n.apexcharts-tooltip-text-goals-value,\\n.apexcharts-tooltip-text-z-value {\\n  font-weight: 600;\\n}\\n\\n.apexcharts-tooltip-text-goals-label, \\n.apexcharts-tooltip-text-goals-value {\\n  padding: 6px 0 5px;\\n}\\n\\n.apexcharts-tooltip-goals-group, \\n.apexcharts-tooltip-text-goals-label, \\n.apexcharts-tooltip-text-goals-value {\\n  display: flex;\\n}\\n.apexcharts-tooltip-text-goals-label:not(:empty),\\n.apexcharts-tooltip-text-goals-value:not(:empty) {\\n  margin-top: -6px;\\n}\\n\\n.apexcharts-tooltip-marker {\\n  width: 12px;\\n  height: 12px;\\n  position: relative;\\n  top: 0px;\\n  margin-right: 10px;\\n  border-radius: 50%;\\n}\\n\\n.apexcharts-tooltip-series-group {\\n  padding: 0 10px;\\n  display: none;\\n  text-align: left;\\n  justify-content: left;\\n  align-items: center;\\n}\\n\\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\\n  opacity: 1;\\n}\\n\\n.apexcharts-tooltip-series-group.apexcharts-active,\\n.apexcharts-tooltip-series-group:last-child {\\n  padding-bottom: 4px;\\n}\\n\\n.apexcharts-tooltip-series-group-hidden {\\n  opacity: 0;\\n  height: 0;\\n  line-height: 0;\\n  padding: 0 !important;\\n}\\n\\n.apexcharts-tooltip-y-group {\\n  padding: 6px 0 5px;\\n}\\n\\n.apexcharts-tooltip-box, .apexcharts-custom-tooltip {\\n  padding: 4px 8px;\\n}\\n\\n.apexcharts-tooltip-boxPlot {\\n  display: flex;\\n  flex-direction: column-reverse;\\n}\\n\\n.apexcharts-tooltip-box>div {\\n  margin: 4px 0;\\n}\\n\\n.apexcharts-tooltip-box span.value {\\n  font-weight: bold;\\n}\\n\\n.apexcharts-tooltip-rangebar {\\n  padding: 5px 8px;\\n}\\n\\n.apexcharts-tooltip-rangebar .category {\\n  font-weight: 600;\\n  color: #777;\\n}\\n\\n.apexcharts-tooltip-rangebar .series-name {\\n  font-weight: bold;\\n  display: block;\\n  margin-bottom: 5px;\\n}\\n\\n.apexcharts-xaxistooltip {\\n  opacity: 0;\\n  padding: 9px 10px;\\n  pointer-events: none;\\n  color: #373d3f;\\n  font-size: 13px;\\n  text-align: center;\\n  border-radius: 2px;\\n  position: absolute;\\n  z-index: 10;\\n  background: #ECEFF1;\\n  border: 1px solid #90A4AE;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\\n  background: rgba(0, 0, 0, 0.7);\\n  border: 1px solid rgba(0, 0, 0, 0.5);\\n  color: #fff;\\n}\\n\\n.apexcharts-xaxistooltip:after,\\n.apexcharts-xaxistooltip:before {\\n  left: 50%;\\n  border: solid transparent;\\n  content: \" \";\\n  height: 0;\\n  width: 0;\\n  position: absolute;\\n  pointer-events: none;\\n}\\n\\n.apexcharts-xaxistooltip:after {\\n  border-color: rgba(236, 239, 241, 0);\\n  border-width: 6px;\\n  margin-left: -6px;\\n}\\n\\n.apexcharts-xaxistooltip:before {\\n  border-color: rgba(144, 164, 174, 0);\\n  border-width: 7px;\\n  margin-left: -7px;\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after,\\n.apexcharts-xaxistooltip-bottom:before {\\n  bottom: 100%;\\n}\\n\\n.apexcharts-xaxistooltip-top:after,\\n.apexcharts-xaxistooltip-top:before {\\n  top: 100%;\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after {\\n  border-bottom-color: #ECEFF1;\\n}\\n\\n.apexcharts-xaxistooltip-bottom:before {\\n  border-bottom-color: #90A4AE;\\n}\\n\\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after {\\n  border-bottom-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\\n  border-bottom-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-xaxistooltip-top:after {\\n  border-top-color: #ECEFF1\\n}\\n\\n.apexcharts-xaxistooltip-top:before {\\n  border-top-color: #90A4AE;\\n}\\n\\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after {\\n  border-top-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\\n  border-top-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-xaxistooltip.apexcharts-active {\\n  opacity: 1;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-yaxistooltip {\\n  opacity: 0;\\n  padding: 4px 10px;\\n  pointer-events: none;\\n  color: #373d3f;\\n  font-size: 13px;\\n  text-align: center;\\n  border-radius: 2px;\\n  position: absolute;\\n  z-index: 10;\\n  background: #ECEFF1;\\n  border: 1px solid #90A4AE;\\n}\\n\\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\\n  background: rgba(0, 0, 0, 0.7);\\n  border: 1px solid rgba(0, 0, 0, 0.5);\\n  color: #fff;\\n}\\n\\n.apexcharts-yaxistooltip:after,\\n.apexcharts-yaxistooltip:before {\\n  top: 50%;\\n  border: solid transparent;\\n  content: \" \";\\n  height: 0;\\n  width: 0;\\n  position: absolute;\\n  pointer-events: none;\\n}\\n\\n.apexcharts-yaxistooltip:after {\\n  border-color: rgba(236, 239, 241, 0);\\n  border-width: 6px;\\n  margin-top: -6px;\\n}\\n\\n.apexcharts-yaxistooltip:before {\\n  border-color: rgba(144, 164, 174, 0);\\n  border-width: 7px;\\n  margin-top: -7px;\\n}\\n\\n.apexcharts-yaxistooltip-left:after,\\n.apexcharts-yaxistooltip-left:before {\\n  left: 100%;\\n}\\n\\n.apexcharts-yaxistooltip-right:after,\\n.apexcharts-yaxistooltip-right:before {\\n  right: 100%;\\n}\\n\\n.apexcharts-yaxistooltip-left:after {\\n  border-left-color: #ECEFF1;\\n}\\n\\n.apexcharts-yaxistooltip-left:before {\\n  border-left-color: #90A4AE;\\n}\\n\\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after {\\n  border-left-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\\n  border-left-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-yaxistooltip-right:after {\\n  border-right-color: #ECEFF1;\\n}\\n\\n.apexcharts-yaxistooltip-right:before {\\n  border-right-color: #90A4AE;\\n}\\n\\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after {\\n  border-right-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\\n  border-right-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-yaxistooltip.apexcharts-active {\\n  opacity: 1;\\n}\\n\\n.apexcharts-yaxistooltip-hidden {\\n  display: none;\\n}\\n\\n.apexcharts-xcrosshairs,\\n.apexcharts-ycrosshairs {\\n  pointer-events: none;\\n  opacity: 0;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-xcrosshairs.apexcharts-active,\\n.apexcharts-ycrosshairs.apexcharts-active {\\n  opacity: 1;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-ycrosshairs-hidden {\\n  opacity: 0;\\n}\\n\\n.apexcharts-selection-rect {\\n  cursor: move;\\n}\\n\\n.svg_select_boundingRect, .svg_select_points_rot {\\n  pointer-events: none;\\n  opacity: 0;\\n  visibility: hidden;\\n}\\n.apexcharts-selection-rect + g .svg_select_boundingRect,\\n.apexcharts-selection-rect + g .svg_select_points_rot {\\n  opacity: 0;\\n  visibility: hidden;\\n}\\n\\n.apexcharts-selection-rect + g .svg_select_points_l,\\n.apexcharts-selection-rect + g .svg_select_points_r {\\n  cursor: ew-resize;\\n  opacity: 1;\\n  visibility: visible;\\n}\\n\\n.svg_select_points {\\n  fill: #efefef;\\n  stroke: #333;\\n  rx: 2;\\n}\\n\\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\\n  cursor: crosshair\\n}\\n\\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\\n  cursor: move\\n}\\n\\n.apexcharts-zoom-icon,\\n.apexcharts-zoomin-icon,\\n.apexcharts-zoomout-icon,\\n.apexcharts-reset-icon,\\n.apexcharts-pan-icon,\\n.apexcharts-selection-icon,\\n.apexcharts-menu-icon,\\n.apexcharts-toolbar-custom-icon {\\n  cursor: pointer;\\n  width: 20px;\\n  height: 20px;\\n  line-height: 24px;\\n  color: #6E8192;\\n  text-align: center;\\n}\\n\\n.apexcharts-zoom-icon svg,\\n.apexcharts-zoomin-icon svg,\\n.apexcharts-zoomout-icon svg,\\n.apexcharts-reset-icon svg,\\n.apexcharts-menu-icon svg {\\n  fill: #6E8192;\\n}\\n\\n.apexcharts-selection-icon svg {\\n  fill: #444;\\n  transform: scale(0.76)\\n}\\n\\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg,\\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg {\\n  fill: #f3f4f5;\\n}\\n\\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg,\\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg {\\n  fill: #008FFB;\\n}\\n\\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg,\\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg {\\n  fill: #333;\\n}\\n\\n.apexcharts-selection-icon,\\n.apexcharts-menu-icon {\\n  position: relative;\\n}\\n\\n.apexcharts-reset-icon {\\n  margin-left: 5px;\\n}\\n\\n.apexcharts-zoom-icon,\\n.apexcharts-reset-icon,\\n.apexcharts-menu-icon {\\n  transform: scale(0.85);\\n}\\n\\n.apexcharts-zoomin-icon,\\n.apexcharts-zoomout-icon {\\n  transform: scale(0.7)\\n}\\n\\n.apexcharts-zoomout-icon {\\n  margin-right: 3px;\\n}\\n\\n.apexcharts-pan-icon {\\n  transform: scale(0.62);\\n  position: relative;\\n  left: 1px;\\n  top: 0px;\\n}\\n\\n.apexcharts-pan-icon svg {\\n  fill: #fff;\\n  stroke: #6E8192;\\n  stroke-width: 2;\\n}\\n\\n.apexcharts-pan-icon.apexcharts-selected svg {\\n  stroke: #008FFB;\\n}\\n\\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\\n  stroke: #333;\\n}\\n\\n.apexcharts-toolbar {\\n  position: absolute;\\n  z-index: 11;\\n  max-width: 176px;\\n  text-align: right;\\n  border-radius: 3px;\\n  padding: 0px 6px 2px 6px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n\\n.apexcharts-menu {\\n  background: #fff;\\n  position: absolute;\\n  top: 100%;\\n  border: 1px solid #ddd;\\n  border-radius: 3px;\\n  padding: 3px;\\n  right: 10px;\\n  opacity: 0;\\n  min-width: 110px;\\n  transition: 0.15s ease all;\\n  pointer-events: none;\\n}\\n\\n.apexcharts-menu.apexcharts-menu-open {\\n  opacity: 1;\\n  pointer-events: all;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-menu-item {\\n  padding: 6px 7px;\\n  font-size: 12px;\\n  cursor: pointer;\\n}\\n\\n.apexcharts-theme-light .apexcharts-menu-item:hover {\\n  background: #eee;\\n}\\n\\n.apexcharts-theme-dark .apexcharts-menu {\\n  background: rgba(0, 0, 0, 0.7);\\n  color: #fff;\\n}\\n\\n@media screen and (min-width: 768px) {\\n  .apexcharts-canvas:hover .apexcharts-toolbar {\\n    opacity: 1;\\n  }\\n}\\n\\n.apexcharts-datalabel.apexcharts-element-hidden {\\n  opacity: 0;\\n}\\n\\n.apexcharts-pie-label,\\n.apexcharts-datalabels,\\n.apexcharts-datalabel,\\n.apexcharts-datalabel-label,\\n.apexcharts-datalabel-value {\\n  cursor: default;\\n  pointer-events: none;\\n}\\n\\n.apexcharts-pie-label-delay {\\n  opacity: 0;\\n  animation-name: opaque;\\n  animation-duration: 0.3s;\\n  animation-fill-mode: forwards;\\n  animation-timing-function: ease;\\n}\\n\\n.apexcharts-canvas .apexcharts-element-hidden {\\n  opacity: 0;\\n}\\n\\n.apexcharts-hide .apexcharts-series-points {\\n  opacity: 0;\\n}\\n\\n.apexcharts-gridline,\\n.apexcharts-annotation-rect,\\n.apexcharts-tooltip .apexcharts-marker,\\n.apexcharts-area-series .apexcharts-area,\\n.apexcharts-line,\\n.apexcharts-zoom-rect,\\n.apexcharts-toolbar svg,\\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\\n.apexcharts-radar-series path,\\n.apexcharts-radar-series polygon {\\n  pointer-events: none;\\n}\\n\\n\\n/* markers */\\n\\n.apexcharts-marker {\\n  transition: 0.15s ease all;\\n}\\n\\n@keyframes opaque {\\n  0% {\\n    opacity: 0;\\n  }\\n  100% {\\n    opacity: 1;\\n  }\\n}\\n\\n\\n/* Resize generated styles */\\n\\n@keyframes resizeanim {\\n  from {\\n    opacity: 0;\\n  }\\n  to {\\n    opacity: 0;\\n  }\\n}\\n\\n.resize-triggers {\\n  animation: 1ms resizeanim;\\n  visibility: hidden;\\n  opacity: 0;\\n}\\n\\n.resize-triggers,\\n.resize-triggers>div,\\n.contract-trigger:before {\\n  content: \" \";\\n  display: block;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  height: 100%;\\n  width: 100%;\\n  overflow: hidden;\\n}\\n\\n.resize-triggers>div {\\n  background: #eee;\\n  overflow: auto;\\n}\\n\\n.contract-trigger:before {\\n  width: 200%;\\n  height: 200%;\\n}', r ? s.prepend(t.css) : o.head.appendChild(t.css));\n            }\n\n            var l = t.create(t.w.config.series, {});\n            if (!l) return e(t);\n            t.mount(l).then(function () {\n              \"function\" == typeof t.w.config.chart.events.mounted && t.w.config.chart.events.mounted(t, t.w), t.events.fireEvent(\"mounted\", [t, t.w]), e(l);\n            })[\"catch\"](function (t) {\n              i(t);\n            });\n          } else i(new Error(\"Element not found\"));\n        });\n      }\n    }, {\n      key: \"create\",\n      value: function value(t, e) {\n        var i = this.w;\n        new Ht(this).initModules();\n        var a = this.w.globals;\n        (a.noData = !1, a.animationEnded = !1, this.responsive.checkResponsiveConfig(e), i.config.xaxis.convertedCatToNumeric) && new D(i.config).convertCatToNumericXaxis(i.config, this.ctx);\n        if (null === this.el) return a.animationEnded = !0, null;\n        if (this.core.setupElements(), \"treemap\" === i.config.chart.type && (i.config.grid.show = !1, i.config.yaxis[0].show = !1), 0 === a.svgWidth) return a.animationEnded = !0, null;\n        var s = y.checkComboSeries(t);\n        a.comboCharts = s.comboCharts, a.comboBarCount = s.comboBarCount;\n        var r = t.every(function (t) {\n          return t.data && 0 === t.data.length;\n        });\n        (0 === t.length || r) && this.series.handleNoData(), this.events.setupEventHandlers(), this.data.parseData(t), this.theme.init(), new T(this).setGlobalMarkerSize(), this.formatters.setLabelFormatters(), this.titleSubtitle.draw(), a.noData && a.collapsedSeries.length !== a.series.length && !i.config.legend.showForSingleSeries || this.legend.init(), this.series.hasAllSeriesEqualX(), a.axisCharts && (this.core.coreCalculations(), \"category\" !== i.config.xaxis.type && this.formatters.setLabelFormatters(), this.ctx.toolbar.minX = i.globals.minX, this.ctx.toolbar.maxX = i.globals.maxX), this.formatters.heatmapLabelFormatters(), new y(this).getLargestMarkerSize(), this.dimensions.plotCoords();\n        var o = this.core.xySettings();\n        this.grid.createGridMask();\n        var n = this.core.plotChartType(t, o),\n            l = new z(this);\n        l.bringForward(), i.config.dataLabels.background.enabled && l.dataLabelsBackground(), this.core.shiftGraphPosition();\n        var h = {\n          plot: {\n            left: i.globals.translateX,\n            top: i.globals.translateY,\n            width: i.globals.gridWidth,\n            height: i.globals.gridHeight\n          }\n        };\n        return {\n          elGraph: n,\n          xyRatios: o,\n          elInner: i.globals.dom.elGraphical,\n          dimensions: h\n        };\n      }\n    }, {\n      key: \"mount\",\n      value: function value() {\n        var t = this,\n            e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,\n            i = this,\n            a = i.w;\n        return new Promise(function (s, r) {\n          if (null === i.el) return r(new Error(\"Not enough data to display or target element not found\"));\n          (null === e || a.globals.allSeriesCollapsed) && i.series.handleNoData(), \"treemap\" !== a.config.chart.type && i.axes.drawAxis(a.config.chart.type, e.xyRatios), i.grid = new U(i);\n          var o = i.grid.drawGrid();\n          i.annotations = new P(i), i.annotations.drawImageAnnos(), i.annotations.drawTextAnnos(), \"back\" === a.config.grid.position && o && a.globals.dom.elGraphical.add(o.el);\n          var n = new _(t.ctx),\n              l = new $(t.ctx);\n          if (null !== o && (n.xAxisLabelCorrections(o.xAxisTickWidth), l.setYAxisTextAlignments(), a.config.yaxis.map(function (t, e) {\n            -1 === a.globals.ignoreYAxisIndexes.indexOf(e) && l.yAxisTitleRotate(e, t.opposite);\n          })), \"back\" === a.config.annotations.position && (a.globals.dom.Paper.add(a.globals.dom.elAnnotations), i.annotations.drawAxesAnnotations()), Array.isArray(e.elGraph)) for (var h = 0; h < e.elGraph.length; h++) {\n            a.globals.dom.elGraphical.add(e.elGraph[h]);\n          } else a.globals.dom.elGraphical.add(e.elGraph);\n\n          if (\"front\" === a.config.grid.position && o && a.globals.dom.elGraphical.add(o.el), \"front\" === a.config.xaxis.crosshairs.position && i.crosshairs.drawXCrosshairs(), \"front\" === a.config.yaxis[0].crosshairs.position && i.crosshairs.drawYCrosshairs(), \"front\" === a.config.annotations.position && (a.globals.dom.Paper.add(a.globals.dom.elAnnotations), i.annotations.drawAxesAnnotations()), !a.globals.noData) {\n            if (a.config.tooltip.enabled && !a.globals.noData && i.w.globals.tooltip.drawTooltip(e.xyRatios), a.globals.axisCharts && (a.globals.isXNumeric || a.config.xaxis.convertedCatToNumeric || a.globals.isRangeBar)) (a.config.chart.zoom.enabled || a.config.chart.selection && a.config.chart.selection.enabled || a.config.chart.pan && a.config.chart.pan.enabled) && i.zoomPanSelection.init({\n              xyRatios: e.xyRatios\n            });else {\n              var c = a.config.chart.toolbar.tools;\n              [\"zoom\", \"zoomin\", \"zoomout\", \"selection\", \"pan\", \"reset\"].forEach(function (t) {\n                c[t] = !1;\n              });\n            }\n            a.config.chart.toolbar.show && !a.globals.allSeriesCollapsed && i.toolbar.createToolbar();\n          }\n\n          a.globals.memory.methodsToExec.length > 0 && a.globals.memory.methodsToExec.forEach(function (t) {\n            t.method(t.params, !1, t.context);\n          }), a.globals.axisCharts || a.globals.noData || i.core.resizeNonAxisCharts(), s(i);\n        });\n      }\n    }, {\n      key: \"destroy\",\n      value: function value() {\n        var t, e;\n        window.removeEventListener(\"resize\", this.windowResizeHandler), this.el.parentNode, t = this.parentResizeHandler, (e = Nt.get(t)) && (e.disconnect(), Nt[\"delete\"](t));\n        var i = this.w.config.chart.id;\n        i && Apex._chartInstances.forEach(function (t, e) {\n          t.id === x.escapeString(i) && Apex._chartInstances.splice(e, 1);\n        }), new Dt(this.ctx).clear({\n          isUpdating: !1\n        });\n      }\n    }, {\n      key: \"updateOptions\",\n      value: function value(t) {\n        var e = this,\n            i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],\n            a = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n            s = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],\n            r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],\n            o = this.w;\n        return o.globals.selection = void 0, t.series && (this.series.resetSeries(!1, !0, !1), t.series.length && t.series[0].data && (t.series = t.series.map(function (t, i) {\n          return e.updateHelpers._extendSeries(t, i);\n        })), this.updateHelpers.revertDefaultAxisMinMax()), t.xaxis && (t = this.updateHelpers.forceXAxisUpdate(t)), t.yaxis && (t = this.updateHelpers.forceYAxisUpdate(t)), o.globals.collapsedSeriesIndices.length > 0 && this.series.clearPreviousPaths(), t.theme && (t = this.theme.updateThemeOptions(t)), this.updateHelpers._updateOptions(t, i, a, s, r);\n      }\n    }, {\n      key: \"updateSeries\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],\n            e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];\n        return this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(t, e, i);\n      }\n    }, {\n      key: \"appendSeries\",\n      value: function value(t) {\n        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],\n            a = this.w.config.series.slice();\n        return a.push(t), this.series.resetSeries(!1), this.updateHelpers.revertDefaultAxisMinMax(), this.updateHelpers._updateSeries(a, e, i);\n      }\n    }, {\n      key: \"appendData\",\n      value: function value(t) {\n        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = this;\n        i.w.globals.dataChanged = !0, i.series.getPreviousPaths();\n\n        for (var a = i.w.config.series.slice(), s = 0; s < a.length; s++) {\n          if (null !== t[s] && void 0 !== t[s]) for (var r = 0; r < t[s].data.length; r++) {\n            a[s].data.push(t[s].data[r]);\n          }\n        }\n\n        return i.w.config.series = a, e && (i.w.globals.initialSeries = x.clone(i.w.config.series)), this.update();\n      }\n    }, {\n      key: \"update\",\n      value: function value(t) {\n        var e = this;\n        return new Promise(function (i, a) {\n          new Dt(e.ctx).clear({\n            isUpdating: !0\n          });\n          var s = e.create(e.w.config.series, t);\n          if (!s) return i(e);\n          e.mount(s).then(function () {\n            \"function\" == typeof e.w.config.chart.events.updated && e.w.config.chart.events.updated(e, e.w), e.events.fireEvent(\"updated\", [e, e.w]), e.w.globals.isDirty = !0, i(e);\n          })[\"catch\"](function (t) {\n            a(t);\n          });\n        });\n      }\n    }, {\n      key: \"getSyncedCharts\",\n      value: function value() {\n        var t = this.getGroupedCharts(),\n            e = [this];\n        return t.length && (e = [], t.forEach(function (t) {\n          e.push(t);\n        })), e;\n      }\n    }, {\n      key: \"getGroupedCharts\",\n      value: function value() {\n        var t = this;\n        return Apex._chartInstances.filter(function (t) {\n          if (t.group) return !0;\n        }).map(function (e) {\n          return t.w.config.chart.group === e.group ? e.chart : t;\n        });\n      }\n    }, {\n      key: \"toggleSeries\",\n      value: function value(t) {\n        return this.series.toggleSeries(t);\n      }\n    }, {\n      key: \"highlightSeriesOnLegendHover\",\n      value: function value(t, e) {\n        return this.series.toggleSeriesOnHover(t, e);\n      }\n    }, {\n      key: \"showSeries\",\n      value: function value(t) {\n        this.series.showSeries(t);\n      }\n    }, {\n      key: \"hideSeries\",\n      value: function value(t) {\n        this.series.hideSeries(t);\n      }\n    }, {\n      key: \"resetSeries\",\n      value: function value() {\n        var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],\n            e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];\n        this.series.resetSeries(t, e);\n      }\n    }, {\n      key: \"addEventListener\",\n      value: function value(t, e) {\n        this.events.addEventListener(t, e);\n      }\n    }, {\n      key: \"removeEventListener\",\n      value: function value(t, e) {\n        this.events.removeEventListener(t, e);\n      }\n    }, {\n      key: \"addXaxisAnnotation\",\n      value: function value(t) {\n        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,\n            a = this;\n        i && (a = i), a.annotations.addXaxisAnnotationExternal(t, e, a);\n      }\n    }, {\n      key: \"addYaxisAnnotation\",\n      value: function value(t) {\n        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,\n            a = this;\n        i && (a = i), a.annotations.addYaxisAnnotationExternal(t, e, a);\n      }\n    }, {\n      key: \"addPointAnnotation\",\n      value: function value(t) {\n        var e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],\n            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0,\n            a = this;\n        i && (a = i), a.annotations.addPointAnnotationExternal(t, e, a);\n      }\n    }, {\n      key: \"clearAnnotations\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0,\n            e = this;\n        t && (e = t), e.annotations.clearAnnotations(e);\n      }\n    }, {\n      key: \"removeAnnotation\",\n      value: function value(t) {\n        var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0,\n            i = this;\n        e && (i = e), i.annotations.removeAnnotation(i, t);\n      }\n    }, {\n      key: \"getChartArea\",\n      value: function value() {\n        return this.w.globals.dom.baseEl.querySelector(\".apexcharts-inner\");\n      }\n    }, {\n      key: \"getSeriesTotalXRange\",\n      value: function value(t, e) {\n        return this.coreUtils.getSeriesTotalsXRange(t, e);\n      }\n    }, {\n      key: \"getHighestValueInSeries\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n            e = new Z(this.ctx);\n        return e.getMinYMaxY(t).highestY;\n      }\n    }, {\n      key: \"getLowestValueInSeries\",\n      value: function value() {\n        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,\n            e = new Z(this.ctx);\n        return e.getMinYMaxY(t).lowestY;\n      }\n    }, {\n      key: \"getSeriesTotal\",\n      value: function value() {\n        return this.w.globals.seriesTotals;\n      }\n    }, {\n      key: \"toggleDataPointSelection\",\n      value: function value(t, e) {\n        return this.updateHelpers.toggleDataPointSelection(t, e);\n      }\n    }, {\n      key: \"zoomX\",\n      value: function value(t, e) {\n        this.ctx.toolbar.zoomUpdateOptions(t, e);\n      }\n    }, {\n      key: \"setLocale\",\n      value: function value(t) {\n        this.localization.setCurrentLocaleValues(t);\n      }\n    }, {\n      key: \"dataURI\",\n      value: function value(t) {\n        return new j(this.ctx).dataURI(t);\n      }\n    }, {\n      key: \"paper\",\n      value: function value() {\n        return this.w.globals.dom.Paper;\n      }\n    }, {\n      key: \"_parentResizeCallback\",\n      value: function value() {\n        this.w.globals.animationEnded && this.w.config.chart.redrawOnParentResize && this._windowResize();\n      }\n    }, {\n      key: \"_windowResize\",\n      value: function value() {\n        var t = this;\n        clearTimeout(this.w.globals.resizeTimer), this.w.globals.resizeTimer = window.setTimeout(function () {\n          t.w.globals.resized = !0, t.w.globals.dataChanged = !1, t.ctx.update();\n        }, 150);\n      }\n    }, {\n      key: \"_windowResizeHandler\",\n      value: function value() {\n        var t = this.w.config.chart.redrawOnWindowResize;\n        \"function\" == typeof t && (t = t()), t && this._windowResize();\n      }\n    }], [{\n      key: \"getChartByID\",\n      value: function value(t) {\n        var e = x.escapeString(t),\n            i = Apex._chartInstances.filter(function (t) {\n          return t.id === e;\n        })[0];\n\n        return i && i.chart;\n      }\n    }, {\n      key: \"initOnLoad\",\n      value: function value() {\n        for (var e = document.querySelectorAll(\"[data-apexcharts]\"), i = 0; i < e.length; i++) {\n          new t(e[i], JSON.parse(e[i].getAttribute(\"data-options\"))).render();\n        }\n      }\n    }, {\n      key: \"exec\",\n      value: function value(t, e) {\n        var i = this.getChartByID(t);\n\n        if (i) {\n          i.w.globals.isExecCalled = !0;\n          var a = null;\n\n          if (-1 !== i.publicMethods.indexOf(e)) {\n            for (var s = arguments.length, r = new Array(s > 2 ? s - 2 : 0), o = 2; o < s; o++) {\n              r[o - 2] = arguments[o];\n            }\n\n            a = i[e].apply(i, r);\n          }\n\n          return a;\n        }\n      }\n    }, {\n      key: \"merge\",\n      value: function value(t, e) {\n        return x.extend(t, e);\n      }\n    }]), t;\n  }();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/libs/chart/apexcharts/apexcharts.min.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/assets/libs/chart/apexcharts/apexcharts.min.js");
/******/ 	
/******/ })()
;